[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Kirill Müller Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kirill Müller. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Müller K (2025). dd: DuckDB Functions. R package version 0.0.0.9000, https://github.com/krlmlr/dd.","code":"@Manual{,   title = {dd: All DuckDB Functions},   author = {Kirill Müller},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/krlmlr/dd}, }"},{"path":"/index.html","id":"dd","dir":"","previous_headings":"","what":"All DuckDB Functions","title":"All DuckDB Functions","text":"goal dd provide documentation DuckDB’s functions, later also easy way test . meant used conjunction duckplyr duckdb.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"All DuckDB Functions","text":"can install development version dd like :","code":"pak::pak(\"cynkra/dd\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"All DuckDB Functions","text":"","code":"library(dd) dd$acos #> function(x = DOUBLE) { #>   stop(\"DuckDB function acos() is not available in R.\") #> } #> <bytecode: 0xdeadbeef> #> <environment: namespace:dd>  help(acos, package = \"dd\") DuckDB function acos  Description:       Computes the arccosine of x.  Arguments:         x: 'DOUBLE'  Examples:       ## Not run:       acos(0.5)      ## End(Not run)"},{"path":"/reference/acos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function acos — acos","title":"DuckDB function acos — acos","text":"Computes arccosine x.","code":""},{"path":"/reference/acos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function acos — acos","text":"x DOUBLE","code":""},{"path":"/reference/acos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function acos — acos","text":"","code":"if (FALSE) { # \\dontrun{ acos(0.5) } # }"},{"path":"/reference/acosh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function acosh — acosh","title":"DuckDB function acosh — acosh","text":"Computes inverse hyperbolic cos x.","code":""},{"path":"/reference/acosh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function acosh — acosh","text":"x DOUBLE","code":""},{"path":"/reference/acosh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function acosh — acosh","text":"","code":"if (FALSE) { # \\dontrun{ acosh(2.3) } # }"},{"path":"/reference/alias.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function alias — alias","title":"DuckDB function alias — alias","text":"Returns name given expression.","code":""},{"path":"/reference/alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function alias — alias","text":"expr ","code":""},{"path":"/reference/alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function alias — alias","text":"","code":"if (FALSE) { # \\dontrun{ alias(42 + 1) } # }"},{"path":"/reference/apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function apply — apply","title":"DuckDB function apply — apply","text":"Returns list result applying lambda function element input list. See Lambda Functions section details.","code":""},{"path":"/reference/apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function apply — apply","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/array_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_apply — array_apply","title":"DuckDB function array_apply — array_apply","text":"Returns list result applying lambda function element input list. See Lambda Functions section details.","code":""},{"path":"/reference/array_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_apply — array_apply","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/array_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_cat — array_cat","title":"DuckDB function array_cat — array_cat","text":"Concatenates two lists.","code":""},{"path":"/reference/array_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_cat — array_cat","text":"list1 [] list2 []","code":""},{"path":[]},{"path":"/reference/array_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_concat — array_concat","title":"DuckDB function array_concat — array_concat","text":"Concatenates two lists.","code":""},{"path":"/reference/array_concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_concat — array_concat","text":"list1 [] list2 []","code":""},{"path":[]},{"path":"/reference/array_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_contains — array_contains","title":"DuckDB function array_contains — array_contains","text":"Returns true list contains element.","code":""},{"path":"/reference/array_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_contains — array_contains","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/array_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_distinct — array_distinct","title":"DuckDB function array_distinct — array_distinct","text":"Removes duplicates NULLs list. preserve original order.","code":""},{"path":"/reference/array_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_distinct — array_distinct","text":"list []","code":""},{"path":[]},{"path":"/reference/array_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_filter — array_filter","title":"DuckDB function array_filter — array_filter","text":"Constructs list elements input list lambda function returns true.","code":""},{"path":"/reference/array_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_filter — array_filter","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/array_has.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has — array_has","title":"DuckDB function array_has — array_has","text":"Returns true list contains element.","code":""},{"path":"/reference/array_has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has — array_has","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/array_has_all.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has_all — array_has_all","title":"DuckDB function array_has_all — array_has_all","text":"Returns true elements l2 l1. NULLs ignored.","code":""},{"path":"/reference/array_has_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has_all — array_has_all","text":"l1 [] l2 []","code":""},{"path":[]},{"path":"/reference/array_has_any.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has_any — array_has_any","title":"DuckDB function array_has_any — array_has_any","text":"Returns true lists element common. NULLs ignored.","code":""},{"path":"/reference/array_has_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has_any — array_has_any","text":"l1 [] l2 []","code":""},{"path":[]},{"path":"/reference/array_indexof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_indexof — array_indexof","title":"DuckDB function array_indexof — array_indexof","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"/reference/array_indexof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_indexof — array_indexof","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/array_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_position — array_position","title":"DuckDB function array_position — array_position","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"/reference/array_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_position — array_position","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/array_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_reduce — array_reduce","title":"DuckDB function array_reduce — array_reduce","text":"Returns single value result applying lambda function element input list, starting first element repeatedly applying lambda function result previous application next element list.","code":""},{"path":"/reference/array_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_reduce — array_reduce","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/array_select.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_select — array_select","title":"DuckDB function array_select — array_select","text":"Returns list based elements selected index_list.","code":""},{"path":"/reference/array_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_select — array_select","text":"value_list [] index_list BIGINT[]","code":""},{"path":[]},{"path":"/reference/array_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_transform — array_transform","title":"DuckDB function array_transform — array_transform","text":"Returns list result applying lambda function element input list. See Lambda Functions section details.","code":""},{"path":"/reference/array_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_transform — array_transform","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/array_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_unique — array_unique","title":"DuckDB function array_unique — array_unique","text":"Counts unique elements list.","code":""},{"path":"/reference/array_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_unique — array_unique","text":"list []","code":""},{"path":[]},{"path":"/reference/array_where.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_where — array_where","title":"DuckDB function array_where — array_where","text":"Returns list BOOLEANs mask_list applied mask value_list.","code":""},{"path":"/reference/array_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_where — array_where","text":"value_list [] mask_list BOOLEAN[]","code":""},{"path":[]},{"path":"/reference/ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ascii — ascii","title":"DuckDB function ascii — ascii","text":"Returns integer represents Unicode code point first character string.","code":""},{"path":"/reference/ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ascii — ascii","text":"string VARCHAR","code":""},{"path":"/reference/ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function ascii — ascii","text":"","code":"if (FALSE) { # \\dontrun{ ascii('Ω') } # }"},{"path":"/reference/asin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function asin — asin","title":"DuckDB function asin — asin","text":"Computes arcsine x.","code":""},{"path":"/reference/asin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function asin — asin","text":"x DOUBLE","code":""},{"path":"/reference/asin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function asin — asin","text":"","code":"if (FALSE) { # \\dontrun{ asin(0.5) } # }"},{"path":"/reference/asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function asinh — asinh","title":"DuckDB function asinh — asinh","text":"Computes inverse hyperbolic sin x.","code":""},{"path":"/reference/asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function asinh — asinh","text":"x DOUBLE","code":""},{"path":"/reference/asinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function asinh — asinh","text":"","code":"if (FALSE) { # \\dontrun{ asinh(0.5) } # }"},{"path":"/reference/atan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atan — atan","title":"DuckDB function atan — atan","text":"Computes arctangent x.","code":""},{"path":"/reference/atan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atan — atan","text":"x DOUBLE","code":""},{"path":"/reference/atan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function atan — atan","text":"","code":"if (FALSE) { # \\dontrun{ atan(0.5) } # }"},{"path":"/reference/atan2.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atan2 — atan2","title":"DuckDB function atan2 — atan2","text":"Computes arctangent (y, x).","code":""},{"path":"/reference/atan2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atan2 — atan2","text":"y DOUBLE x DOUBLE","code":""},{"path":"/reference/atan2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function atan2 — atan2","text":"","code":"if (FALSE) { # \\dontrun{ atan2(1.0, 0.0) } # }"},{"path":"/reference/atanh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atanh — atanh","title":"DuckDB function atanh — atanh","text":"Computes inverse hyperbolic tan x.","code":""},{"path":"/reference/atanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atanh — atanh","text":"x DOUBLE","code":""},{"path":"/reference/atanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function atanh — atanh","text":"","code":"if (FALSE) { # \\dontrun{ atanh(0.5) } # }"},{"path":"/reference/base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function base64 — base64","title":"DuckDB function base64 — base64","text":"Convert blob base64 encoded string.","code":""},{"path":"/reference/base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function base64 — base64","text":"blob BLOB","code":""},{"path":"/reference/base64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function base64 — base64","text":"","code":"if (FALSE) { # \\dontrun{ base64('A'::blob) } # }"},{"path":"/reference/bit_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_position — bit_position","title":"DuckDB function bit_position — bit_position","text":"Returns first starting index specified substring within bits, zero present. first (leftmost) bit indexed 1.","code":""},{"path":"/reference/bit_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_position — bit_position","text":"substring BIT bitstring BIT","code":""},{"path":"/reference/bit_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function bit_position — bit_position","text":"","code":"if (FALSE) { # \\dontrun{ bit_position('010'::BIT, '1110101'::BIT) } # }"},{"path":"/reference/can_cast_implicitly.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function can_cast_implicitly — can_cast_implicitly","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"Whether can implicitly cast source type type.","code":""},{"path":"/reference/can_cast_implicitly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"source_type target_type ","code":""},{"path":[]},{"path":"/reference/cbrt.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cbrt — cbrt","title":"DuckDB function cbrt — cbrt","text":"Returns cube root x.","code":""},{"path":"/reference/cbrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cbrt — cbrt","text":"x DOUBLE","code":""},{"path":"/reference/cbrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function cbrt — cbrt","text":"","code":"if (FALSE) { # \\dontrun{ cbrt(8) } # }"},{"path":"/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function chr — chr","title":"DuckDB function chr — chr","text":"Returns character corresponding ASCII code value Unicode code point.","code":""},{"path":"/reference/chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function chr — chr","text":"code_point INTEGER","code":""},{"path":"/reference/chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function chr — chr","text":"","code":"if (FALSE) { # \\dontrun{ chr(65) } # }"},{"path":"/reference/cos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cos — cos","title":"DuckDB function cos — cos","text":"Computes cos x.","code":""},{"path":"/reference/cos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cos — cos","text":"x DOUBLE","code":""},{"path":"/reference/cos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function cos — cos","text":"","code":"if (FALSE) { # \\dontrun{ cos(90) } # }"},{"path":"/reference/cosh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cosh — cosh","title":"DuckDB function cosh — cosh","text":"Computes hyperbolic cos x.","code":""},{"path":"/reference/cosh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cosh — cosh","text":"x DOUBLE","code":""},{"path":"/reference/cosh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function cosh — cosh","text":"","code":"if (FALSE) { # \\dontrun{ cosh(1) } # }"},{"path":"/reference/cot.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cot — cot","title":"DuckDB function cot — cot","text":"Computes cotangent x.","code":""},{"path":"/reference/cot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cot — cot","text":"x DOUBLE","code":""},{"path":"/reference/cot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function cot — cot","text":"","code":"if (FALSE) { # \\dontrun{ cot(0.5) } # }"},{"path":"/reference/current_setting.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_setting — current_setting","title":"DuckDB function current_setting — current_setting","text":"Returns current value configuration setting.","code":""},{"path":"/reference/current_setting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function current_setting — current_setting","text":"setting_name VARCHAR","code":""},{"path":"/reference/current_setting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function current_setting — current_setting","text":"","code":"if (FALSE) { # \\dontrun{ current_setting('access_mode') } # }"},{"path":"/reference/damerau_levenshtein.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function damerau_levenshtein — damerau_levenshtein","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"Extension Levenshtein distance also include transposition adjacent characters allowed edit operation. words, minimum number edit operations (insertions, deletions, substitutions transpositions) required change one string another. Different case considered different.","code":""},{"path":"/reference/damerau_levenshtein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/damerau_levenshtein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"","code":"if (FALSE) { # \\dontrun{ damerau_levenshtein('hello', 'world') } # }"},{"path":"/reference/dd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dd: All DuckDB Functions — dd-package","title":"dd: All DuckDB Functions — dd-package","text":"Lists DuckDB functions integration R's help system.","code":""},{"path":[]},{"path":"/reference/dd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dd: All DuckDB Functions — dd-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID)","code":""},{"path":"/reference/dd.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB functions — dd","title":"DuckDB functions — dd","text":"list known DuckDB functions.","code":""},{"path":"/reference/dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB functions — dd","text":"","code":"dd"},{"path":"/reference/dd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DuckDB functions — dd","text":"object class list length 155.","code":""},{"path":"/reference/dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB functions — dd","text":"","code":"dd[1:3] #> $acos #> function(x = DOUBLE) { #>   stop(\"DuckDB function acos() is not available in R.\") #> } #> <bytecode: 0x557fbf490648> #> <environment: namespace:dd> #>  #> $acosh #> function(x = DOUBLE) { #>   stop(\"DuckDB function acosh() is not available in R.\") #> } #> <bytecode: 0x557fbf492530> #> <environment: namespace:dd> #>  #> $alias #> function(expr = ANY) { #>   stop(\"DuckDB function alias() is not available in R.\") #> } #> <bytecode: 0x557fbf494418> #> <environment: namespace:dd> #>"},{"path":"/reference/decode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function decode — decode","title":"DuckDB function decode — decode","text":"Convert blob varchar. Fails blob valid utf-8.","code":""},{"path":"/reference/decode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function decode — decode","text":"blob BLOB","code":""},{"path":"/reference/decode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function decode — decode","text":"","code":"if (FALSE) { # \\dontrun{ decode('\\xC3\\xBC'::BLOB) } # }"},{"path":"/reference/degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function degrees — degrees","title":"DuckDB function degrees — degrees","text":"Converts radians degrees.","code":""},{"path":"/reference/degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function degrees — degrees","text":"x DOUBLE","code":""},{"path":"/reference/degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function degrees — degrees","text":"","code":"if (FALSE) { # \\dontrun{ degrees(pi()) } # }"},{"path":"/reference/editdist3.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function editdist3 — editdist3","title":"DuckDB function editdist3 — editdist3","text":"minimum number single-character edits (insertions, deletions substitutions) required change one string . Different case considered different.","code":""},{"path":"/reference/editdist3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function editdist3 — editdist3","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/editdist3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function editdist3 — editdist3","text":"","code":"if (FALSE) { # \\dontrun{ levenshtein('duck','db') } # }"},{"path":"/reference/encode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function encode — encode","title":"DuckDB function encode — encode","text":"Convert varchar blob. Converts utf-8 characters literal encoding.","code":""},{"path":"/reference/encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function encode — encode","text":"string VARCHAR","code":""},{"path":"/reference/encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function encode — encode","text":"","code":"if (FALSE) { # \\dontrun{ encode('my_string_with_ü') } # }"},{"path":"/reference/enum_code.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_code — enum_code","title":"DuckDB function enum_code — enum_code","text":"Returns numeric value backing given enum value.","code":""},{"path":"/reference/enum_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_code — enum_code","text":"enum ","code":""},{"path":"/reference/enum_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function enum_code — enum_code","text":"","code":"if (FALSE) { # \\dontrun{ enum_code('happy'::mood) } # }"},{"path":"/reference/enum_first.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_first — enum_first","title":"DuckDB function enum_first — enum_first","text":"Returns first value input enum type.","code":""},{"path":"/reference/enum_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_first — enum_first","text":"enum ","code":""},{"path":[]},{"path":"/reference/enum_last.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_last — enum_last","title":"DuckDB function enum_last — enum_last","text":"Returns last value input enum type.","code":""},{"path":"/reference/enum_last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_last — enum_last","text":"enum ","code":""},{"path":[]},{"path":"/reference/enum_range.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_range — enum_range","title":"DuckDB function enum_range — enum_range","text":"Returns values input enum type array.","code":""},{"path":"/reference/enum_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_range — enum_range","text":"enum ","code":""},{"path":[]},{"path":"/reference/enum_range_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_range_boundary — enum_range_boundary","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"Returns range two given enum values array. values must enum type. first parameter NULL, result starts first value enum type. second parameter NULL, result ends last value enum type.","code":""},{"path":"/reference/enum_range_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"start end ","code":""},{"path":"/reference/enum_range_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"","code":"if (FALSE) { # \\dontrun{ enum_range_boundary(NULL, 'happy'::mood) } # }"},{"path":"/reference/even.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function even — even","title":"DuckDB function even — even","text":"Rounds x next even number rounding away zero.","code":""},{"path":"/reference/even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function even — even","text":"x DOUBLE","code":""},{"path":"/reference/even.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function even — even","text":"","code":"if (FALSE) { # \\dontrun{ even(2.9) } # }"},{"path":"/reference/exp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function exp — exp","title":"DuckDB function exp — exp","text":"Computes e power x.","code":""},{"path":"/reference/exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function exp — exp","text":"x DOUBLE","code":""},{"path":"/reference/exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function exp — exp","text":"","code":"if (FALSE) { # \\dontrun{ exp(1) } # }"},{"path":"/reference/factorial.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function factorial — factorial","title":"DuckDB function factorial — factorial","text":"Factorial x. Computes product current integer integers .","code":""},{"path":"/reference/factorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function factorial — factorial","text":"x INTEGER","code":""},{"path":[]},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function filter — filter","title":"DuckDB function filter — filter","text":"Constructs list elements input list lambda function returns true.","code":""},{"path":"/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function filter — filter","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function flatten — flatten","title":"DuckDB function flatten — flatten","text":"Flatten nested list one level.","code":""},{"path":"/reference/flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function flatten — flatten","text":"nested_list [][]","code":""},{"path":[]},{"path":"/reference/formatReadableDecimalSize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"Converts bytes human-readable presentation (e.g. 16000 -> 16.0 KB).","code":""},{"path":"/reference/formatReadableDecimalSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"bytes BIGINT","code":""},{"path":"/reference/formatReadableDecimalSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"","code":"if (FALSE) { # \\dontrun{ format_bytes(1000 * 16) } # }"},{"path":"/reference/formatReadableSize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function formatReadableSize — formatReadableSize","title":"DuckDB function formatReadableSize — formatReadableSize","text":"Converts bytes human-readable presentation (e.g. 16000 -> 15.6 KiB).","code":""},{"path":"/reference/formatReadableSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function formatReadableSize — formatReadableSize","text":"bytes BIGINT","code":""},{"path":"/reference/formatReadableSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function formatReadableSize — formatReadableSize","text":"","code":"if (FALSE) { # \\dontrun{ format_bytes(1000 * 16) } # }"},{"path":"/reference/format_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function format_bytes — format_bytes","title":"DuckDB function format_bytes — format_bytes","text":"Converts bytes human-readable presentation (e.g. 16000 -> 15.6 KiB).","code":""},{"path":"/reference/format_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function format_bytes — format_bytes","text":"bytes BIGINT","code":""},{"path":"/reference/format_bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function format_bytes — format_bytes","text":"","code":"if (FALSE) { # \\dontrun{ format_bytes(1000 * 16) } # }"},{"path":"/reference/from_base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_base64 — from_base64","title":"DuckDB function from_base64 — from_base64","text":"Convert base64 encoded string character string.","code":""},{"path":"/reference/from_base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_base64 — from_base64","text":"string VARCHAR","code":""},{"path":"/reference/from_base64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function from_base64 — from_base64","text":"","code":"if (FALSE) { # \\dontrun{ from_base64('QQ==') } # }"},{"path":"/reference/from_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_binary — from_binary","title":"DuckDB function from_binary — from_binary","text":"Converts value binary representation blob.","code":""},{"path":"/reference/from_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_binary — from_binary","text":"value VARCHAR","code":""},{"path":"/reference/from_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function from_binary — from_binary","text":"","code":"if (FALSE) { # \\dontrun{ unbin('0110') } # }"},{"path":"/reference/from_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_hex — from_hex","title":"DuckDB function from_hex — from_hex","text":"Converts value hexadecimal representation blob.","code":""},{"path":"/reference/from_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_hex — from_hex","text":"value VARCHAR","code":""},{"path":"/reference/from_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function from_hex — from_hex","text":"","code":"if (FALSE) { # \\dontrun{ unhex('2A') } # }"},{"path":"/reference/gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function gamma — gamma","title":"DuckDB function gamma — gamma","text":"Interpolation (x-1) factorial (decimal inputs allowed).","code":""},{"path":"/reference/gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function gamma — gamma","text":"x DOUBLE","code":""},{"path":"/reference/gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function gamma — gamma","text":"","code":"if (FALSE) { # \\dontrun{ gamma(5.5) } # }"},{"path":"/reference/get_bit.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function get_bit — get_bit","title":"DuckDB function get_bit — get_bit","text":"Extracts nth bit bitstring; first (leftmost) bit indexed 0.","code":""},{"path":"/reference/get_bit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function get_bit — get_bit","text":"bitstring BIT index INTEGER","code":""},{"path":"/reference/get_bit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function get_bit — get_bit","text":"","code":"if (FALSE) { # \\dontrun{ get_bit('0110010'::BIT, 2) } # }"},{"path":"/reference/hamming.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function hamming — hamming","title":"DuckDB function hamming — hamming","text":"number positions different characters 2 strings equal length. Different case considered different.","code":""},{"path":"/reference/hamming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function hamming — hamming","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/hamming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function hamming — hamming","text":"","code":"if (FALSE) { # \\dontrun{ hamming('duck','luck') } # }"},{"path":"/reference/ilike_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ilike_escape — ilike_escape","title":"DuckDB function ilike_escape — ilike_escape","text":"Returns true string matches like_specifier (see Pattern Matching) using case-insensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"/reference/ilike_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ilike_escape — ilike_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"/reference/ilike_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function ilike_escape — ilike_escape","text":"","code":"if (FALSE) { # \\dontrun{ ilike_escape('A%c', 'a$%C', '$') } # }"},{"path":"/reference/instr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function instr — instr","title":"DuckDB function instr — instr","text":"Returns location first occurrence needle haystack, counting 1. Returns 0 match found.","code":""},{"path":"/reference/instr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function instr — instr","text":"haystack VARCHAR needle VARCHAR","code":""},{"path":"/reference/instr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function instr — instr","text":"","code":"if (FALSE) { # \\dontrun{ instr('test test','es') } # }"},{"path":"/reference/is_histogram_other_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"Whether provided value histogram \"\" bin (used values belonging provided bin).","code":""},{"path":"/reference/is_histogram_other_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"val ","code":""},{"path":"/reference/is_histogram_other_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"","code":"if (FALSE) { # \\dontrun{ is_histogram_other_bin(v) } # }"},{"path":"/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function jaccard — jaccard","title":"DuckDB function jaccard — jaccard","text":"Jaccard similarity two strings. Different case considered different. Returns number 0 1.","code":""},{"path":"/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function jaccard — jaccard","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/jaccard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function jaccard — jaccard","text":"","code":"if (FALSE) { # \\dontrun{ jaccard('duck','luck') } # }"},{"path":"/reference/lcase.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lcase — lcase","title":"DuckDB function lcase — lcase","text":"Convert string lower case.","code":""},{"path":"/reference/lcase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lcase — lcase","text":"string VARCHAR","code":""},{"path":"/reference/lcase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function lcase — lcase","text":"","code":"if (FALSE) { # \\dontrun{ lower('Hello') } # }"},{"path":"/reference/left.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function left — left","title":"DuckDB function left — left","text":"Extract left-count characters.","code":""},{"path":"/reference/left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function left — left","text":"string VARCHAR count BIGINT","code":""},{"path":"/reference/left.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function left — left","text":"","code":"if (FALSE) { # \\dontrun{ left('Hello🦆', 2) } # }"},{"path":"/reference/left_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function left_grapheme — left_grapheme","title":"DuckDB function left_grapheme — left_grapheme","text":"Extract left-count grapheme clusters.","code":""},{"path":"/reference/left_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function left_grapheme — left_grapheme","text":"string VARCHAR count BIGINT","code":""},{"path":"/reference/left_grapheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function left_grapheme — left_grapheme","text":"","code":"if (FALSE) { # \\dontrun{ left_grapheme('🤦🏼‍♂️🤦🏽‍♀️', 1) } # }"},{"path":"/reference/length_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function length_grapheme — length_grapheme","title":"DuckDB function length_grapheme — length_grapheme","text":"Number grapheme clusters string.","code":""},{"path":"/reference/length_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function length_grapheme — length_grapheme","text":"string VARCHAR","code":""},{"path":"/reference/length_grapheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function length_grapheme — length_grapheme","text":"","code":"if (FALSE) { # \\dontrun{ length_grapheme('🤦🏼‍♂️🤦🏽‍♀️') } # }"},{"path":"/reference/levenshtein.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function levenshtein — levenshtein","title":"DuckDB function levenshtein — levenshtein","text":"minimum number single-character edits (insertions, deletions substitutions) required change one string . Different case considered different.","code":""},{"path":"/reference/levenshtein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function levenshtein — levenshtein","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/levenshtein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function levenshtein — levenshtein","text":"","code":"if (FALSE) { # \\dontrun{ levenshtein('duck','db') } # }"},{"path":"/reference/lgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lgamma — lgamma","title":"DuckDB function lgamma — lgamma","text":"Computes log gamma function.","code":""},{"path":"/reference/lgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lgamma — lgamma","text":"x DOUBLE","code":""},{"path":"/reference/lgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function lgamma — lgamma","text":"","code":"if (FALSE) { # \\dontrun{ lgamma(2) } # }"},{"path":"/reference/like_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function like_escape — like_escape","title":"DuckDB function like_escape — like_escape","text":"Returns true string matches like_specifier (see Pattern Matching) using case-sensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"/reference/like_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function like_escape — like_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"/reference/like_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function like_escape — like_escape","text":"","code":"if (FALSE) { # \\dontrun{ like_escape('a%c', 'a$%c', '$') } # }"},{"path":"/reference/list_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_apply — list_apply","title":"DuckDB function list_apply — list_apply","text":"Returns list result applying lambda function element input list. See Lambda Functions section details.","code":""},{"path":"/reference/list_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_apply — list_apply","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/list_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_cat — list_cat","title":"DuckDB function list_cat — list_cat","text":"Concatenates two lists.","code":""},{"path":"/reference/list_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_cat — list_cat","text":"list1 [] list2 []","code":""},{"path":[]},{"path":"/reference/list_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_concat — list_concat","title":"DuckDB function list_concat — list_concat","text":"Concatenates two lists.","code":""},{"path":"/reference/list_concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_concat — list_concat","text":"list1 [] list2 []","code":""},{"path":[]},{"path":"/reference/list_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_contains — list_contains","title":"DuckDB function list_contains — list_contains","text":"Returns true list contains element.","code":""},{"path":"/reference/list_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_contains — list_contains","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/list_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_distinct — list_distinct","title":"DuckDB function list_distinct — list_distinct","text":"Removes duplicates NULLs list. preserve original order.","code":""},{"path":"/reference/list_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_distinct — list_distinct","text":"list []","code":""},{"path":[]},{"path":"/reference/list_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_filter — list_filter","title":"DuckDB function list_filter — list_filter","text":"Constructs list elements input list lambda function returns true.","code":""},{"path":"/reference/list_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_filter — list_filter","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/list_has.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has — list_has","title":"DuckDB function list_has — list_has","text":"Returns true list contains element.","code":""},{"path":"/reference/list_has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has — list_has","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/list_has_all.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has_all — list_has_all","title":"DuckDB function list_has_all — list_has_all","text":"Returns true elements l2 l1. NULLs ignored.","code":""},{"path":"/reference/list_has_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has_all — list_has_all","text":"l1 [] l2 []","code":""},{"path":[]},{"path":"/reference/list_has_any.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has_any — list_has_any","title":"DuckDB function list_has_any — list_has_any","text":"Returns true lists element common. NULLs ignored.","code":""},{"path":"/reference/list_has_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has_any — list_has_any","text":"l1 [] l2 []","code":""},{"path":[]},{"path":"/reference/list_indexof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_indexof — list_indexof","title":"DuckDB function list_indexof — list_indexof","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"/reference/list_indexof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_indexof — list_indexof","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/list_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_position — list_position","title":"DuckDB function list_position — list_position","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"/reference/list_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_position — list_position","text":"list [] element ","code":""},{"path":[]},{"path":"/reference/list_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_reduce — list_reduce","title":"DuckDB function list_reduce — list_reduce","text":"Returns single value result applying lambda function element input list, starting first element repeatedly applying lambda function result previous application next element list.","code":""},{"path":"/reference/list_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_reduce — list_reduce","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/list_select.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_select — list_select","title":"DuckDB function list_select — list_select","text":"Returns list based elements selected index_list.","code":""},{"path":"/reference/list_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_select — list_select","text":"value_list [] index_list BIGINT[]","code":""},{"path":[]},{"path":"/reference/list_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_transform — list_transform","title":"DuckDB function list_transform — list_transform","text":"Returns list result applying lambda function element input list. See Lambda Functions section details.","code":""},{"path":"/reference/list_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_transform — list_transform","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/list_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_unique — list_unique","title":"DuckDB function list_unique — list_unique","text":"Counts unique elements list.","code":""},{"path":"/reference/list_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_unique — list_unique","text":"list []","code":""},{"path":[]},{"path":"/reference/list_where.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_where — list_where","title":"DuckDB function list_where — list_where","text":"Returns list BOOLEANs mask_list applied mask value_list.","code":""},{"path":"/reference/list_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_where — list_where","text":"value_list [] mask_list BOOLEAN[]","code":""},{"path":[]},{"path":"/reference/ln.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ln — ln","title":"DuckDB function ln — ln","text":"Computes natural logarithm x.","code":""},{"path":"/reference/ln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ln — ln","text":"x DOUBLE","code":""},{"path":"/reference/ln.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function ln — ln","text":"","code":"if (FALSE) { # \\dontrun{ ln(2) } # }"},{"path":"/reference/log10.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function log10 — log10","title":"DuckDB function log10 — log10","text":"Computes 10-log x.","code":""},{"path":"/reference/log10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function log10 — log10","text":"x DOUBLE","code":""},{"path":"/reference/log10.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function log10 — log10","text":"","code":"if (FALSE) { # \\dontrun{ log10(1000) } # }"},{"path":"/reference/log2.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function log2 — log2","title":"DuckDB function log2 — log2","text":"Computes 2-log x.","code":""},{"path":"/reference/log2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function log2 — log2","text":"x DOUBLE","code":""},{"path":"/reference/log2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function log2 — log2","text":"","code":"if (FALSE) { # \\dontrun{ log2(8) } # }"},{"path":"/reference/lower.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lower — lower","title":"DuckDB function lower — lower","text":"Convert string lower case.","code":""},{"path":"/reference/lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lower — lower","text":"string VARCHAR","code":""},{"path":"/reference/lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function lower — lower","text":"","code":"if (FALSE) { # \\dontrun{ lower('Hello') } # }"},{"path":"/reference/lpad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lpad — lpad","title":"DuckDB function lpad — lpad","text":"Pads string character left count characters.","code":""},{"path":"/reference/lpad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lpad — lpad","text":"string VARCHAR count INTEGER character VARCHAR","code":""},{"path":"/reference/lpad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function lpad — lpad","text":"","code":"if (FALSE) { # \\dontrun{ lpad('hello', 10, '>') } # }"},{"path":"/reference/make_time.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_time — make_time","title":"DuckDB function make_time — make_time","text":"time given parts.","code":""},{"path":"/reference/make_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_time — make_time","text":"hour BIGINT minute BIGINT seconds DOUBLE","code":""},{"path":"/reference/make_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function make_time — make_time","text":"","code":"if (FALSE) { # \\dontrun{ make_time(13, 34, 27.123456) } # }"},{"path":"/reference/make_timestamp_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_timestamp_ns — make_timestamp_ns","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"timestamp given nanoseconds since epoch.","code":""},{"path":"/reference/make_timestamp_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"nanos BIGINT","code":""},{"path":"/reference/make_timestamp_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"","code":"if (FALSE) { # \\dontrun{ make_timestamp(1732117793000000000) } # }"},{"path":"/reference/map_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_contains — map_contains","title":"DuckDB function map_contains — map_contains","text":"Checks map contains given key.","code":""},{"path":"/reference/map_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_contains — map_contains","text":"map MAP(, ) key ","code":""},{"path":[]},{"path":"/reference/mismatches.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mismatches — mismatches","title":"DuckDB function mismatches — mismatches","text":"number positions different characters 2 strings equal length. Different case considered different.","code":""},{"path":"/reference/mismatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mismatches — mismatches","text":"str1 VARCHAR str2 VARCHAR","code":""},{"path":"/reference/mismatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function mismatches — mismatches","text":"","code":"if (FALSE) { # \\dontrun{ hamming('duck','luck') } # }"},{"path":"/reference/nfc_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nfc_normalize — nfc_normalize","title":"DuckDB function nfc_normalize — nfc_normalize","text":"Convert string Unicode NFC normalized string. Useful comparisons ordering text data mixed NFC normalized .","code":""},{"path":"/reference/nfc_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nfc_normalize — nfc_normalize","text":"string VARCHAR","code":""},{"path":"/reference/nfc_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function nfc_normalize — nfc_normalize","text":"","code":"if (FALSE) { # \\dontrun{ nfc_normalize('ardèch') } # }"},{"path":"/reference/normalized_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function normalized_interval — normalized_interval","title":"DuckDB function normalized_interval — normalized_interval","text":"Normalizes INTERVAL equivalent interval.","code":""},{"path":"/reference/normalized_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function normalized_interval — normalized_interval","text":"interval INTERVAL","code":""},{"path":[]},{"path":"/reference/not_ilike_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function not_ilike_escape — not_ilike_escape","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"Returns false string matches like_specifier (see Pattern Matching) using case-insensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"/reference/not_ilike_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"/reference/not_ilike_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"","code":"if (FALSE) { # \\dontrun{ not_ilike_escape('A%c', 'a$%C', '$') } # }"},{"path":"/reference/not_like_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function not_like_escape — not_like_escape","title":"DuckDB function not_like_escape — not_like_escape","text":"Returns false string matches like_specifier (see Pattern Matching) using case-sensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"/reference/not_like_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function not_like_escape — not_like_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"/reference/not_like_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function not_like_escape — not_like_escape","text":"","code":"if (FALSE) { # \\dontrun{ not_like_escape('a%c', 'a$%c', '$') } # }"},{"path":"/reference/ord.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ord — ord","title":"DuckDB function ord — ord","text":"Returns unicode codepoint first character string.","code":""},{"path":"/reference/ord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ord — ord","text":"str VARCHAR","code":""},{"path":"/reference/ord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function ord — ord","text":"","code":"if (FALSE) { # \\dontrun{ unicode('ü') } # }"},{"path":"/reference/pi.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pi — pi","title":"DuckDB function pi — pi","text":"Returns value pi.","code":""},{"path":"/reference/pi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function pi — pi","text":"","code":"if (FALSE) { # \\dontrun{ pi() } # }"},{"path":"/reference/position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function position — position","title":"DuckDB function position — position","text":"Returns location first occurrence needle haystack, counting 1. Returns 0 match found.","code":""},{"path":"/reference/position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function position — position","text":"haystack VARCHAR needle VARCHAR","code":""},{"path":"/reference/position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function position — position","text":"","code":"if (FALSE) { # \\dontrun{ instr('test test','es') } # }"},{"path":"/reference/pow.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pow — pow","title":"DuckDB function pow — pow","text":"Computes x power y.","code":""},{"path":"/reference/pow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pow — pow","text":"x DOUBLE y DOUBLE","code":""},{"path":"/reference/pow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function pow — pow","text":"","code":"if (FALSE) { # \\dontrun{ pow(2, 3) } # }"},{"path":"/reference/power.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function power — power","title":"DuckDB function power — power","text":"Computes x power y.","code":""},{"path":"/reference/power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function power — power","text":"x DOUBLE y DOUBLE","code":""},{"path":"/reference/power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function power — power","text":"","code":"if (FALSE) { # \\dontrun{ pow(2, 3) } # }"},{"path":"/reference/radians.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function radians — radians","title":"DuckDB function radians — radians","text":"Converts degrees radians.","code":""},{"path":"/reference/radians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function radians — radians","text":"x DOUBLE","code":""},{"path":"/reference/radians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function radians — radians","text":"","code":"if (FALSE) { # \\dontrun{ radians(90) } # }"},{"path":"/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function reduce — reduce","title":"DuckDB function reduce — reduce","text":"Returns single value result applying lambda function element input list, starting first element repeatedly applying lambda function result previous application next element list.","code":""},{"path":"/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function reduce — reduce","text":"list [] lambda LAMBDA","code":""},{"path":[]},{"path":"/reference/regexp_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_escape — regexp_escape","title":"DuckDB function regexp_escape — regexp_escape","text":"Escapes potentially meaningful regexp characters input string.","code":""},{"path":"/reference/regexp_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_escape — regexp_escape","text":"string VARCHAR","code":""},{"path":"/reference/regexp_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function regexp_escape — regexp_escape","text":"","code":"if (FALSE) { # \\dontrun{ regexp_escape('https://duckdb.org') } # }"},{"path":"/reference/replace.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function replace — replace","title":"DuckDB function replace — replace","text":"Replaces occurrences source target string.","code":""},{"path":"/reference/replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function replace — replace","text":"string VARCHAR source VARCHAR target VARCHAR","code":""},{"path":"/reference/replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function replace — replace","text":"","code":"if (FALSE) { # \\dontrun{ replace('hello', 'l', '-') } # }"},{"path":"/reference/reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function reverse — reverse","title":"DuckDB function reverse — reverse","text":"Reverses string.","code":""},{"path":"/reference/reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function reverse — reverse","text":"string VARCHAR","code":""},{"path":"/reference/reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function reverse — reverse","text":"","code":"if (FALSE) { # \\dontrun{ reverse('hello') } # }"},{"path":"/reference/right.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function right — right","title":"DuckDB function right — right","text":"Extract right-count characters.","code":""},{"path":"/reference/right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function right — right","text":"string VARCHAR count BIGINT","code":""},{"path":"/reference/right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function right — right","text":"","code":"if (FALSE) { # \\dontrun{ right('Hello🦆', 3) } # }"},{"path":"/reference/right_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function right_grapheme — right_grapheme","title":"DuckDB function right_grapheme — right_grapheme","text":"Extract right-count grapheme clusters.","code":""},{"path":"/reference/right_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function right_grapheme — right_grapheme","text":"string VARCHAR count BIGINT","code":""},{"path":"/reference/right_grapheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function right_grapheme — right_grapheme","text":"","code":"if (FALSE) { # \\dontrun{ right_grapheme('🤦🏼‍♂️🤦🏽‍♀️', 1) } # }"},{"path":"/reference/rpad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function rpad — rpad","title":"DuckDB function rpad — rpad","text":"Pads string character right count characters.","code":""},{"path":"/reference/rpad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function rpad — rpad","text":"string VARCHAR count INTEGER character VARCHAR","code":""},{"path":"/reference/rpad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function rpad — rpad","text":"","code":"if (FALSE) { # \\dontrun{ rpad('hello', 10, '<') } # }"},{"path":"/reference/set_bit.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function set_bit — set_bit","title":"DuckDB function set_bit — set_bit","text":"Sets nth bit bitstring newvalue; first (leftmost) bit indexed 0. Returns new bitstring.","code":""},{"path":"/reference/set_bit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function set_bit — set_bit","text":"bitstring BIT index INTEGER new_value INTEGER","code":""},{"path":"/reference/set_bit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function set_bit — set_bit","text":"","code":"if (FALSE) { # \\dontrun{ set_bit('0110010'::BIT, 2, 0) } # }"},{"path":"/reference/sin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sin — sin","title":"DuckDB function sin — sin","text":"Computes sin x.","code":""},{"path":"/reference/sin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sin — sin","text":"x DOUBLE","code":""},{"path":"/reference/sin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function sin — sin","text":"","code":"if (FALSE) { # \\dontrun{ sin(90) } # }"},{"path":"/reference/sinh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sinh — sinh","title":"DuckDB function sinh — sinh","text":"Computes hyperbolic sin x.","code":""},{"path":"/reference/sinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sinh — sinh","text":"x DOUBLE","code":""},{"path":"/reference/sinh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function sinh — sinh","text":"","code":"if (FALSE) { # \\dontrun{ sinh(1) } # }"},{"path":"/reference/split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function split — split","title":"DuckDB function split — split","text":"Splits string along separator.","code":""},{"path":"/reference/split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function split — split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"/reference/split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function split — split","text":"","code":"if (FALSE) { # \\dontrun{ string_split('hello-world', '-') } # }"},{"path":"/reference/sqrt.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sqrt — sqrt","title":"DuckDB function sqrt — sqrt","text":"Returns square root x.","code":""},{"path":"/reference/sqrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sqrt — sqrt","text":"x DOUBLE","code":""},{"path":"/reference/sqrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function sqrt — sqrt","text":"","code":"if (FALSE) { # \\dontrun{ sqrt(4) } # }"},{"path":"/reference/starts_with.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function starts_with — starts_with","title":"DuckDB function starts_with — starts_with","text":"Returns true string begins search_string.","code":""},{"path":"/reference/starts_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function starts_with — starts_with","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"/reference/starts_with.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function starts_with — starts_with","text":"","code":"if (FALSE) { # \\dontrun{ starts_with('abc','a') } # }"},{"path":"/reference/str_split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function str_split — str_split","title":"DuckDB function str_split — str_split","text":"Splits string along separator.","code":""},{"path":"/reference/str_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function str_split — str_split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"/reference/str_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function str_split — str_split","text":"","code":"if (FALSE) { # \\dontrun{ string_split('hello-world', '-') } # }"},{"path":"/reference/string_split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_split — string_split","title":"DuckDB function string_split — string_split","text":"Splits string along separator.","code":""},{"path":"/reference/string_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_split — string_split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"/reference/string_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function string_split — string_split","text":"","code":"if (FALSE) { # \\dontrun{ string_split('hello-world', '-') } # }"},{"path":"/reference/string_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_to_array — string_to_array","title":"DuckDB function string_to_array — string_to_array","text":"Splits string along separator.","code":""},{"path":"/reference/string_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_to_array — string_to_array","text":"string VARCHAR separator VARCHAR","code":""},{"path":"/reference/string_to_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function string_to_array — string_to_array","text":"","code":"if (FALSE) { # \\dontrun{ string_split('hello-world', '-') } # }"},{"path":"/reference/strip_accents.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strip_accents — strip_accents","title":"DuckDB function strip_accents — strip_accents","text":"Strips accents string.","code":""},{"path":"/reference/strip_accents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strip_accents — strip_accents","text":"string VARCHAR","code":""},{"path":"/reference/strip_accents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function strip_accents — strip_accents","text":"","code":"if (FALSE) { # \\dontrun{ strip_accents('mühleisen') } # }"},{"path":"/reference/strlen.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strlen — strlen","title":"DuckDB function strlen — strlen","text":"Number bytes string.","code":""},{"path":"/reference/strlen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strlen — strlen","text":"string VARCHAR","code":""},{"path":"/reference/strlen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function strlen — strlen","text":"","code":"if (FALSE) { # \\dontrun{ strlen('🦆') } # }"},{"path":"/reference/strpos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strpos — strpos","title":"DuckDB function strpos — strpos","text":"Returns location first occurrence needle haystack, counting 1. Returns 0 match found.","code":""},{"path":"/reference/strpos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strpos — strpos","text":"haystack VARCHAR needle VARCHAR","code":""},{"path":"/reference/strpos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function strpos — strpos","text":"","code":"if (FALSE) { # \\dontrun{ instr('test test','es') } # }"},{"path":"/reference/tan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function tan — tan","title":"DuckDB function tan — tan","text":"Computes tan x.","code":""},{"path":"/reference/tan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function tan — tan","text":"x DOUBLE","code":""},{"path":"/reference/tan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function tan — tan","text":"","code":"if (FALSE) { # \\dontrun{ tan(90) } # }"},{"path":"/reference/tanh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function tanh — tanh","title":"DuckDB function tanh — tanh","text":"Computes hyperbolic tan x.","code":""},{"path":"/reference/tanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function tanh — tanh","text":"x DOUBLE","code":""},{"path":"/reference/tanh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function tanh — tanh","text":"","code":"if (FALSE) { # \\dontrun{ tanh(1) } # }"},{"path":"/reference/timetz_byte_comparable.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"Converts TIME TIME ZONE integer sort key.","code":""},{"path":"/reference/timetz_byte_comparable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"time_tz TIME TIME ZONE","code":""},{"path":"/reference/timetz_byte_comparable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"","code":"if (FALSE) { # \\dontrun{ timetz_byte_comparable('18:18:16.21-07:00'::TIME_TZ) } # }"},{"path":"/reference/to_base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_base64 — to_base64","title":"DuckDB function to_base64 — to_base64","text":"Convert blob base64 encoded string.","code":""},{"path":"/reference/to_base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_base64 — to_base64","text":"blob BLOB","code":""},{"path":"/reference/to_base64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_base64 — to_base64","text":"","code":"if (FALSE) { # \\dontrun{ base64('A'::blob) } # }"},{"path":"/reference/to_centuries.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_centuries — to_centuries","title":"DuckDB function to_centuries — to_centuries","text":"Construct century interval.","code":""},{"path":"/reference/to_centuries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_centuries — to_centuries","text":"integer INTEGER","code":""},{"path":"/reference/to_centuries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_centuries — to_centuries","text":"","code":"if (FALSE) { # \\dontrun{ to_centuries(5) } # }"},{"path":"/reference/to_days.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_days — to_days","title":"DuckDB function to_days — to_days","text":"Construct day interval.","code":""},{"path":"/reference/to_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_days — to_days","text":"integer INTEGER","code":""},{"path":"/reference/to_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_days — to_days","text":"","code":"if (FALSE) { # \\dontrun{ to_days(5) } # }"},{"path":"/reference/to_decades.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_decades — to_decades","title":"DuckDB function to_decades — to_decades","text":"Construct decade interval.","code":""},{"path":"/reference/to_decades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_decades — to_decades","text":"integer INTEGER","code":""},{"path":"/reference/to_decades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_decades — to_decades","text":"","code":"if (FALSE) { # \\dontrun{ to_decades(5) } # }"},{"path":"/reference/to_hours.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_hours — to_hours","title":"DuckDB function to_hours — to_hours","text":"Construct hour interval.","code":""},{"path":"/reference/to_hours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_hours — to_hours","text":"integer BIGINT","code":""},{"path":"/reference/to_hours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_hours — to_hours","text":"","code":"if (FALSE) { # \\dontrun{ to_hours(5) } # }"},{"path":"/reference/to_microseconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_microseconds — to_microseconds","title":"DuckDB function to_microseconds — to_microseconds","text":"Construct microsecond interval.","code":""},{"path":"/reference/to_microseconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_microseconds — to_microseconds","text":"integer BIGINT","code":""},{"path":"/reference/to_microseconds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_microseconds — to_microseconds","text":"","code":"if (FALSE) { # \\dontrun{ to_microseconds(5) } # }"},{"path":"/reference/to_millennia.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_millennia — to_millennia","title":"DuckDB function to_millennia — to_millennia","text":"Construct millenium interval.","code":""},{"path":"/reference/to_millennia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_millennia — to_millennia","text":"integer INTEGER","code":""},{"path":"/reference/to_millennia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_millennia — to_millennia","text":"","code":"if (FALSE) { # \\dontrun{ to_millennia(1) } # }"},{"path":"/reference/to_milliseconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_milliseconds — to_milliseconds","title":"DuckDB function to_milliseconds — to_milliseconds","text":"Construct millisecond interval.","code":""},{"path":"/reference/to_milliseconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_milliseconds — to_milliseconds","text":"double DOUBLE","code":""},{"path":"/reference/to_milliseconds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_milliseconds — to_milliseconds","text":"","code":"if (FALSE) { # \\dontrun{ to_milliseconds(5.5) } # }"},{"path":"/reference/to_minutes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_minutes — to_minutes","title":"DuckDB function to_minutes — to_minutes","text":"Construct minute interval.","code":""},{"path":"/reference/to_minutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_minutes — to_minutes","text":"integer BIGINT","code":""},{"path":"/reference/to_minutes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_minutes — to_minutes","text":"","code":"if (FALSE) { # \\dontrun{ to_minutes(5) } # }"},{"path":"/reference/to_months.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_months — to_months","title":"DuckDB function to_months — to_months","text":"Construct month interval.","code":""},{"path":"/reference/to_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_months — to_months","text":"integer INTEGER","code":""},{"path":"/reference/to_months.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_months — to_months","text":"","code":"if (FALSE) { # \\dontrun{ to_months(5) } # }"},{"path":"/reference/to_quarters.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_quarters — to_quarters","title":"DuckDB function to_quarters — to_quarters","text":"Construct quarter interval.","code":""},{"path":"/reference/to_quarters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_quarters — to_quarters","text":"integer INTEGER","code":""},{"path":"/reference/to_quarters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_quarters — to_quarters","text":"","code":"if (FALSE) { # \\dontrun{ to_quarters(5) } # }"},{"path":"/reference/to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_seconds — to_seconds","title":"DuckDB function to_seconds — to_seconds","text":"Construct second interval.","code":""},{"path":"/reference/to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_seconds — to_seconds","text":"double DOUBLE","code":""},{"path":"/reference/to_seconds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_seconds — to_seconds","text":"","code":"if (FALSE) { # \\dontrun{ to_seconds(5.5) } # }"},{"path":"/reference/to_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_timestamp — to_timestamp","title":"DuckDB function to_timestamp — to_timestamp","text":"Converts secs since epoch timestamp time zone.","code":""},{"path":"/reference/to_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_timestamp — to_timestamp","text":"sec DOUBLE","code":""},{"path":"/reference/to_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_timestamp — to_timestamp","text":"","code":"if (FALSE) { # \\dontrun{ to_timestamp(1284352323.5) } # }"},{"path":"/reference/to_weeks.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_weeks — to_weeks","title":"DuckDB function to_weeks — to_weeks","text":"Construct week interval.","code":""},{"path":"/reference/to_weeks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_weeks — to_weeks","text":"integer INTEGER","code":""},{"path":"/reference/to_weeks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_weeks — to_weeks","text":"","code":"if (FALSE) { # \\dontrun{ to_weeks(5) } # }"},{"path":"/reference/to_years.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_years — to_years","title":"DuckDB function to_years — to_years","text":"Construct year interval.","code":""},{"path":"/reference/to_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_years — to_years","text":"integer INTEGER","code":""},{"path":"/reference/to_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function to_years — to_years","text":"","code":"if (FALSE) { # \\dontrun{ to_years(5) } # }"},{"path":"/reference/translate.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function translate — translate","title":"DuckDB function translate — translate","text":"Replaces character string matches character set corresponding character set. longer , occurrences extra characters deleted.","code":""},{"path":"/reference/translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function translate — translate","text":"string VARCHAR VARCHAR VARCHAR","code":""},{"path":"/reference/translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function translate — translate","text":"","code":"if (FALSE) { # \\dontrun{ translate('12345', '143', 'ax') } # }"},{"path":"/reference/typeof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function typeof — typeof","title":"DuckDB function typeof — typeof","text":"Returns name data type result expression.","code":""},{"path":"/reference/typeof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function typeof — typeof","text":"expression ","code":""},{"path":"/reference/typeof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function typeof — typeof","text":"","code":"if (FALSE) { # \\dontrun{ typeof('abc') } # }"},{"path":"/reference/ucase.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ucase — ucase","title":"DuckDB function ucase — ucase","text":"Convert string upper case.","code":""},{"path":"/reference/ucase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ucase — ucase","text":"string VARCHAR","code":""},{"path":"/reference/ucase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function ucase — ucase","text":"","code":"if (FALSE) { # \\dontrun{ upper('Hello') } # }"},{"path":"/reference/unbin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unbin — unbin","title":"DuckDB function unbin — unbin","text":"Converts value binary representation blob.","code":""},{"path":"/reference/unbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unbin — unbin","text":"value VARCHAR","code":""},{"path":"/reference/unbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function unbin — unbin","text":"","code":"if (FALSE) { # \\dontrun{ unbin('0110') } # }"},{"path":"/reference/unhex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unhex — unhex","title":"DuckDB function unhex — unhex","text":"Converts value hexadecimal representation blob.","code":""},{"path":"/reference/unhex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unhex — unhex","text":"value VARCHAR","code":""},{"path":"/reference/unhex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function unhex — unhex","text":"","code":"if (FALSE) { # \\dontrun{ unhex('2A') } # }"},{"path":"/reference/unicode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unicode — unicode","title":"DuckDB function unicode — unicode","text":"Returns unicode codepoint first character string.","code":""},{"path":"/reference/unicode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unicode — unicode","text":"str VARCHAR","code":""},{"path":"/reference/unicode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function unicode — unicode","text":"","code":"if (FALSE) { # \\dontrun{ unicode('ü') } # }"},{"path":"/reference/union_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function union_extract — union_extract","title":"DuckDB function union_extract — union_extract","text":"Extract value named tags union. NULL tag currently selected.","code":""},{"path":"/reference/union_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function union_extract — union_extract","text":"union UNION tag VARCHAR","code":""},{"path":"/reference/union_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function union_extract — union_extract","text":"","code":"if (FALSE) { # \\dontrun{ union_extract(s, 'k') } # }"},{"path":"/reference/union_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function union_tag — union_tag","title":"DuckDB function union_tag — union_tag","text":"Retrieve currently selected tag union ENUM.","code":""},{"path":"/reference/union_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function union_tag — union_tag","text":"union UNION","code":""},{"path":"/reference/union_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function union_tag — union_tag","text":"","code":"if (FALSE) { # \\dontrun{ union_tag(union_value(k := 'foo')) } # }"},{"path":"/reference/upper.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function upper — upper","title":"DuckDB function upper — upper","text":"Convert string upper case.","code":""},{"path":"/reference/upper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function upper — upper","text":"string VARCHAR","code":""},{"path":"/reference/upper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function upper — upper","text":"","code":"if (FALSE) { # \\dontrun{ upper('Hello') } # }"},{"path":"/reference/url_decode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function url_decode — url_decode","title":"DuckDB function url_decode — url_decode","text":"Unescapes URL encoded input.","code":""},{"path":"/reference/url_decode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function url_decode — url_decode","text":"input VARCHAR","code":""},{"path":"/reference/url_decode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function url_decode — url_decode","text":"","code":"if (FALSE) { # \\dontrun{ url_decode('this%20string%20is%2BFencoded') } # }"},{"path":"/reference/url_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function url_encode — url_encode","title":"DuckDB function url_encode — url_encode","text":"Escapes input string encoding can included URL query parameter.","code":""},{"path":"/reference/url_encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function url_encode — url_encode","text":"input VARCHAR","code":""},{"path":"/reference/url_encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function url_encode — url_encode","text":"","code":"if (FALSE) { # \\dontrun{ url_encode('this string has/ special+ characters>') } # }"},{"path":"/reference/vector_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function vector_type — vector_type","title":"DuckDB function vector_type — vector_type","text":"Returns VectorType given column.","code":""},{"path":"/reference/vector_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function vector_type — vector_type","text":"col ","code":""},{"path":"/reference/vector_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function vector_type — vector_type","text":"","code":"if (FALSE) { # \\dontrun{ vector_type(col) } # }"},{"path":"/reference/version.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function version — version","title":"DuckDB function version — version","text":"Returns currently active version DuckDB format: v0.3.2\t.","code":""},{"path":"/reference/version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB function version — version","text":"","code":"if (FALSE) { # \\dontrun{ version() } # }"}]
