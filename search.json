[{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"R package called dd provides documentation DuckDB functions makes available R’s help system. package generates R function stubs every DuckDB function enable help() documentation access preventing actual execution R.","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"core-development-workflow","dir":"","previous_headings":"Development Commands","what":"Core Development Workflow","title":"CLAUDE.md","text":"Connects DuckDB queries available functions Generates R documentation function stubs Updates R/duckdb-funs.R, R/zzz-dd.R, R/globals.R Runs devtools::document() update documentation Runs rcmdcheck::rcmdcheck() package validation","code":""},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"documentation-and-checks","dir":"","previous_headings":"Development Commands","what":"Documentation and Checks","title":"CLAUDE.md","text":"Document package: devtools::document() Check package: rcmdcheck::rcmdcheck(args = \"---manual\") Install locally: R CMD INSTALL .","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"code-generation-system","dir":"","previous_headings":"Architecture","what":"Code Generation System","title":"CLAUDE.md","text":"package uses sophisticated code generation system scripts/generate.R: Function Discovery: Queries DuckDB’s duckdb_functions() table get available functions Function signatures parameter types Return types SQL examples available Overload handling functions multiple signatures Stub Generation: Creates R function stubs throw informative errors called","code":""},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"key-generated-files","dir":"","previous_headings":"Architecture","what":"Key Generated Files","title":"CLAUDE.md","text":"R/duckdb-funs.R: Contains DuckDB function stubs full documentation (450KB+) R/zzz-dd.R: Creates dd list object containing functions R/globals.R: Handles global variable declarations R CMD check","code":""},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"file-structure","dir":"","previous_headings":"Architecture","what":"File Structure","title":"CLAUDE.md","text":"R/dd-package.R: Standard package documentation file scripts/generate.R: Main code generation script man/: Generated documentation files (600+ help files) .github/workflows/: Comprehensive CI/CD setup R CMD check","code":""},{"path":"https://cynkra.github.io/dd/CLAUDE.html","id":"important-notes","dir":"","previous_headings":"","what":"Important Notes","title":"CLAUDE.md","text":"main development workflow centers around scripts/generate.R - script run changes generation logic Generated files edited manually overwritten package includes extensive filtering logic problematic DuckDB functions break R documentation checks CI runs comprehensive checks across multiple R versions dependency configurations","code":""},{"path":"https://cynkra.github.io/dd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Kirill Müller Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cynkra.github.io/dd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kirill Müller. Author, maintainer. . Funder, copyright holder.","code":""},{"path":"https://cynkra.github.io/dd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Müller K (2025). dd: Functions Provided DuckDB. R package version 0.0.0.9000, https://github.com/krlmlr/dd.","code":"@Manual{,   title = {dd: Functions Provided by DuckDB},   author = {Kirill Müller},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/krlmlr/dd}, }"},{"path":"https://cynkra.github.io/dd/index.html","id":"dd","dir":"","previous_headings":"","what":"Functions Provided by DuckDB","title":"Functions Provided by DuckDB","text":"goal dd provide documentation DuckDB’s functions, later also easy way test . meant used conjunction duckplyr duckdb.","code":""},{"path":"https://cynkra.github.io/dd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions Provided by DuckDB","text":"can install development version dd like :","code":"pak::pak(\"cynkra/dd\")"},{"path":"https://cynkra.github.io/dd/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions Provided by DuckDB","text":"","code":"library(dd) dd$acos #> function(x = DOUBLE) { #>   stop(\"DuckDB function acos() is not available in R.\") #> } #> <bytecode: 0xdeadbeef> #> <environment: namespace:dd>  help(acos, package = \"dd\") DuckDB function acos  Description:       Computes the arccosine of x.  Arguments:         x: 'DOUBLE'  Examples:       ## Not run:       acos(0.5)      ## End(Not run)"},{"path":"https://cynkra.github.io/dd/reference/abs.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function abs — abs","title":"DuckDB function abs — abs","text":"Absolute value.","code":""},{"path":"https://cynkra.github.io/dd/reference/abs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function abs — abs","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/abs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function abs — abs","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/abs.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function abs — abs","text":"abs(x = TINYINT) abs(x = SMALLINT) abs(x = INTEGER) abs(x = BIGINT) abs(x = HUGEINT) abs(x = FLOAT) abs(x = DOUBLE) abs(x = DECIMAL) abs(x = UTINYINT) abs(x = USMALLINT) abs(x = UINTEGER) abs(x = UBIGINT) abs(x = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/abs.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function abs — abs","text":"","code":"abs(-17.4)"},{"path":"https://cynkra.github.io/dd/reference/acos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function acos — acos","title":"DuckDB function acos — acos","text":"Computes arccosine x.","code":""},{"path":"https://cynkra.github.io/dd/reference/acos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function acos — acos","text":"","code":"acos(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/acos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function acos — acos","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/acos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function acos — acos","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/acos.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function acos — acos","text":"","code":"acos(0.5)"},{"path":"https://cynkra.github.io/dd/reference/acosh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function acosh — acosh","title":"DuckDB function acosh — acosh","text":"Computes inverse hyperbolic cos x.","code":""},{"path":"https://cynkra.github.io/dd/reference/acosh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function acosh — acosh","text":"","code":"acosh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/acosh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function acosh — acosh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/acosh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function acosh — acosh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/acosh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function acosh — acosh","text":"","code":"acosh(2.3)"},{"path":"https://cynkra.github.io/dd/reference/add.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function add — add","title":"DuckDB function add — add","text":"DuckDB function add().","code":""},{"path":"https://cynkra.github.io/dd/reference/add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function add — add","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | BIGNUM col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | BIGNUM","code":""},{"path":"https://cynkra.github.io/dd/reference/add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function add — add","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | DATE | INTERVAL | TIMESTAMP | TIME | TIME TIME ZONE | TIMESTAMP TIME ZONE | [] | BIGNUM","code":""},{"path":"https://cynkra.github.io/dd/reference/add.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function add — add","text":"add(col0 = TINYINT) add(col0 = TINYINT, col1 = TINYINT) add(col0 = SMALLINT) add(col0 = SMALLINT, col1 = SMALLINT) add(col0 = INTEGER) add(col0 = INTEGER, col1 = INTEGER) add(col0 = BIGINT) add(col0 = BIGINT, col1 = BIGINT) add(col0 = HUGEINT) add(col0 = HUGEINT, col1 = HUGEINT) add(col0 = FLOAT) add(col0 = FLOAT, col1 = FLOAT) add(col0 = DOUBLE) add(col0 = DOUBLE, col1 = DOUBLE) add(col0 = DECIMAL) add(col0 = DECIMAL, col1 = DECIMAL) add(col0 = UTINYINT) add(col0 = UTINYINT, col1 = UTINYINT) add(col0 = USMALLINT) add(col0 = USMALLINT, col1 = USMALLINT) add(col0 = UINTEGER) add(col0 = UINTEGER, col1 = UINTEGER) add(col0 = UBIGINT) add(col0 = UBIGINT, col1 = UBIGINT) add(col0 = UHUGEINT) add(col0 = UHUGEINT, col1 = UHUGEINT) add(col0 = DATE, col1 = INTEGER) add(col0 = INTEGER, col1 = DATE) add(col0 = INTERVAL, col1 = INTERVAL) add(col0 = DATE, col1 = INTERVAL) add(col0 = INTERVAL, col1 = DATE) add(col0 = TIME, col1 = INTERVAL) add(col0 = INTERVAL, col1 = TIME) add(col0 = TIMESTAMP, col1 = INTERVAL) add(col0 = INTERVAL, col1 = TIMESTAMP) add(col0 = `TIME TIME ZONE`, col1 = INTERVAL) add(col0 = INTERVAL, col1 = `TIME TIME ZONE`) add(col0 = TIME, col1 = DATE) add(col0 = DATE, col1 = TIME) add(col0 = `TIME TIME ZONE`, col1 = DATE) add(col0 = DATE, col1 = `TIME TIME ZONE`) add() add(col0 = BIGNUM, col1 = BIGNUM)","code":""},{"path":"https://cynkra.github.io/dd/reference/add_parquet_key.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function add_parquet_key — add_parquet_key","title":"DuckDB function add_parquet_key — add_parquet_key","text":"DuckDB function add_parquet_key().","code":""},{"path":"https://cynkra.github.io/dd/reference/add_parquet_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function add_parquet_key — add_parquet_key","text":"","code":"add_parquet_key(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/add_parquet_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function add_parquet_key — add_parquet_key","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/add_parquet_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function add_parquet_key — add_parquet_key","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/age.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function age — age","title":"DuckDB function age — age","text":"Subtract arguments, resulting time difference two timestamps.","code":""},{"path":"https://cynkra.github.io/dd/reference/age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function age — age","text":"timestamp TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function age — age","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/age.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function age — age","text":"age(timestamp = TIMESTAMP) age(timestamp = TIMESTAMP, timestamp = TIMESTAMP) age(timestamp = `TIMESTAMP TIME ZONE`) age(timestamp = `TIMESTAMP TIME ZONE`, timestamp = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/age.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function age — age","text":"","code":"age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')"},{"path":"https://cynkra.github.io/dd/reference/aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function aggregate — aggregate","title":"DuckDB function aggregate — aggregate","text":"Executes aggregate function function_name elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function aggregate — aggregate","text":"","code":"aggregate(list = `ANY[]`, function_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function aggregate — aggregate","text":"list [] function_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/aggregate.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function aggregate — aggregate","text":"","code":"aggregate([1, 2, NULL], 'min')"},{"path":"https://cynkra.github.io/dd/reference/alias.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function alias — alias","title":"DuckDB function alias — alias","text":"Returns name given expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function alias — alias","text":"","code":"alias(expr = ANY)"},{"path":"https://cynkra.github.io/dd/reference/alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function alias — alias","text":"expr ","code":""},{"path":"https://cynkra.github.io/dd/reference/alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function alias — alias","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/alias.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function alias — alias","text":"","code":"alias(42 + 1)"},{"path":"https://cynkra.github.io/dd/reference/all_profiling_output.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function all_profiling_output — all_profiling_output","title":"DuckDB function all_profiling_output — all_profiling_output","text":"DuckDB function all_profiling_output().","code":""},{"path":"https://cynkra.github.io/dd/reference/all_profiling_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function all_profiling_output — all_profiling_output","text":"","code":"all_profiling_output()"},{"path":"https://cynkra.github.io/dd/reference/all_profiling_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function all_profiling_output — all_profiling_output","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/and-and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function && — &&","title":"DuckDB function && — &&","text":"Returns true lists element common. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/and-and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function && — &&","text":"","code":"`T[]` && `T[]`"},{"path":"https://cynkra.github.io/dd/reference/and-and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function && — &&","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/and-and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function && — &&","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/and-and.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function && — &&","text":"","code":"list_has_any([1, 2, 3], [2, 3, 4])"},{"path":"https://cynkra.github.io/dd/reference/and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function & — &","title":"DuckDB function & — &","text":"Bitwise .","code":""},{"path":"https://cynkra.github.io/dd/reference/and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function & — &","text":"left TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT right TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function & — &","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/and.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function & — &","text":"`&`(left = TINYINT, right = TINYINT) `&`(left = SMALLINT, right = SMALLINT) `&`(left = INTEGER, right = INTEGER) `&`(left = BIGINT, right = BIGINT) `&`(left = HUGEINT, right = HUGEINT) `&`(left = UTINYINT, right = UTINYINT) `&`(left = USMALLINT, right = USMALLINT) `&`(left = UINTEGER, right = UINTEGER) `&`(left = UBIGINT, right = UBIGINT) `&`(left = UHUGEINT, right = UHUGEINT) `&`(left = BIT, right = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/and.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function & — &","text":"","code":"91 & 15"},{"path":"https://cynkra.github.io/dd/reference/any_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function any_value — any_value","title":"DuckDB function any_value — any_value","text":"Returns first non-NULL value arg. function affected ordering.","code":""},{"path":"https://cynkra.github.io/dd/reference/any_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function any_value — any_value","text":"arg DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/any_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function any_value — any_value","text":"DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/any_value.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function any_value — any_value","text":"any_value(arg = DECIMAL) any_value(arg = )","code":""},{"path":"https://cynkra.github.io/dd/reference/apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function apply — apply","title":"DuckDB function apply — apply","text":"Returns list result applying lambda function element input list. return type defined return type lambda function.","code":""},{"path":"https://cynkra.github.io/dd/reference/apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function apply — apply","text":"","code":"apply(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function apply — apply","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function apply — apply","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/apply.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function apply — apply","text":"","code":"apply([1, 2, 3], lambda x : x + 1)"},{"path":"https://cynkra.github.io/dd/reference/approx_count_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function approx_count_distinct — approx_count_distinct","title":"DuckDB function approx_count_distinct — approx_count_distinct","text":"Computes approximate count distinct elements using HyperLogLog.","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_count_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function approx_count_distinct — approx_count_distinct","text":"","code":"approx_count_distinct(any = ANY)"},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/approx_count_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function approx_count_distinct — approx_count_distinct","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_count_distinct.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function approx_count_distinct — approx_count_distinct","text":"","code":"approx_count_distinct(A)"},{"path":"https://cynkra.github.io/dd/reference/approx_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function approx_quantile — approx_quantile","title":"DuckDB function approx_quantile — approx_quantile","text":"Computes approximate quantile using T-Digest.","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function approx_quantile — approx_quantile","text":"x DECIMAL | SMALLINT | INTEGER | BIGINT | HUGEINT | DOUBLE | DATE | TIME | TIME TIME ZONE | TIMESTAMP | TIMESTAMP TIME ZONE | TINYINT | FLOAT pos FLOAT | FLOAT[]","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function approx_quantile — approx_quantile","text":"DECIMAL | SMALLINT | INTEGER | BIGINT | HUGEINT | DOUBLE | DATE | TIME | TIME TIME ZONE | TIMESTAMP | TIMESTAMP TIME ZONE | DECIMAL[] | TINYINT[] | SMALLINT[] | INTEGER[] | BIGINT[] | HUGEINT[] | FLOAT[] | DOUBLE[] | DATE[] | TIME[] | TIME TIME ZONE[] | TIMESTAMP[] | TIMESTAMP TIME ZONE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_quantile.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function approx_quantile — approx_quantile","text":"approx_quantile(x = DECIMAL, pos = FLOAT) approx_quantile(x = SMALLINT, pos = FLOAT) approx_quantile(x = INTEGER, pos = FLOAT) approx_quantile(x = BIGINT, pos = FLOAT) approx_quantile(x = HUGEINT, pos = FLOAT) approx_quantile(x = DOUBLE, pos = FLOAT) approx_quantile(x = DATE, pos = FLOAT) approx_quantile(x = TIME, pos = FLOAT) approx_quantile(x = `TIME TIME ZONE`, pos = FLOAT) approx_quantile(x = TIMESTAMP, pos = FLOAT) approx_quantile(x = `TIMESTAMP TIME ZONE`, pos = FLOAT) approx_quantile(x = DECIMAL, pos = `FLOAT[]`) approx_quantile(x = TINYINT, pos = `FLOAT[]`) approx_quantile(x = SMALLINT, pos = `FLOAT[]`) approx_quantile(x = INTEGER, pos = `FLOAT[]`) approx_quantile(x = BIGINT, pos = `FLOAT[]`) approx_quantile(x = HUGEINT, pos = `FLOAT[]`) approx_quantile(x = FLOAT, pos = `FLOAT[]`) approx_quantile(x = DOUBLE, pos = `FLOAT[]`) approx_quantile(x = DATE, pos = `FLOAT[]`) approx_quantile(x = TIME, pos = `FLOAT[]`) approx_quantile(x = `TIME TIME ZONE`, pos = `FLOAT[]`) approx_quantile(x = TIMESTAMP, pos = `FLOAT[]`) approx_quantile(x = `TIMESTAMP TIME ZONE`, pos = `FLOAT[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_quantile.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function approx_quantile — approx_quantile","text":"","code":"approx_quantile(x, 0.5)"},{"path":"https://cynkra.github.io/dd/reference/approx_top_k.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function approx_top_k — approx_top_k","title":"DuckDB function approx_top_k — approx_top_k","text":"Finds k approximately occurring values data set.","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_top_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function approx_top_k — approx_top_k","text":"","code":"approx_top_k(val = ANY, k = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/approx_top_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function approx_top_k — approx_top_k","text":"val k BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_top_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function approx_top_k — approx_top_k","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/approx_top_k.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function approx_top_k — approx_top_k","text":"","code":"approx_top_k(x, 5)"},{"path":"https://cynkra.github.io/dd/reference/arbitrary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arbitrary — arbitrary","title":"DuckDB function arbitrary — arbitrary","text":"Returns first value (NULL non-NULL) arg. function affected ordering.","code":""},{"path":"https://cynkra.github.io/dd/reference/arbitrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arbitrary — arbitrary","text":"arg DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arbitrary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arbitrary — arbitrary","text":"DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arbitrary.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function arbitrary — arbitrary","text":"arbitrary(arg = DECIMAL) arbitrary(arg = )","code":""},{"path":"https://cynkra.github.io/dd/reference/arbitrary.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function arbitrary — arbitrary","text":"","code":"arbitrary(A)"},{"path":"https://cynkra.github.io/dd/reference/arg_max.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arg_max — arg_max","title":"DuckDB function arg_max — arg_max","text":"Finds row maximum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arg_max — arg_max","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arg_max — arg_max","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function arg_max — arg_max","text":"arg_max(arg = INTEGER, val = INTEGER) arg_max(arg = INTEGER, val = BIGINT) arg_max(arg = INTEGER, val = HUGEINT) arg_max(arg = INTEGER, val = DOUBLE) arg_max(arg = INTEGER, val = VARCHAR) arg_max(arg = INTEGER, val = DATE) arg_max(arg = INTEGER, val = TIMESTAMP) arg_max(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) arg_max(arg = INTEGER, val = BLOB) arg_max(arg = BIGINT, val = INTEGER) arg_max(arg = BIGINT, val = BIGINT) arg_max(arg = BIGINT, val = HUGEINT) arg_max(arg = BIGINT, val = DOUBLE) arg_max(arg = BIGINT, val = VARCHAR) arg_max(arg = BIGINT, val = DATE) arg_max(arg = BIGINT, val = TIMESTAMP) arg_max(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) arg_max(arg = BIGINT, val = BLOB) arg_max(arg = DOUBLE, val = INTEGER) arg_max(arg = DOUBLE, val = BIGINT) arg_max(arg = DOUBLE, val = HUGEINT) arg_max(arg = DOUBLE, val = DOUBLE) arg_max(arg = DOUBLE, val = VARCHAR) arg_max(arg = DOUBLE, val = DATE) arg_max(arg = DOUBLE, val = TIMESTAMP) arg_max(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) arg_max(arg = DOUBLE, val = BLOB) arg_max(arg = VARCHAR, val = INTEGER) arg_max(arg = VARCHAR, val = BIGINT) arg_max(arg = VARCHAR, val = HUGEINT) arg_max(arg = VARCHAR, val = DOUBLE) arg_max(arg = VARCHAR, val = VARCHAR) arg_max(arg = VARCHAR, val = DATE) arg_max(arg = VARCHAR, val = TIMESTAMP) arg_max(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) arg_max(arg = VARCHAR, val = BLOB) arg_max(arg = DATE, val = INTEGER) arg_max(arg = DATE, val = BIGINT) arg_max(arg = DATE, val = HUGEINT) arg_max(arg = DATE, val = DOUBLE) arg_max(arg = DATE, val = VARCHAR) arg_max(arg = DATE, val = DATE) arg_max(arg = DATE, val = TIMESTAMP) arg_max(arg = DATE, val = `TIMESTAMP TIME ZONE`) arg_max(arg = DATE, val = BLOB) arg_max(arg = TIMESTAMP, val = INTEGER) arg_max(arg = TIMESTAMP, val = BIGINT) arg_max(arg = TIMESTAMP, val = HUGEINT) arg_max(arg = TIMESTAMP, val = DOUBLE) arg_max(arg = TIMESTAMP, val = VARCHAR) arg_max(arg = TIMESTAMP, val = DATE) arg_max(arg = TIMESTAMP, val = TIMESTAMP) arg_max(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) arg_max(arg = TIMESTAMP, val = BLOB) arg_max(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) arg_max(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) arg_max(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) arg_max(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) arg_max(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) arg_max(arg = `TIMESTAMP TIME ZONE`, val = DATE) arg_max(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) arg_max(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) arg_max(arg = `TIMESTAMP TIME ZONE`, val = BLOB) arg_max(arg = BLOB, val = INTEGER) arg_max(arg = BLOB, val = BIGINT) arg_max(arg = BLOB, val = HUGEINT) arg_max(arg = BLOB, val = DOUBLE) arg_max(arg = BLOB, val = VARCHAR) arg_max(arg = BLOB, val = DATE) arg_max(arg = BLOB, val = TIMESTAMP) arg_max(arg = BLOB, val = `TIMESTAMP TIME ZONE`) arg_max(arg = BLOB, val = BLOB) arg_max(arg = DECIMAL, val = INTEGER) arg_max(arg = DECIMAL, val = BIGINT) arg_max(arg = DECIMAL, val = HUGEINT) arg_max(arg = DECIMAL, val = DOUBLE) arg_max(arg = DECIMAL, val = VARCHAR) arg_max(arg = DECIMAL, val = DATE) arg_max(arg = DECIMAL, val = TIMESTAMP) arg_max(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) arg_max(arg = DECIMAL, val = BLOB) arg_max(arg = , val = INTEGER) arg_max(arg = , val = BIGINT) arg_max(arg = , val = HUGEINT) arg_max(arg = , val = DOUBLE) arg_max(arg = , val = VARCHAR) arg_max(arg = , val = DATE) arg_max(arg = , val = TIMESTAMP) arg_max(arg = , val = `TIMESTAMP TIME ZONE`) arg_max(arg = , val = BLOB) arg_max(arg = , val = ) arg_max(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function arg_max — arg_max","text":"","code":"arg_max(A, B)"},{"path":"https://cynkra.github.io/dd/reference/arg_max_null.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arg_max_null — arg_max_null","title":"DuckDB function arg_max_null — arg_max_null","text":"Finds row maximum val. Calculates arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arg_max_null — arg_max_null","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arg_max_null — arg_max_null","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max_null.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function arg_max_null — arg_max_null","text":"arg_max_null(arg = INTEGER, val = INTEGER) arg_max_null(arg = INTEGER, val = BIGINT) arg_max_null(arg = INTEGER, val = HUGEINT) arg_max_null(arg = INTEGER, val = DOUBLE) arg_max_null(arg = INTEGER, val = VARCHAR) arg_max_null(arg = INTEGER, val = DATE) arg_max_null(arg = INTEGER, val = TIMESTAMP) arg_max_null(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = INTEGER, val = BLOB) arg_max_null(arg = BIGINT, val = INTEGER) arg_max_null(arg = BIGINT, val = BIGINT) arg_max_null(arg = BIGINT, val = HUGEINT) arg_max_null(arg = BIGINT, val = DOUBLE) arg_max_null(arg = BIGINT, val = VARCHAR) arg_max_null(arg = BIGINT, val = DATE) arg_max_null(arg = BIGINT, val = TIMESTAMP) arg_max_null(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = BIGINT, val = BLOB) arg_max_null(arg = DOUBLE, val = INTEGER) arg_max_null(arg = DOUBLE, val = BIGINT) arg_max_null(arg = DOUBLE, val = HUGEINT) arg_max_null(arg = DOUBLE, val = DOUBLE) arg_max_null(arg = DOUBLE, val = VARCHAR) arg_max_null(arg = DOUBLE, val = DATE) arg_max_null(arg = DOUBLE, val = TIMESTAMP) arg_max_null(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = DOUBLE, val = BLOB) arg_max_null(arg = VARCHAR, val = INTEGER) arg_max_null(arg = VARCHAR, val = BIGINT) arg_max_null(arg = VARCHAR, val = HUGEINT) arg_max_null(arg = VARCHAR, val = DOUBLE) arg_max_null(arg = VARCHAR, val = VARCHAR) arg_max_null(arg = VARCHAR, val = DATE) arg_max_null(arg = VARCHAR, val = TIMESTAMP) arg_max_null(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = VARCHAR, val = BLOB) arg_max_null(arg = DATE, val = INTEGER) arg_max_null(arg = DATE, val = BIGINT) arg_max_null(arg = DATE, val = HUGEINT) arg_max_null(arg = DATE, val = DOUBLE) arg_max_null(arg = DATE, val = VARCHAR) arg_max_null(arg = DATE, val = DATE) arg_max_null(arg = DATE, val = TIMESTAMP) arg_max_null(arg = DATE, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = DATE, val = BLOB) arg_max_null(arg = TIMESTAMP, val = INTEGER) arg_max_null(arg = TIMESTAMP, val = BIGINT) arg_max_null(arg = TIMESTAMP, val = HUGEINT) arg_max_null(arg = TIMESTAMP, val = DOUBLE) arg_max_null(arg = TIMESTAMP, val = VARCHAR) arg_max_null(arg = TIMESTAMP, val = DATE) arg_max_null(arg = TIMESTAMP, val = TIMESTAMP) arg_max_null(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = TIMESTAMP, val = BLOB) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = DATE) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = `TIMESTAMP TIME ZONE`, val = BLOB) arg_max_null(arg = BLOB, val = INTEGER) arg_max_null(arg = BLOB, val = BIGINT) arg_max_null(arg = BLOB, val = HUGEINT) arg_max_null(arg = BLOB, val = DOUBLE) arg_max_null(arg = BLOB, val = VARCHAR) arg_max_null(arg = BLOB, val = DATE) arg_max_null(arg = BLOB, val = TIMESTAMP) arg_max_null(arg = BLOB, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = BLOB, val = BLOB) arg_max_null(arg = DECIMAL, val = INTEGER) arg_max_null(arg = DECIMAL, val = BIGINT) arg_max_null(arg = DECIMAL, val = HUGEINT) arg_max_null(arg = DECIMAL, val = DOUBLE) arg_max_null(arg = DECIMAL, val = VARCHAR) arg_max_null(arg = DECIMAL, val = DATE) arg_max_null(arg = DECIMAL, val = TIMESTAMP) arg_max_null(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = DECIMAL, val = BLOB) arg_max_null(arg = , val = INTEGER) arg_max_null(arg = , val = BIGINT) arg_max_null(arg = , val = HUGEINT) arg_max_null(arg = , val = DOUBLE) arg_max_null(arg = , val = VARCHAR) arg_max_null(arg = , val = DATE) arg_max_null(arg = , val = TIMESTAMP) arg_max_null(arg = , val = `TIMESTAMP TIME ZONE`) arg_max_null(arg = , val = BLOB) arg_max_null(arg = , val = )","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_max_null.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function arg_max_null — arg_max_null","text":"","code":"arg_max_null(A, B)"},{"path":"https://cynkra.github.io/dd/reference/arg_min.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arg_min — arg_min","title":"DuckDB function arg_min — arg_min","text":"Finds row minimum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arg_min — arg_min","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arg_min — arg_min","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function arg_min — arg_min","text":"arg_min(arg = INTEGER, val = INTEGER) arg_min(arg = INTEGER, val = BIGINT) arg_min(arg = INTEGER, val = HUGEINT) arg_min(arg = INTEGER, val = DOUBLE) arg_min(arg = INTEGER, val = VARCHAR) arg_min(arg = INTEGER, val = DATE) arg_min(arg = INTEGER, val = TIMESTAMP) arg_min(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) arg_min(arg = INTEGER, val = BLOB) arg_min(arg = BIGINT, val = INTEGER) arg_min(arg = BIGINT, val = BIGINT) arg_min(arg = BIGINT, val = HUGEINT) arg_min(arg = BIGINT, val = DOUBLE) arg_min(arg = BIGINT, val = VARCHAR) arg_min(arg = BIGINT, val = DATE) arg_min(arg = BIGINT, val = TIMESTAMP) arg_min(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) arg_min(arg = BIGINT, val = BLOB) arg_min(arg = DOUBLE, val = INTEGER) arg_min(arg = DOUBLE, val = BIGINT) arg_min(arg = DOUBLE, val = HUGEINT) arg_min(arg = DOUBLE, val = DOUBLE) arg_min(arg = DOUBLE, val = VARCHAR) arg_min(arg = DOUBLE, val = DATE) arg_min(arg = DOUBLE, val = TIMESTAMP) arg_min(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) arg_min(arg = DOUBLE, val = BLOB) arg_min(arg = VARCHAR, val = INTEGER) arg_min(arg = VARCHAR, val = BIGINT) arg_min(arg = VARCHAR, val = HUGEINT) arg_min(arg = VARCHAR, val = DOUBLE) arg_min(arg = VARCHAR, val = VARCHAR) arg_min(arg = VARCHAR, val = DATE) arg_min(arg = VARCHAR, val = TIMESTAMP) arg_min(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) arg_min(arg = VARCHAR, val = BLOB) arg_min(arg = DATE, val = INTEGER) arg_min(arg = DATE, val = BIGINT) arg_min(arg = DATE, val = HUGEINT) arg_min(arg = DATE, val = DOUBLE) arg_min(arg = DATE, val = VARCHAR) arg_min(arg = DATE, val = DATE) arg_min(arg = DATE, val = TIMESTAMP) arg_min(arg = DATE, val = `TIMESTAMP TIME ZONE`) arg_min(arg = DATE, val = BLOB) arg_min(arg = TIMESTAMP, val = INTEGER) arg_min(arg = TIMESTAMP, val = BIGINT) arg_min(arg = TIMESTAMP, val = HUGEINT) arg_min(arg = TIMESTAMP, val = DOUBLE) arg_min(arg = TIMESTAMP, val = VARCHAR) arg_min(arg = TIMESTAMP, val = DATE) arg_min(arg = TIMESTAMP, val = TIMESTAMP) arg_min(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) arg_min(arg = TIMESTAMP, val = BLOB) arg_min(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) arg_min(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) arg_min(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) arg_min(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) arg_min(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) arg_min(arg = `TIMESTAMP TIME ZONE`, val = DATE) arg_min(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) arg_min(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) arg_min(arg = `TIMESTAMP TIME ZONE`, val = BLOB) arg_min(arg = BLOB, val = INTEGER) arg_min(arg = BLOB, val = BIGINT) arg_min(arg = BLOB, val = HUGEINT) arg_min(arg = BLOB, val = DOUBLE) arg_min(arg = BLOB, val = VARCHAR) arg_min(arg = BLOB, val = DATE) arg_min(arg = BLOB, val = TIMESTAMP) arg_min(arg = BLOB, val = `TIMESTAMP TIME ZONE`) arg_min(arg = BLOB, val = BLOB) arg_min(arg = DECIMAL, val = INTEGER) arg_min(arg = DECIMAL, val = BIGINT) arg_min(arg = DECIMAL, val = HUGEINT) arg_min(arg = DECIMAL, val = DOUBLE) arg_min(arg = DECIMAL, val = VARCHAR) arg_min(arg = DECIMAL, val = DATE) arg_min(arg = DECIMAL, val = TIMESTAMP) arg_min(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) arg_min(arg = DECIMAL, val = BLOB) arg_min(arg = , val = INTEGER) arg_min(arg = , val = BIGINT) arg_min(arg = , val = HUGEINT) arg_min(arg = , val = DOUBLE) arg_min(arg = , val = VARCHAR) arg_min(arg = , val = DATE) arg_min(arg = , val = TIMESTAMP) arg_min(arg = , val = `TIMESTAMP TIME ZONE`) arg_min(arg = , val = BLOB) arg_min(arg = , val = ) arg_min(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function arg_min — arg_min","text":"","code":"arg_min(A, B)"},{"path":"https://cynkra.github.io/dd/reference/arg_min_null.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arg_min_null — arg_min_null","title":"DuckDB function arg_min_null — arg_min_null","text":"Finds row minimum val. Calculates arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arg_min_null — arg_min_null","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arg_min_null — arg_min_null","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min_null.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function arg_min_null — arg_min_null","text":"arg_min_null(arg = INTEGER, val = INTEGER) arg_min_null(arg = INTEGER, val = BIGINT) arg_min_null(arg = INTEGER, val = HUGEINT) arg_min_null(arg = INTEGER, val = DOUBLE) arg_min_null(arg = INTEGER, val = VARCHAR) arg_min_null(arg = INTEGER, val = DATE) arg_min_null(arg = INTEGER, val = TIMESTAMP) arg_min_null(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = INTEGER, val = BLOB) arg_min_null(arg = BIGINT, val = INTEGER) arg_min_null(arg = BIGINT, val = BIGINT) arg_min_null(arg = BIGINT, val = HUGEINT) arg_min_null(arg = BIGINT, val = DOUBLE) arg_min_null(arg = BIGINT, val = VARCHAR) arg_min_null(arg = BIGINT, val = DATE) arg_min_null(arg = BIGINT, val = TIMESTAMP) arg_min_null(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = BIGINT, val = BLOB) arg_min_null(arg = DOUBLE, val = INTEGER) arg_min_null(arg = DOUBLE, val = BIGINT) arg_min_null(arg = DOUBLE, val = HUGEINT) arg_min_null(arg = DOUBLE, val = DOUBLE) arg_min_null(arg = DOUBLE, val = VARCHAR) arg_min_null(arg = DOUBLE, val = DATE) arg_min_null(arg = DOUBLE, val = TIMESTAMP) arg_min_null(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = DOUBLE, val = BLOB) arg_min_null(arg = VARCHAR, val = INTEGER) arg_min_null(arg = VARCHAR, val = BIGINT) arg_min_null(arg = VARCHAR, val = HUGEINT) arg_min_null(arg = VARCHAR, val = DOUBLE) arg_min_null(arg = VARCHAR, val = VARCHAR) arg_min_null(arg = VARCHAR, val = DATE) arg_min_null(arg = VARCHAR, val = TIMESTAMP) arg_min_null(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = VARCHAR, val = BLOB) arg_min_null(arg = DATE, val = INTEGER) arg_min_null(arg = DATE, val = BIGINT) arg_min_null(arg = DATE, val = HUGEINT) arg_min_null(arg = DATE, val = DOUBLE) arg_min_null(arg = DATE, val = VARCHAR) arg_min_null(arg = DATE, val = DATE) arg_min_null(arg = DATE, val = TIMESTAMP) arg_min_null(arg = DATE, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = DATE, val = BLOB) arg_min_null(arg = TIMESTAMP, val = INTEGER) arg_min_null(arg = TIMESTAMP, val = BIGINT) arg_min_null(arg = TIMESTAMP, val = HUGEINT) arg_min_null(arg = TIMESTAMP, val = DOUBLE) arg_min_null(arg = TIMESTAMP, val = VARCHAR) arg_min_null(arg = TIMESTAMP, val = DATE) arg_min_null(arg = TIMESTAMP, val = TIMESTAMP) arg_min_null(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = TIMESTAMP, val = BLOB) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = DATE) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = `TIMESTAMP TIME ZONE`, val = BLOB) arg_min_null(arg = BLOB, val = INTEGER) arg_min_null(arg = BLOB, val = BIGINT) arg_min_null(arg = BLOB, val = HUGEINT) arg_min_null(arg = BLOB, val = DOUBLE) arg_min_null(arg = BLOB, val = VARCHAR) arg_min_null(arg = BLOB, val = DATE) arg_min_null(arg = BLOB, val = TIMESTAMP) arg_min_null(arg = BLOB, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = BLOB, val = BLOB) arg_min_null(arg = DECIMAL, val = INTEGER) arg_min_null(arg = DECIMAL, val = BIGINT) arg_min_null(arg = DECIMAL, val = HUGEINT) arg_min_null(arg = DECIMAL, val = DOUBLE) arg_min_null(arg = DECIMAL, val = VARCHAR) arg_min_null(arg = DECIMAL, val = DATE) arg_min_null(arg = DECIMAL, val = TIMESTAMP) arg_min_null(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = DECIMAL, val = BLOB) arg_min_null(arg = , val = INTEGER) arg_min_null(arg = , val = BIGINT) arg_min_null(arg = , val = HUGEINT) arg_min_null(arg = , val = DOUBLE) arg_min_null(arg = , val = VARCHAR) arg_min_null(arg = , val = DATE) arg_min_null(arg = , val = TIMESTAMP) arg_min_null(arg = , val = `TIMESTAMP TIME ZONE`) arg_min_null(arg = , val = BLOB) arg_min_null(arg = , val = )","code":""},{"path":"https://cynkra.github.io/dd/reference/arg_min_null.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function arg_min_null — arg_min_null","text":"","code":"arg_min_null(A, B)"},{"path":"https://cynkra.github.io/dd/reference/argmax.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function argmax — argmax","title":"DuckDB function argmax — argmax","text":"Finds row maximum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/argmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function argmax — argmax","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/argmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function argmax — argmax","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/argmax.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function argmax — argmax","text":"argmax(arg = INTEGER, val = INTEGER) argmax(arg = INTEGER, val = BIGINT) argmax(arg = INTEGER, val = HUGEINT) argmax(arg = INTEGER, val = DOUBLE) argmax(arg = INTEGER, val = VARCHAR) argmax(arg = INTEGER, val = DATE) argmax(arg = INTEGER, val = TIMESTAMP) argmax(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) argmax(arg = INTEGER, val = BLOB) argmax(arg = BIGINT, val = INTEGER) argmax(arg = BIGINT, val = BIGINT) argmax(arg = BIGINT, val = HUGEINT) argmax(arg = BIGINT, val = DOUBLE) argmax(arg = BIGINT, val = VARCHAR) argmax(arg = BIGINT, val = DATE) argmax(arg = BIGINT, val = TIMESTAMP) argmax(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) argmax(arg = BIGINT, val = BLOB) argmax(arg = DOUBLE, val = INTEGER) argmax(arg = DOUBLE, val = BIGINT) argmax(arg = DOUBLE, val = HUGEINT) argmax(arg = DOUBLE, val = DOUBLE) argmax(arg = DOUBLE, val = VARCHAR) argmax(arg = DOUBLE, val = DATE) argmax(arg = DOUBLE, val = TIMESTAMP) argmax(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) argmax(arg = DOUBLE, val = BLOB) argmax(arg = VARCHAR, val = INTEGER) argmax(arg = VARCHAR, val = BIGINT) argmax(arg = VARCHAR, val = HUGEINT) argmax(arg = VARCHAR, val = DOUBLE) argmax(arg = VARCHAR, val = VARCHAR) argmax(arg = VARCHAR, val = DATE) argmax(arg = VARCHAR, val = TIMESTAMP) argmax(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) argmax(arg = VARCHAR, val = BLOB) argmax(arg = DATE, val = INTEGER) argmax(arg = DATE, val = BIGINT) argmax(arg = DATE, val = HUGEINT) argmax(arg = DATE, val = DOUBLE) argmax(arg = DATE, val = VARCHAR) argmax(arg = DATE, val = DATE) argmax(arg = DATE, val = TIMESTAMP) argmax(arg = DATE, val = `TIMESTAMP TIME ZONE`) argmax(arg = DATE, val = BLOB) argmax(arg = TIMESTAMP, val = INTEGER) argmax(arg = TIMESTAMP, val = BIGINT) argmax(arg = TIMESTAMP, val = HUGEINT) argmax(arg = TIMESTAMP, val = DOUBLE) argmax(arg = TIMESTAMP, val = VARCHAR) argmax(arg = TIMESTAMP, val = DATE) argmax(arg = TIMESTAMP, val = TIMESTAMP) argmax(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) argmax(arg = TIMESTAMP, val = BLOB) argmax(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) argmax(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) argmax(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) argmax(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) argmax(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) argmax(arg = `TIMESTAMP TIME ZONE`, val = DATE) argmax(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) argmax(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) argmax(arg = `TIMESTAMP TIME ZONE`, val = BLOB) argmax(arg = BLOB, val = INTEGER) argmax(arg = BLOB, val = BIGINT) argmax(arg = BLOB, val = HUGEINT) argmax(arg = BLOB, val = DOUBLE) argmax(arg = BLOB, val = VARCHAR) argmax(arg = BLOB, val = DATE) argmax(arg = BLOB, val = TIMESTAMP) argmax(arg = BLOB, val = `TIMESTAMP TIME ZONE`) argmax(arg = BLOB, val = BLOB) argmax(arg = DECIMAL, val = INTEGER) argmax(arg = DECIMAL, val = BIGINT) argmax(arg = DECIMAL, val = HUGEINT) argmax(arg = DECIMAL, val = DOUBLE) argmax(arg = DECIMAL, val = VARCHAR) argmax(arg = DECIMAL, val = DATE) argmax(arg = DECIMAL, val = TIMESTAMP) argmax(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) argmax(arg = DECIMAL, val = BLOB) argmax(arg = , val = INTEGER) argmax(arg = , val = BIGINT) argmax(arg = , val = HUGEINT) argmax(arg = , val = DOUBLE) argmax(arg = , val = VARCHAR) argmax(arg = , val = DATE) argmax(arg = , val = TIMESTAMP) argmax(arg = , val = `TIMESTAMP TIME ZONE`) argmax(arg = , val = BLOB) argmax(arg = , val = ) argmax(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/argmax.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function argmax — argmax","text":"","code":"argmax(A, B)"},{"path":"https://cynkra.github.io/dd/reference/argmin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function argmin — argmin","title":"DuckDB function argmin — argmin","text":"Finds row minimum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/argmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function argmin — argmin","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/argmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function argmin — argmin","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/argmin.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function argmin — argmin","text":"argmin(arg = INTEGER, val = INTEGER) argmin(arg = INTEGER, val = BIGINT) argmin(arg = INTEGER, val = HUGEINT) argmin(arg = INTEGER, val = DOUBLE) argmin(arg = INTEGER, val = VARCHAR) argmin(arg = INTEGER, val = DATE) argmin(arg = INTEGER, val = TIMESTAMP) argmin(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) argmin(arg = INTEGER, val = BLOB) argmin(arg = BIGINT, val = INTEGER) argmin(arg = BIGINT, val = BIGINT) argmin(arg = BIGINT, val = HUGEINT) argmin(arg = BIGINT, val = DOUBLE) argmin(arg = BIGINT, val = VARCHAR) argmin(arg = BIGINT, val = DATE) argmin(arg = BIGINT, val = TIMESTAMP) argmin(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) argmin(arg = BIGINT, val = BLOB) argmin(arg = DOUBLE, val = INTEGER) argmin(arg = DOUBLE, val = BIGINT) argmin(arg = DOUBLE, val = HUGEINT) argmin(arg = DOUBLE, val = DOUBLE) argmin(arg = DOUBLE, val = VARCHAR) argmin(arg = DOUBLE, val = DATE) argmin(arg = DOUBLE, val = TIMESTAMP) argmin(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) argmin(arg = DOUBLE, val = BLOB) argmin(arg = VARCHAR, val = INTEGER) argmin(arg = VARCHAR, val = BIGINT) argmin(arg = VARCHAR, val = HUGEINT) argmin(arg = VARCHAR, val = DOUBLE) argmin(arg = VARCHAR, val = VARCHAR) argmin(arg = VARCHAR, val = DATE) argmin(arg = VARCHAR, val = TIMESTAMP) argmin(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) argmin(arg = VARCHAR, val = BLOB) argmin(arg = DATE, val = INTEGER) argmin(arg = DATE, val = BIGINT) argmin(arg = DATE, val = HUGEINT) argmin(arg = DATE, val = DOUBLE) argmin(arg = DATE, val = VARCHAR) argmin(arg = DATE, val = DATE) argmin(arg = DATE, val = TIMESTAMP) argmin(arg = DATE, val = `TIMESTAMP TIME ZONE`) argmin(arg = DATE, val = BLOB) argmin(arg = TIMESTAMP, val = INTEGER) argmin(arg = TIMESTAMP, val = BIGINT) argmin(arg = TIMESTAMP, val = HUGEINT) argmin(arg = TIMESTAMP, val = DOUBLE) argmin(arg = TIMESTAMP, val = VARCHAR) argmin(arg = TIMESTAMP, val = DATE) argmin(arg = TIMESTAMP, val = TIMESTAMP) argmin(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) argmin(arg = TIMESTAMP, val = BLOB) argmin(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) argmin(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) argmin(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) argmin(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) argmin(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) argmin(arg = `TIMESTAMP TIME ZONE`, val = DATE) argmin(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) argmin(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) argmin(arg = `TIMESTAMP TIME ZONE`, val = BLOB) argmin(arg = BLOB, val = INTEGER) argmin(arg = BLOB, val = BIGINT) argmin(arg = BLOB, val = HUGEINT) argmin(arg = BLOB, val = DOUBLE) argmin(arg = BLOB, val = VARCHAR) argmin(arg = BLOB, val = DATE) argmin(arg = BLOB, val = TIMESTAMP) argmin(arg = BLOB, val = `TIMESTAMP TIME ZONE`) argmin(arg = BLOB, val = BLOB) argmin(arg = DECIMAL, val = INTEGER) argmin(arg = DECIMAL, val = BIGINT) argmin(arg = DECIMAL, val = HUGEINT) argmin(arg = DECIMAL, val = DOUBLE) argmin(arg = DECIMAL, val = VARCHAR) argmin(arg = DECIMAL, val = DATE) argmin(arg = DECIMAL, val = TIMESTAMP) argmin(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) argmin(arg = DECIMAL, val = BLOB) argmin(arg = , val = INTEGER) argmin(arg = , val = BIGINT) argmin(arg = , val = HUGEINT) argmin(arg = , val = DOUBLE) argmin(arg = , val = VARCHAR) argmin(arg = , val = DATE) argmin(arg = , val = TIMESTAMP) argmin(arg = , val = `TIMESTAMP TIME ZONE`) argmin(arg = , val = BLOB) argmin(arg = , val = ) argmin(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/argmin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function argmin — argmin","text":"","code":"argmin(A, B)"},{"path":"https://cynkra.github.io/dd/reference/array_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_agg — array_agg","title":"DuckDB function array_agg — array_agg","text":"Returns LIST containing values column.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_agg — array_agg","text":"","code":"array_agg(arg = T)"},{"path":"https://cynkra.github.io/dd/reference/array_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_agg — array_agg","text":"arg T","code":""},{"path":"https://cynkra.github.io/dd/reference/array_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_agg — array_agg","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_agg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_agg — array_agg","text":"","code":"array_agg(A)"},{"path":"https://cynkra.github.io/dd/reference/array_aggr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_aggr — array_aggr","title":"DuckDB function array_aggr — array_aggr","text":"Executes aggregate function function_name elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_aggr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_aggr — array_aggr","text":"","code":"array_aggr(list = `ANY[]`, function_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/array_aggr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_aggr — array_aggr","text":"list [] function_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/array_aggr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_aggr — array_aggr","text":"","code":"array_aggr([1, 2, NULL], 'min')"},{"path":"https://cynkra.github.io/dd/reference/array_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_aggregate — array_aggregate","title":"DuckDB function array_aggregate — array_aggregate","text":"Executes aggregate function function_name elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_aggregate — array_aggregate","text":"","code":"array_aggregate(list = `ANY[]`, function_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/array_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_aggregate — array_aggregate","text":"list [] function_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/array_aggregate.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_aggregate — array_aggregate","text":"","code":"array_aggregate([1, 2, NULL], 'min')"},{"path":"https://cynkra.github.io/dd/reference/array_append.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_append — array_append","title":"DuckDB function array_append — array_append","text":"DuckDB macro array_append().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_append — array_append","text":"","code":"array_append(arr, el)"},{"path":"https://cynkra.github.io/dd/reference/array_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_append — array_append","text":"arr Unspecified. el Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_append — array_append","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_apply — array_apply","title":"DuckDB function array_apply — array_apply","text":"Returns list result applying lambda function element input list. return type defined return type lambda function.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_apply — array_apply","text":"","code":"array_apply(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/array_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_apply — array_apply","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/array_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_apply — array_apply","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_apply.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_apply — array_apply","text":"","code":"array_apply([1, 2, 3], lambda x : x + 1)"},{"path":"https://cynkra.github.io/dd/reference/array_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_cat — array_cat","title":"DuckDB function array_cat — array_cat","text":"Concatenates lists. NULL inputs skipped. See also operator ||.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_cat — array_cat","text":"","code":"array_cat()"},{"path":"https://cynkra.github.io/dd/reference/array_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_cat — array_cat","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_cat — array_cat","text":"","code":"array_cat([2, 3], [4, 5, 6], [7])"},{"path":"https://cynkra.github.io/dd/reference/array_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_concat — array_concat","title":"DuckDB function array_concat — array_concat","text":"Concatenates lists. NULL inputs skipped. See also operator ||.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_concat — array_concat","text":"","code":"array_concat()"},{"path":"https://cynkra.github.io/dd/reference/array_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_concat — array_concat","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_concat — array_concat","text":"","code":"array_concat([2, 3], [4, 5, 6], [7])"},{"path":"https://cynkra.github.io/dd/reference/array_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_contains — array_contains","title":"DuckDB function array_contains — array_contains","text":"Returns true list contains element.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_contains — array_contains","text":"","code":"array_contains(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/array_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_contains — array_contains","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/array_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_contains — array_contains","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/array_contains.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_contains — array_contains","text":"","code":"array_contains([1, 2, NULL], 1)"},{"path":"https://cynkra.github.io/dd/reference/array_cosine_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_cosine_distance — array_cosine_distance","title":"DuckDB function array_cosine_distance — array_cosine_distance","text":"Computes cosine distance two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_cosine_distance — array_cosine_distance","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_cosine_distance — array_cosine_distance","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_distance.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_cosine_distance — array_cosine_distance","text":"array_cosine_distance(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_cosine_distance(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_distance.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_cosine_distance — array_cosine_distance","text":"","code":"array_cosine_distance(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_cosine_similarity — array_cosine_similarity","title":"DuckDB function array_cosine_similarity — array_cosine_similarity","text":"Computes cosine similarity two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_cosine_similarity — array_cosine_similarity","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_cosine_similarity — array_cosine_similarity","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_similarity.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_cosine_similarity — array_cosine_similarity","text":"array_cosine_similarity(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_cosine_similarity(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cosine_similarity.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_cosine_similarity — array_cosine_similarity","text":"","code":"array_cosine_similarity(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_cross_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_cross_product — array_cross_product","title":"DuckDB function array_cross_product — array_cross_product","text":"Computes cross product two arrays size 3. array elements can NULL.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cross_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_cross_product — array_cross_product","text":"array FLOAT[3] | DOUBLE[3]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cross_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_cross_product — array_cross_product","text":"FLOAT[3] | DOUBLE[3]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cross_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_cross_product — array_cross_product","text":"array_cross_product(array = `FLOAT[3]`, array = `FLOAT[3]`) array_cross_product(array = `DOUBLE[3]`, array = `DOUBLE[3]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_cross_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_cross_product — array_cross_product","text":"","code":"array_cross_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_distance — array_distance","title":"DuckDB function array_distance — array_distance","text":"Computes distance two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_distance — array_distance","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_distance — array_distance","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distance.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_distance — array_distance","text":"array_distance(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_distance(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distance.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_distance — array_distance","text":"","code":"array_distance(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_distinct — array_distinct","title":"DuckDB function array_distinct — array_distinct","text":"Removes duplicates NULL values list. preserve original order.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_distinct — array_distinct","text":"","code":"array_distinct(list = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_distinct — array_distinct","text":"list T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_distinct — array_distinct","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_distinct.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_distinct — array_distinct","text":"","code":"array_distinct([1, 1, NULL, -3, 1, 5])"},{"path":"https://cynkra.github.io/dd/reference/array_dot_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_dot_product — array_dot_product","title":"DuckDB function array_dot_product — array_dot_product","text":"Computes inner product two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_dot_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_dot_product — array_dot_product","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_dot_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_dot_product — array_dot_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_dot_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_dot_product — array_dot_product","text":"array_dot_product(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_dot_product(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_dot_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_dot_product — array_dot_product","text":"","code":"array_dot_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_extract — array_extract","title":"DuckDB function array_extract — array_extract","text":"Extracts single character string using (1-based) index. Extracts named entry STRUCT. Extracts entry unnamed STRUCT (tuple) using index (1-based).","code":""},{"path":"https://cynkra.github.io/dd/reference/array_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_extract — array_extract","text":"col0 T[] col1 BIGINT string VARCHAR index BIGINT struct STRUCT entry VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/array_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_extract — array_extract","text":"T | VARCHAR | ","code":""},{"path":"https://cynkra.github.io/dd/reference/array_extract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_extract — array_extract","text":"array_extract(col0 = `T[]`, col1 = BIGINT) array_extract(string = VARCHAR, index = BIGINT) array_extract(struct = STRUCT, entry = VARCHAR) array_extract(struct = STRUCT, index = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_extract — array_extract","text":"","code":"array_extract('DuckDB', 2) array_extract({'i': 3, 'v2': 3, 'v3': 0}, 'i') array_extract(row(42, 84), 1)"},{"path":"https://cynkra.github.io/dd/reference/array_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_filter — array_filter","title":"DuckDB function array_filter — array_filter","text":"Constructs list elements input list lambda function returns true. DuckDB must able cast lambda function's return type BOOL. return type list_filter input list's.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_filter — array_filter","text":"","code":"array_filter(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/array_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_filter — array_filter","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/array_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_filter — array_filter","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_filter.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_filter — array_filter","text":"","code":"array_filter([3, 4, 5], lambda x : x > 4)"},{"path":"https://cynkra.github.io/dd/reference/array_grade_up.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_grade_up — array_grade_up","title":"DuckDB function array_grade_up — array_grade_up","text":"Works like list_sort, results indexes correspond position original list instead actual values.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_grade_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_grade_up — array_grade_up","text":"list [] col1 VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/array_grade_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_grade_up — array_grade_up","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_grade_up.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_grade_up — array_grade_up","text":"array_grade_up(list = `[]`) array_grade_up(list = `[]`, col1 = VARCHAR) array_grade_up(list = `[]`, col1 = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_grade_up.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_grade_up — array_grade_up","text":"","code":"array_grade_up([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/array_has.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has — array_has","title":"DuckDB function array_has — array_has","text":"Returns true list contains element.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_has — array_has","text":"","code":"array_has(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/array_has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has — array_has","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_has — array_has","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_has — array_has","text":"","code":"array_has([1, 2, NULL], 1)"},{"path":"https://cynkra.github.io/dd/reference/array_has_all.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has_all — array_has_all","title":"DuckDB function array_has_all — array_has_all","text":"Returns true elements list2 list1. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_has_all — array_has_all","text":"","code":"array_has_all(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_has_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has_all — array_has_all","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_has_all — array_has_all","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_all.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_has_all — array_has_all","text":"","code":"array_has_all([1, 2, 3], [2, 3])"},{"path":"https://cynkra.github.io/dd/reference/array_has_any.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_has_any — array_has_any","title":"DuckDB function array_has_any — array_has_any","text":"Returns true lists element common. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_has_any — array_has_any","text":"","code":"array_has_any(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_has_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_has_any — array_has_any","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_has_any — array_has_any","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/array_has_any.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_has_any — array_has_any","text":"","code":"array_has_any([1, 2, 3], [2, 3, 4])"},{"path":"https://cynkra.github.io/dd/reference/array_indexof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_indexof — array_indexof","title":"DuckDB function array_indexof — array_indexof","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_indexof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_indexof — array_indexof","text":"","code":"array_indexof(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/array_indexof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_indexof — array_indexof","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/array_indexof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_indexof — array_indexof","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/array_indexof.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_indexof — array_indexof","text":"","code":"array_indexof([1, 2, NULL], 2)"},{"path":"https://cynkra.github.io/dd/reference/array_inner_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_inner_product — array_inner_product","title":"DuckDB function array_inner_product — array_inner_product","text":"Computes inner product two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_inner_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_inner_product — array_inner_product","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_inner_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_inner_product — array_inner_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_inner_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_inner_product — array_inner_product","text":"array_inner_product(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_inner_product(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_inner_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_inner_product — array_inner_product","text":"","code":"array_inner_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_intersect — array_intersect","title":"DuckDB function array_intersect — array_intersect","text":"DuckDB macro array_intersect().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_intersect — array_intersect","text":"","code":"array_intersect(l1, l2)"},{"path":"https://cynkra.github.io/dd/reference/array_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_intersect — array_intersect","text":"l1 Unspecified. l2 Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_intersect — array_intersect","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_length.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_length — array_length","title":"DuckDB function array_length — array_length","text":"Returns length list. array_length lists dimensions 1 implemented.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_length — array_length","text":"list [] dimension BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/array_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_length — array_length","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/array_length.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_length — array_length","text":"array_length(list = `[]`) array_length(list = `[]`, dimension = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_length.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_length — array_length","text":"","code":"array_length([1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/array_negative_dot_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_negative_dot_product — array_negative_dot_product","title":"DuckDB function array_negative_dot_product — array_negative_dot_product","text":"Computes negative inner product two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_dot_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_negative_dot_product — array_negative_dot_product","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_dot_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_negative_dot_product — array_negative_dot_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_dot_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_negative_dot_product — array_negative_dot_product","text":"array_negative_dot_product(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_negative_dot_product(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_dot_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_negative_dot_product — array_negative_dot_product","text":"","code":"array_negative_dot_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_negative_inner_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_negative_inner_product — array_negative_inner_product","title":"DuckDB function array_negative_inner_product — array_negative_inner_product","text":"Computes negative inner product two arrays size. array elements can NULL. arrays can size long size arguments.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_inner_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_negative_inner_product — array_negative_inner_product","text":"array1 FLOAT[] | DOUBLE[] array2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_inner_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_negative_inner_product — array_negative_inner_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_inner_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_negative_inner_product — array_negative_inner_product","text":"array_negative_inner_product(array1 = `FLOAT[]`, array2 = `FLOAT[]`) array_negative_inner_product(array1 = `DOUBLE[]`, array2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_negative_inner_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_negative_inner_product — array_negative_inner_product","text":"","code":"array_negative_inner_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"},{"path":"https://cynkra.github.io/dd/reference/array_pop_back.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_pop_back — array_pop_back","title":"DuckDB function array_pop_back — array_pop_back","text":"DuckDB macro array_pop_back().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_pop_back.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_pop_back — array_pop_back","text":"","code":"array_pop_back(arr)"},{"path":"https://cynkra.github.io/dd/reference/array_pop_back.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_pop_back — array_pop_back","text":"arr Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_pop_back.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_pop_back — array_pop_back","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_pop_front.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_pop_front — array_pop_front","title":"DuckDB function array_pop_front — array_pop_front","text":"DuckDB macro array_pop_front().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_pop_front.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_pop_front — array_pop_front","text":"","code":"array_pop_front(arr)"},{"path":"https://cynkra.github.io/dd/reference/array_pop_front.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_pop_front — array_pop_front","text":"arr Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_pop_front.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_pop_front — array_pop_front","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_position — array_position","title":"DuckDB function array_position — array_position","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_position — array_position","text":"","code":"array_position(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/array_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_position — array_position","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/array_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_position — array_position","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/array_position.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_position — array_position","text":"","code":"array_position([1, 2, NULL], 2)"},{"path":"https://cynkra.github.io/dd/reference/array_prepend.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_prepend — array_prepend","title":"DuckDB function array_prepend — array_prepend","text":"DuckDB macro array_prepend().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_prepend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_prepend — array_prepend","text":"","code":"array_prepend(el, arr)"},{"path":"https://cynkra.github.io/dd/reference/array_prepend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_prepend — array_prepend","text":"el Unspecified. arr Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_prepend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_prepend — array_prepend","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_back.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_push_back — array_push_back","title":"DuckDB function array_push_back — array_push_back","text":"DuckDB macro array_push_back().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_back.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_push_back — array_push_back","text":"","code":"array_push_back(arr, e)"},{"path":"https://cynkra.github.io/dd/reference/array_push_back.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_push_back — array_push_back","text":"arr Unspecified. e Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_back.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_push_back — array_push_back","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_front.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_push_front — array_push_front","title":"DuckDB function array_push_front — array_push_front","text":"DuckDB macro array_push_front().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_front.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_push_front — array_push_front","text":"","code":"array_push_front(arr, e)"},{"path":"https://cynkra.github.io/dd/reference/array_push_front.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_push_front — array_push_front","text":"arr Unspecified. e Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_push_front.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_push_front — array_push_front","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_reduce — array_reduce","title":"DuckDB function array_reduce — array_reduce","text":"Reduces elements input list single scalar value executing lambda function running result next list element. lambda function optional initial_value argument.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_reduce — array_reduce","text":"list [] initial_value lambda(x, y) LAMBDA","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/array_reduce.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_reduce — array_reduce","text":"array_reduce(list = `[]`, `lambda(x,y)` = LAMBDA) array_reduce(list = `[]`, `lambda(x,y)` = LAMBDA, initial_value = )","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reduce.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_reduce — array_reduce","text":"","code":"array_reduce([1, 2, 3], lambda x, y : x + y)"},{"path":"https://cynkra.github.io/dd/reference/array_resize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_resize — array_resize","title":"DuckDB function array_resize — array_resize","text":"Resizes list contain size elements. Initializes new elements value NULL value set.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_resize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_resize — array_resize","text":"list [] size[ value] ","code":""},{"path":"https://cynkra.github.io/dd/reference/array_resize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_resize — array_resize","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_resize.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_resize — array_resize","text":"array_resize(list = `[]`, `size[` = ) array_resize(list = `[]`, `size[` = , `value]` = )","code":""},{"path":"https://cynkra.github.io/dd/reference/array_resize.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_resize — array_resize","text":"","code":"array_resize([1, 2, 3], 5, 0)"},{"path":"https://cynkra.github.io/dd/reference/array_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_reverse — array_reverse","title":"DuckDB function array_reverse — array_reverse","text":"DuckDB macro array_reverse().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_reverse — array_reverse","text":"","code":"array_reverse(l)"},{"path":"https://cynkra.github.io/dd/reference/array_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_reverse — array_reverse","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_reverse — array_reverse","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_reverse_sort — array_reverse_sort","title":"DuckDB function array_reverse_sort — array_reverse_sort","text":"Sorts elements list reverse order.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_reverse_sort — array_reverse_sort","text":"list [] col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_reverse_sort — array_reverse_sort","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse_sort.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_reverse_sort — array_reverse_sort","text":"array_reverse_sort(list = `[]`) array_reverse_sort(list = `[]`, col1 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_reverse_sort.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_reverse_sort — array_reverse_sort","text":"","code":"array_reverse_sort([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/array_select.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_select — array_select","title":"DuckDB function array_select — array_select","text":"Returns list based elements selected index_list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_select — array_select","text":"","code":"array_select(value_list = `T[]`, index_list = `BIGINT[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_select — array_select","text":"value_list T[] index_list BIGINT[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_select — array_select","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_select.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_select — array_select","text":"","code":"array_select([10, 20, 30, 40], [1, 4])"},{"path":"https://cynkra.github.io/dd/reference/array_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_slice — array_slice","title":"DuckDB function array_slice — array_slice","text":"Extracts sublist substring using slice conventions. Negative values accepted. list_slice added step feature.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_slice — array_slice","text":"list begin end step BIGINT","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/array_slice.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_slice — array_slice","text":"array_slice(list = , begin = , end = ) array_slice(list = , begin = , end = , step = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_slice.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_slice — array_slice","text":"","code":"array_slice('DuckDB', 3, 4) array_slice('DuckDB', 3, NULL) array_slice('DuckDB', 0, -3) array_slice([4, 5, 6], 1, 3, 2)"},{"path":"https://cynkra.github.io/dd/reference/array_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_sort — array_sort","title":"DuckDB function array_sort — array_sort","text":"Sorts elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_sort — array_sort","text":"list [] col1 VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/array_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_sort — array_sort","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_sort.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function array_sort — array_sort","text":"array_sort(list = `[]`) array_sort(list = `[]`, col1 = VARCHAR) array_sort(list = `[]`, col1 = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/array_sort.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_sort — array_sort","text":"","code":"array_sort([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/array_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_to_string — array_to_string","title":"DuckDB function array_to_string — array_to_string","text":"DuckDB macro array_to_string().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_to_string — array_to_string","text":"","code":"array_to_string(arr, sep)"},{"path":"https://cynkra.github.io/dd/reference/array_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_to_string — array_to_string","text":"arr Unspecified. sep Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_to_string — array_to_string","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_to_string_comma_default.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_to_string_comma_default — array_to_string_comma_default","title":"DuckDB function array_to_string_comma_default — array_to_string_comma_default","text":"DuckDB macro array_to_string_comma_default().","code":""},{"path":"https://cynkra.github.io/dd/reference/array_to_string_comma_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_to_string_comma_default — array_to_string_comma_default","text":"","code":"array_to_string_comma_default(arr, sep)"},{"path":"https://cynkra.github.io/dd/reference/array_to_string_comma_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_to_string_comma_default — array_to_string_comma_default","text":"arr Unspecified. sep Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_to_string_comma_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_to_string_comma_default — array_to_string_comma_default","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_transform — array_transform","title":"DuckDB function array_transform — array_transform","text":"Returns list result applying lambda function element input list. return type defined return type lambda function.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_transform — array_transform","text":"","code":"array_transform(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/array_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_transform — array_transform","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/array_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_transform — array_transform","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_transform.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_transform — array_transform","text":"","code":"array_transform([1, 2, 3], lambda x : x + 1)"},{"path":"https://cynkra.github.io/dd/reference/array_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_unique — array_unique","title":"DuckDB function array_unique — array_unique","text":"Counts unique elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_unique — array_unique","text":"","code":"array_unique(list = `ANY[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_unique — array_unique","text":"list []","code":""},{"path":"https://cynkra.github.io/dd/reference/array_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_unique — array_unique","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/array_unique.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_unique — array_unique","text":"","code":"array_unique([1, 1, NULL, -3, 1, 5])"},{"path":"https://cynkra.github.io/dd/reference/array_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_value — array_value","title":"DuckDB function array_value — array_value","text":"Creates ARRAY containing argument values.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_value — array_value","text":"","code":"array_value()"},{"path":"https://cynkra.github.io/dd/reference/array_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_value — array_value","text":"ARRAY","code":""},{"path":"https://cynkra.github.io/dd/reference/array_value.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_value — array_value","text":"","code":"array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT)"},{"path":"https://cynkra.github.io/dd/reference/array_where.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_where — array_where","title":"DuckDB function array_where — array_where","text":"Returns list BOOLEANs mask_list applied mask value_list.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_where — array_where","text":"","code":"array_where(value_list = `T[]`, mask_list = `BOOLEAN[]`)"},{"path":"https://cynkra.github.io/dd/reference/array_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function array_where — array_where","text":"value_list T[] mask_list BOOLEAN[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_where — array_where","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_where.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_where — array_where","text":"","code":"array_where([10, 20, 30, 40], [true, false, false, true])"},{"path":"https://cynkra.github.io/dd/reference/array_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function array_zip — array_zip","title":"DuckDB function array_zip — array_zip","text":"Zips n LISTs new LIST whose length longest list. elements structs n elements list list_1, …, list_n, missing elements replaced NULL. truncate set, lists truncated smallest list length.","code":""},{"path":"https://cynkra.github.io/dd/reference/array_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function array_zip — array_zip","text":"","code":"array_zip()"},{"path":"https://cynkra.github.io/dd/reference/array_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function array_zip — array_zip","text":"STRUCT[]","code":""},{"path":"https://cynkra.github.io/dd/reference/array_zip.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function array_zip — array_zip","text":"","code":"array_zip([1, 2], [3, 4], [5, 6]) array_zip([1, 2], [3, 4], [5, 6, 7]) array_zip([1, 2], [3, 4], [5, 6, 7], true)"},{"path":"https://cynkra.github.io/dd/reference/arrow_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arrow_scan — arrow_scan","title":"DuckDB function arrow_scan — arrow_scan","text":"DuckDB function arrow_scan().","code":""},{"path":"https://cynkra.github.io/dd/reference/arrow_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function arrow_scan — arrow_scan","text":"","code":"arrow_scan(col0 = POINTER, col1 = POINTER, col2 = POINTER)"},{"path":"https://cynkra.github.io/dd/reference/arrow_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arrow_scan — arrow_scan","text":"col0 POINTER col1 POINTER col2 POINTER","code":""},{"path":"https://cynkra.github.io/dd/reference/arrow_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arrow_scan — arrow_scan","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/arrow_scan_dumb.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function arrow_scan_dumb — arrow_scan_dumb","title":"DuckDB function arrow_scan_dumb — arrow_scan_dumb","text":"DuckDB function arrow_scan_dumb().","code":""},{"path":"https://cynkra.github.io/dd/reference/arrow_scan_dumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function arrow_scan_dumb — arrow_scan_dumb","text":"","code":"arrow_scan_dumb(col0 = POINTER, col1 = POINTER, col2 = POINTER)"},{"path":"https://cynkra.github.io/dd/reference/arrow_scan_dumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function arrow_scan_dumb — arrow_scan_dumb","text":"col0 POINTER col1 POINTER col2 POINTER","code":""},{"path":"https://cynkra.github.io/dd/reference/arrow_scan_dumb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function arrow_scan_dumb — arrow_scan_dumb","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ascii — ascii","title":"DuckDB function ascii — ascii","text":"Returns integer represents Unicode code point first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ascii — ascii","text":"","code":"ascii(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ascii — ascii","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ascii — ascii","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/ascii.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ascii — ascii","text":"","code":"ascii('Ω')"},{"path":"https://cynkra.github.io/dd/reference/asin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function asin — asin","title":"DuckDB function asin — asin","text":"Computes arcsine x.","code":""},{"path":"https://cynkra.github.io/dd/reference/asin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function asin — asin","text":"","code":"asin(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/asin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function asin — asin","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/asin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function asin — asin","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/asin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function asin — asin","text":"","code":"asin(0.5)"},{"path":"https://cynkra.github.io/dd/reference/asinh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function asinh — asinh","title":"DuckDB function asinh — asinh","text":"Computes inverse hyperbolic sin x.","code":""},{"path":"https://cynkra.github.io/dd/reference/asinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function asinh — asinh","text":"","code":"asinh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/asinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function asinh — asinh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/asinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function asinh — asinh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/asinh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function asinh — asinh","text":"","code":"asinh(0.5)"},{"path":"https://cynkra.github.io/dd/reference/at-greater-than.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function @> — at->","title":"DuckDB function @> — at->","text":"Returns true elements list2 list1. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/at-greater-than.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function @> — at->","text":"","code":"`@>`(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/at-greater-than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function @> — at->","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/at-greater-than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function @> — at->","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/at-greater-than.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function @> — at->","text":"","code":"list_has_all([1, 2, 3], [2, 3])"},{"path":"https://cynkra.github.io/dd/reference/at.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function @ — at-","title":"DuckDB function @ — at-","text":"Absolute value.","code":""},{"path":"https://cynkra.github.io/dd/reference/at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function @ — at-","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function @ — at-","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/at.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function @ — at-","text":"`@`(x = TINYINT) `@`(x = SMALLINT) `@`(x = INTEGER) `@`(x = BIGINT) `@`(x = HUGEINT) `@`(x = FLOAT) `@`(x = DOUBLE) `@`(x = DECIMAL) `@`(x = UTINYINT) `@`(x = USMALLINT) `@`(x = UINTEGER) `@`(x = UBIGINT) `@`(x = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/at.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function @ — at-","text":"","code":"abs(-17.4)"},{"path":"https://cynkra.github.io/dd/reference/atan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atan — atan","title":"DuckDB function atan — atan","text":"Computes arctangent x.","code":""},{"path":"https://cynkra.github.io/dd/reference/atan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function atan — atan","text":"","code":"atan(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/atan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atan — atan","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function atan — atan","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atan.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function atan — atan","text":"","code":"atan(0.5)"},{"path":"https://cynkra.github.io/dd/reference/atan2.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atan2 — atan2","title":"DuckDB function atan2 — atan2","text":"Computes arctangent (y, x).","code":""},{"path":"https://cynkra.github.io/dd/reference/atan2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function atan2 — atan2","text":"","code":"atan2(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/atan2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atan2 — atan2","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atan2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function atan2 — atan2","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atan2.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function atan2 — atan2","text":"","code":"atan2(1.0, 0.0)"},{"path":"https://cynkra.github.io/dd/reference/atanh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function atanh — atanh","title":"DuckDB function atanh — atanh","text":"Computes inverse hyperbolic tan x.","code":""},{"path":"https://cynkra.github.io/dd/reference/atanh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function atanh — atanh","text":"","code":"atanh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/atanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function atanh — atanh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atanh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function atanh — atanh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/atanh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function atanh — atanh","text":"","code":"atanh(0.5)"},{"path":"https://cynkra.github.io/dd/reference/avg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function avg — avg","title":"DuckDB function avg — avg","text":"Calculates average value tuples x.","code":""},{"path":"https://cynkra.github.io/dd/reference/avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function avg — avg","text":"x DECIMAL | SMALLINT | INTEGER | BIGINT | HUGEINT | INTERVAL | DOUBLE | TIMESTAMP | TIMESTAMP TIME ZONE | TIME | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function avg — avg","text":"DECIMAL | DOUBLE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE | TIME | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/avg.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function avg — avg","text":"avg(x = DECIMAL) avg(x = SMALLINT) avg(x = INTEGER) avg(x = BIGINT) avg(x = HUGEINT) avg(x = INTERVAL) avg(x = DOUBLE) avg(x = TIMESTAMP) avg(x = `TIMESTAMP TIME ZONE`) avg(x = TIME) avg(x = `TIME TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/avg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function avg — avg","text":"","code":"SUM(x) / COUNT(*)"},{"path":"https://cynkra.github.io/dd/reference/bar.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bar — bar","title":"DuckDB function bar — bar","text":"Draws band whose width proportional (x - min) equal width characters x = max. width defaults 80.","code":""},{"path":"https://cynkra.github.io/dd/reference/bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bar — bar","text":"x DOUBLE min DOUBLE max DOUBLE width DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bar — bar","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/bar.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bar — bar","text":"bar(x = DOUBLE, min = DOUBLE, max = DOUBLE, width = DOUBLE) bar(x = DOUBLE, min = DOUBLE, max = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/bar.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bar — bar","text":"","code":"bar(5, 0, 20, 10)"},{"path":"https://cynkra.github.io/dd/reference/base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function base64 — base64","title":"DuckDB function base64 — base64","text":"Converts blob base64 encoded string.","code":""},{"path":"https://cynkra.github.io/dd/reference/base64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function base64 — base64","text":"","code":"base64(blob = BLOB)"},{"path":"https://cynkra.github.io/dd/reference/base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function base64 — base64","text":"blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/base64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function base64 — base64","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/base64.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function base64 — base64","text":"","code":"base64('A'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/bin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bin — bin","title":"DuckDB function bin — bin","text":"Converts string binary representation. Converts value binary representation.","code":""},{"path":"https://cynkra.github.io/dd/reference/bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bin — bin","text":"string VARCHAR value BIGNUM | UBIGINT | BIGINT | HUGEINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bin — bin","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/bin.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bin — bin","text":"bin(string = VARCHAR) bin(value = BIGNUM) bin(value = UBIGINT) bin(value = BIGINT) bin(value = HUGEINT) bin(value = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bin — bin","text":"","code":"bin('Aa') bin(42)"},{"path":"https://cynkra.github.io/dd/reference/bit_and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_and — bit_and","title":"DuckDB function bit_and — bit_and","text":"Returns bitwise bits given expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_and — bit_and","text":"arg TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_and — bit_and","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_and.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bit_and — bit_and","text":"bit_and(arg = TINYINT) bit_and(arg = SMALLINT) bit_and(arg = INTEGER) bit_and(arg = BIGINT) bit_and(arg = HUGEINT) bit_and(arg = UTINYINT) bit_and(arg = USMALLINT) bit_and(arg = UINTEGER) bit_and(arg = UBIGINT) bit_and(arg = UHUGEINT) bit_and(arg = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_and.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_and — bit_and","text":"","code":"bit_and(A)"},{"path":"https://cynkra.github.io/dd/reference/bit_count.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_count — bit_count","title":"DuckDB function bit_count — bit_count","text":"Returns number bits set.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_count — bit_count","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_count — bit_count","text":"TINYINT | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_count.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bit_count — bit_count","text":"bit_count(x = TINYINT) bit_count(x = SMALLINT) bit_count(x = INTEGER) bit_count(x = BIGINT) bit_count(x = HUGEINT) bit_count(x = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_count.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_count — bit_count","text":"","code":"bit_count(31)"},{"path":"https://cynkra.github.io/dd/reference/bit_length.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_length — bit_length","title":"DuckDB function bit_length — bit_length","text":"Number bits string. Returns bit-length bit argument.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_length — bit_length","text":"string VARCHAR bit BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_length — bit_length","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_length.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bit_length — bit_length","text":"bit_length(string = VARCHAR) bit_length(bit = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_length.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_length — bit_length","text":"","code":"bit_length('abc') bit_length(42::TINYINT::BIT)"},{"path":"https://cynkra.github.io/dd/reference/bit_or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_or — bit_or","title":"DuckDB function bit_or — bit_or","text":"Returns bitwise bits given expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_or — bit_or","text":"arg TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_or — bit_or","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_or.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bit_or — bit_or","text":"bit_or(arg = TINYINT) bit_or(arg = SMALLINT) bit_or(arg = INTEGER) bit_or(arg = BIGINT) bit_or(arg = HUGEINT) bit_or(arg = UTINYINT) bit_or(arg = USMALLINT) bit_or(arg = UINTEGER) bit_or(arg = UBIGINT) bit_or(arg = UHUGEINT) bit_or(arg = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_or.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_or — bit_or","text":"","code":"bit_or(A)"},{"path":"https://cynkra.github.io/dd/reference/bit_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_position — bit_position","title":"DuckDB function bit_position — bit_position","text":"Returns first starting index specified substring within bits, zero present. first (leftmost) bit indexed 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function bit_position — bit_position","text":"","code":"bit_position(substring = BIT, bitstring = BIT)"},{"path":"https://cynkra.github.io/dd/reference/bit_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_position — bit_position","text":"substring BIT bitstring BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_position — bit_position","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_position.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_position — bit_position","text":"","code":"bit_position('010'::BIT, '1110101'::BIT)"},{"path":"https://cynkra.github.io/dd/reference/bit_xor.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bit_xor — bit_xor","title":"DuckDB function bit_xor — bit_xor","text":"Returns bitwise XOR bits given expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_xor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bit_xor — bit_xor","text":"arg TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_xor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bit_xor — bit_xor","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_xor.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bit_xor — bit_xor","text":"bit_xor(arg = TINYINT) bit_xor(arg = SMALLINT) bit_xor(arg = INTEGER) bit_xor(arg = BIGINT) bit_xor(arg = HUGEINT) bit_xor(arg = UTINYINT) bit_xor(arg = USMALLINT) bit_xor(arg = UINTEGER) bit_xor(arg = UBIGINT) bit_xor(arg = UHUGEINT) bit_xor(arg = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bit_xor.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bit_xor — bit_xor","text":"","code":"bit_xor(A)"},{"path":"https://cynkra.github.io/dd/reference/bitstring.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bitstring — bitstring","title":"DuckDB function bitstring — bitstring","text":"Pads bitstring specified length.","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bitstring — bitstring","text":"bitstring VARCHAR | BIT length INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bitstring — bitstring","text":"BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bitstring — bitstring","text":"bitstring(bitstring = VARCHAR, length = INTEGER) bitstring(bitstring = BIT, length = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bitstring — bitstring","text":"","code":"bitstring('1010'::BIT, 7)"},{"path":"https://cynkra.github.io/dd/reference/bitstring_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bitstring_agg — bitstring_agg","title":"DuckDB function bitstring_agg — bitstring_agg","text":"Returns bitstring bits set distinct value.","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bitstring_agg — bitstring_agg","text":"arg TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col2 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bitstring_agg — bitstring_agg","text":"BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring_agg.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function bitstring_agg — bitstring_agg","text":"bitstring_agg(arg = TINYINT) bitstring_agg(arg = TINYINT, col1 = TINYINT, col2 = TINYINT) bitstring_agg(arg = SMALLINT) bitstring_agg(arg = SMALLINT, col1 = SMALLINT, col2 = SMALLINT) bitstring_agg(arg = INTEGER) bitstring_agg(arg = INTEGER, col1 = INTEGER, col2 = INTEGER) bitstring_agg(arg = BIGINT) bitstring_agg(arg = BIGINT, col1 = BIGINT, col2 = BIGINT) bitstring_agg(arg = HUGEINT) bitstring_agg(arg = HUGEINT, col1 = HUGEINT, col2 = HUGEINT) bitstring_agg(arg = UTINYINT) bitstring_agg(arg = UTINYINT, col1 = UTINYINT, col2 = UTINYINT) bitstring_agg(arg = USMALLINT) bitstring_agg(arg = USMALLINT, col1 = USMALLINT, col2 = USMALLINT) bitstring_agg(arg = UINTEGER) bitstring_agg(arg = UINTEGER, col1 = UINTEGER, col2 = UINTEGER) bitstring_agg(arg = UBIGINT) bitstring_agg(arg = UBIGINT, col1 = UBIGINT, col2 = UBIGINT) bitstring_agg(arg = UHUGEINT) bitstring_agg(arg = UHUGEINT, col1 = UHUGEINT, col2 = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/bitstring_agg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bitstring_agg — bitstring_agg","text":"","code":"bitstring_agg(A)"},{"path":"https://cynkra.github.io/dd/reference/bool_and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bool_and — bool_and","title":"DuckDB function bool_and — bool_and","text":"Returns TRUE every input value TRUE, otherwise FALSE.","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function bool_and — bool_and","text":"","code":"bool_and(arg = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/bool_and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bool_and — bool_and","text":"arg BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bool_and — bool_and","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_and.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bool_and — bool_and","text":"","code":"bool_and(A)"},{"path":"https://cynkra.github.io/dd/reference/bool_or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function bool_or — bool_or","title":"DuckDB function bool_or — bool_or","text":"Returns TRUE input value TRUE, otherwise FALSE.","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function bool_or — bool_or","text":"","code":"bool_or(arg = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/bool_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function bool_or — bool_or","text":"arg BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function bool_or — bool_or","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/bool_or.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function bool_or — bool_or","text":"","code":"bool_or(A)"},{"path":"https://cynkra.github.io/dd/reference/can_cast_implicitly.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function can_cast_implicitly — can_cast_implicitly","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"Whether can implicitly cast source type type.","code":""},{"path":"https://cynkra.github.io/dd/reference/can_cast_implicitly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"","code":"can_cast_implicitly(source_type = ANY, target_type = ANY)"},{"path":"https://cynkra.github.io/dd/reference/can_cast_implicitly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"source_type target_type ","code":""},{"path":"https://cynkra.github.io/dd/reference/can_cast_implicitly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/can_cast_implicitly.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function can_cast_implicitly — can_cast_implicitly","text":"","code":"can_cast_implicitly(NULL::INTEGER, NULL::BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cardinality — cardinality","title":"DuckDB function cardinality — cardinality","text":"Returns size map (number entries map).","code":""},{"path":"https://cynkra.github.io/dd/reference/cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cardinality — cardinality","text":"","code":"cardinality(map = ANY)"},{"path":"https://cynkra.github.io/dd/reference/cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cardinality — cardinality","text":"map ","code":""},{"path":"https://cynkra.github.io/dd/reference/cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function cardinality — cardinality","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/cardinality.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cardinality — cardinality","text":"","code":"cardinality( map([4, 2], ['a', 'b']) );"},{"path":"https://cynkra.github.io/dd/reference/cast_to_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cast_to_type — cast_to_type","title":"DuckDB function cast_to_type — cast_to_type","text":"Casts first argument type second argument.","code":""},{"path":"https://cynkra.github.io/dd/reference/cast_to_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cast_to_type — cast_to_type","text":"","code":"cast_to_type(param = ANY, type = ANY)"},{"path":"https://cynkra.github.io/dd/reference/cast_to_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cast_to_type — cast_to_type","text":"param type ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/cast_to_type.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cast_to_type — cast_to_type","text":"","code":"cast_to_type('42', NULL::INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/cbrt.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cbrt — cbrt","title":"DuckDB function cbrt — cbrt","text":"Returns cube root x.","code":""},{"path":"https://cynkra.github.io/dd/reference/cbrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cbrt — cbrt","text":"","code":"cbrt(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/cbrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cbrt — cbrt","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cbrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function cbrt — cbrt","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cbrt.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cbrt — cbrt","text":"","code":"cbrt(8)"},{"path":"https://cynkra.github.io/dd/reference/ceil.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ceil — ceil","title":"DuckDB function ceil — ceil","text":"Rounds number .","code":""},{"path":"https://cynkra.github.io/dd/reference/ceil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ceil — ceil","text":"x FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/ceil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ceil — ceil","text":"FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/ceil.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function ceil — ceil","text":"ceil(x = FLOAT) ceil(x = DOUBLE) ceil(x = DECIMAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/ceil.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ceil — ceil","text":"","code":"ceil(17.4)"},{"path":"https://cynkra.github.io/dd/reference/ceiling.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ceiling — ceiling","title":"DuckDB function ceiling — ceiling","text":"Rounds number .","code":""},{"path":"https://cynkra.github.io/dd/reference/ceiling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ceiling — ceiling","text":"x FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/ceiling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ceiling — ceiling","text":"FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/ceiling.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function ceiling — ceiling","text":"ceiling(x = FLOAT) ceiling(x = DOUBLE) ceiling(x = DECIMAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/ceiling.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ceiling — ceiling","text":"","code":"ceiling(17.4)"},{"path":"https://cynkra.github.io/dd/reference/century.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function century — century","title":"DuckDB function century — century","text":"Extract century component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/century.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function century — century","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/century.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function century — century","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/century.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function century — century","text":"century(ts = DATE) century(ts = INTERVAL) century(ts = TIMESTAMP) century(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/century.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function century — century","text":"","code":"century(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/char_length.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function char_length — char_length","title":"DuckDB function char_length — char_length","text":"Number characters string. Returns bit-length bit argument. Returns length list.","code":""},{"path":"https://cynkra.github.io/dd/reference/char_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function char_length — char_length","text":"string VARCHAR bit BIT list []","code":""},{"path":"https://cynkra.github.io/dd/reference/char_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function char_length — char_length","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/char_length.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function char_length — char_length","text":"char_length(string = VARCHAR) char_length(bit = BIT) char_length(list = `[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/char_length.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function char_length — char_length","text":"","code":"char_length('Hello🦆') char_length(42::TINYINT::BIT) char_length([1,2,3])"},{"path":"https://cynkra.github.io/dd/reference/character_length.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function character_length — character_length","title":"DuckDB function character_length — character_length","text":"Number characters string. Returns bit-length bit argument. Returns length list.","code":""},{"path":"https://cynkra.github.io/dd/reference/character_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function character_length — character_length","text":"string VARCHAR bit BIT list []","code":""},{"path":"https://cynkra.github.io/dd/reference/character_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function character_length — character_length","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/character_length.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function character_length — character_length","text":"character_length(string = VARCHAR) character_length(bit = BIT) character_length(list = `[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/character_length.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function character_length — character_length","text":"","code":"character_length('Hello🦆') character_length(42::TINYINT::BIT) character_length([1,2,3])"},{"path":"https://cynkra.github.io/dd/reference/checkpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function checkpoint — checkpoint","title":"DuckDB function checkpoint — checkpoint","text":"DuckDB function checkpoint().","code":""},{"path":"https://cynkra.github.io/dd/reference/checkpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function checkpoint — checkpoint","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/checkpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function checkpoint — checkpoint","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/checkpoint.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function checkpoint — checkpoint","text":"checkpoint() checkpoint(col0 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function chr — chr","title":"DuckDB function chr — chr","text":"Returns character corresponding ASCII code value Unicode code point.","code":""},{"path":"https://cynkra.github.io/dd/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function chr — chr","text":"","code":"chr(code_point = INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function chr — chr","text":"code_point INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function chr — chr","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/chr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function chr — chr","text":"","code":"chr(65)"},{"path":"https://cynkra.github.io/dd/reference/col_description.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function col_description — col_description","title":"DuckDB function col_description — col_description","text":"DuckDB macro col_description().","code":""},{"path":"https://cynkra.github.io/dd/reference/col_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function col_description — col_description","text":"","code":"col_description(table_oid, column_number)"},{"path":"https://cynkra.github.io/dd/reference/col_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function col_description — col_description","text":"table_oid Unspecified. column_number Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/col_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function col_description — col_description","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/collations.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function collations — collations","title":"DuckDB function collations — collations","text":"DuckDB function collations().","code":""},{"path":"https://cynkra.github.io/dd/reference/collations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function collations — collations","text":"","code":"collations()"},{"path":"https://cynkra.github.io/dd/reference/collations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function collations — collations","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function combine — combine","title":"DuckDB function combine — combine","text":"DuckDB function combine().","code":""},{"path":"https://cynkra.github.io/dd/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function combine — combine","text":"","code":"combine(col0 = `AGGREGATE_STATE<?>`, col1 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function combine — combine","text":"col0 AGGREGATE_STATE<?> col1 ","code":""},{"path":"https://cynkra.github.io/dd/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function combine — combine","text":"AGGREGATE_STATE<?>","code":""},{"path":"https://cynkra.github.io/dd/reference/concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function concat — concat","title":"DuckDB function concat — concat","text":"Concatenates multiple strings lists. NULL inputs skipped. See also operator ||.","code":""},{"path":"https://cynkra.github.io/dd/reference/concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function concat — concat","text":"","code":"concat(value = ANY)"},{"path":"https://cynkra.github.io/dd/reference/concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function concat — concat","text":"value ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function concat — concat","text":"","code":"concat('Hello', ' ', 'World') concat([1, 2, 3], NULL, [4, 5, 6])"},{"path":"https://cynkra.github.io/dd/reference/concat_ws.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function concat_ws — concat_ws","title":"DuckDB function concat_ws — concat_ws","text":"Concatenates many strings, separated separator. NULL inputs skipped.","code":""},{"path":"https://cynkra.github.io/dd/reference/concat_ws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function concat_ws — concat_ws","text":"","code":"concat_ws(separator = VARCHAR, string = ANY)"},{"path":"https://cynkra.github.io/dd/reference/concat_ws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function concat_ws — concat_ws","text":"separator VARCHAR string ","code":""},{"path":"https://cynkra.github.io/dd/reference/concat_ws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function concat_ws — concat_ws","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/concat_ws.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function concat_ws — concat_ws","text":"","code":"concat_ws(', ', 'Banana', 'Apple', 'Melon')"},{"path":"https://cynkra.github.io/dd/reference/constant_or_null.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function constant_or_null — constant_or_null","title":"DuckDB function constant_or_null — constant_or_null","text":"arg2 NULL, return NULL. Otherwise, return arg1.","code":""},{"path":"https://cynkra.github.io/dd/reference/constant_or_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function constant_or_null — constant_or_null","text":"","code":"constant_or_null(arg1 = ANY, arg2 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/constant_or_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function constant_or_null — constant_or_null","text":"arg1 arg2 ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/constant_or_null.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function constant_or_null — constant_or_null","text":"","code":"constant_or_null(42, NULL)"},{"path":"https://cynkra.github.io/dd/reference/contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function contains — contains","title":"DuckDB function contains — contains","text":"Returns true search_string found within string.","code":""},{"path":"https://cynkra.github.io/dd/reference/contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function contains — contains","text":"string VARCHAR search_string VARCHAR col0 T[] | MAP(K, V) | STRUCT col1 T | K | ","code":""},{"path":"https://cynkra.github.io/dd/reference/contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function contains — contains","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/contains.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function contains — contains","text":"contains(string = VARCHAR, search_string = VARCHAR) contains(col0 = `T[]`, col1 = T) contains(col0 = `MAP(K, V)`, col1 = K) contains(col0 = STRUCT, col1 = )","code":""},{"path":"https://cynkra.github.io/dd/reference/contains.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function contains — contains","text":"","code":"contains('abc', 'a')"},{"path":"https://cynkra.github.io/dd/reference/copy_database.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function copy_database — copy_database","title":"DuckDB function copy_database — copy_database","text":"DuckDB function copy_database().","code":""},{"path":"https://cynkra.github.io/dd/reference/copy_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function copy_database — copy_database","text":"","code":"copy_database(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/copy_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function copy_database — copy_database","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/copy_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function copy_database — copy_database","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/corr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function corr — corr","title":"DuckDB function corr — corr","text":"Returns correlation coefficient non-NULL pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function corr — corr","text":"","code":"corr(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function corr — corr","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function corr — corr","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/corr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function corr — corr","text":"","code":"COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))"},{"path":"https://cynkra.github.io/dd/reference/cos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cos — cos","title":"DuckDB function cos — cos","text":"Computes cos x.","code":""},{"path":"https://cynkra.github.io/dd/reference/cos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cos — cos","text":"","code":"cos(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/cos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cos — cos","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function cos — cos","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cos.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cos — cos","text":"","code":"cos(90)"},{"path":"https://cynkra.github.io/dd/reference/cosh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cosh — cosh","title":"DuckDB function cosh — cosh","text":"Computes hyperbolic cos x.","code":""},{"path":"https://cynkra.github.io/dd/reference/cosh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cosh — cosh","text":"","code":"cosh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/cosh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cosh — cosh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cosh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function cosh — cosh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cosh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cosh — cosh","text":"","code":"cosh(1)"},{"path":"https://cynkra.github.io/dd/reference/cot.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function cot — cot","title":"DuckDB function cot — cot","text":"Computes cotangent x.","code":""},{"path":"https://cynkra.github.io/dd/reference/cot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function cot — cot","text":"","code":"cot(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/cot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function cot — cot","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function cot — cot","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/cot.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function cot — cot","text":"","code":"cot(0.5)"},{"path":"https://cynkra.github.io/dd/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function count — count","title":"DuckDB function count — count","text":"Returns number non-NULL values arg.","code":""},{"path":"https://cynkra.github.io/dd/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function count — count","text":"arg ","code":""},{"path":"https://cynkra.github.io/dd/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function count — count","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/count.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function count — count","text":"count(arg = ) count()","code":""},{"path":"https://cynkra.github.io/dd/reference/count.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function count — count","text":"","code":"count(A)"},{"path":"https://cynkra.github.io/dd/reference/count_if.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function count_if — count_if","title":"DuckDB function count_if — count_if","text":"Counts total number TRUE values boolean column.","code":""},{"path":"https://cynkra.github.io/dd/reference/count_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function count_if — count_if","text":"","code":"count_if(arg = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/count_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function count_if — count_if","text":"arg BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/count_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function count_if — count_if","text":"HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/count_if.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function count_if — count_if","text":"","code":"count_if(A)"},{"path":"https://cynkra.github.io/dd/reference/count_star.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function count_star — count_star","title":"DuckDB function count_star — count_star","text":"DuckDB function count_star().","code":""},{"path":"https://cynkra.github.io/dd/reference/count_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function count_star — count_star","text":"","code":"count_star()"},{"path":"https://cynkra.github.io/dd/reference/count_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function count_star — count_star","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/countif.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function countif — countif","title":"DuckDB function countif — countif","text":"Counts total number TRUE values boolean column.","code":""},{"path":"https://cynkra.github.io/dd/reference/countif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function countif — countif","text":"","code":"countif(arg = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/countif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function countif — countif","text":"arg BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/countif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function countif — countif","text":"HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/countif.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function countif — countif","text":"","code":"countif(A)"},{"path":"https://cynkra.github.io/dd/reference/covar_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function covar_pop — covar_pop","title":"DuckDB function covar_pop — covar_pop","text":"Returns population covariance input values.","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function covar_pop — covar_pop","text":"","code":"covar_pop(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/covar_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function covar_pop — covar_pop","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function covar_pop — covar_pop","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_pop.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function covar_pop — covar_pop","text":"","code":"(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)"},{"path":"https://cynkra.github.io/dd/reference/covar_samp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function covar_samp — covar_samp","title":"DuckDB function covar_samp — covar_samp","text":"Returns sample covariance non-NULL pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function covar_samp — covar_samp","text":"","code":"covar_samp(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/covar_samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function covar_samp — covar_samp","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function covar_samp — covar_samp","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/covar_samp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function covar_samp — covar_samp","text":"","code":"(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)"},{"path":"https://cynkra.github.io/dd/reference/create_sort_key.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function create_sort_key — create_sort_key","title":"DuckDB function create_sort_key — create_sort_key","text":"Constructs binary-comparable sort key based set input parameters sort qualifiers.","code":""},{"path":"https://cynkra.github.io/dd/reference/create_sort_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function create_sort_key — create_sort_key","text":"","code":"create_sort_key(parameters... = ANY)"},{"path":"https://cynkra.github.io/dd/reference/create_sort_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function create_sort_key — create_sort_key","text":"parameters... ","code":""},{"path":"https://cynkra.github.io/dd/reference/create_sort_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function create_sort_key — create_sort_key","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/create_sort_key.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function create_sort_key — create_sort_key","text":"","code":"create_sort_key('A', 'DESC')"},{"path":"https://cynkra.github.io/dd/reference/current_catalog.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_catalog — current_catalog","title":"DuckDB function current_catalog — current_catalog","text":"DuckDB macro current_catalog().","code":""},{"path":"https://cynkra.github.io/dd/reference/current_catalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_catalog — current_catalog","text":"","code":"current_catalog()"},{"path":"https://cynkra.github.io/dd/reference/current_catalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_catalog — current_catalog","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_connection_id.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_connection_id — current_connection_id","title":"DuckDB function current_connection_id — current_connection_id","text":"Get current connection_id.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_connection_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_connection_id — current_connection_id","text":"","code":"current_connection_id()"},{"path":"https://cynkra.github.io/dd/reference/current_connection_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_connection_id — current_connection_id","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/current_connection_id.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_connection_id — current_connection_id","text":"","code":"current_connection_id()"},{"path":"https://cynkra.github.io/dd/reference/current_database.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_database — current_database","title":"DuckDB function current_database — current_database","text":"Returns name currently active database.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_database — current_database","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/current_database.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function current_database — current_database","text":"current_database() current_database()","code":""},{"path":"https://cynkra.github.io/dd/reference/current_database.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_database — current_database","text":"","code":"current_database()"},{"path":"https://cynkra.github.io/dd/reference/current_query.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_query — current_query","title":"DuckDB function current_query — current_query","text":"Returns current query string.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_query — current_query","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/current_query.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function current_query — current_query","text":"current_query() current_query()","code":""},{"path":"https://cynkra.github.io/dd/reference/current_query.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_query — current_query","text":"","code":"current_query()"},{"path":"https://cynkra.github.io/dd/reference/current_query_id.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_query_id — current_query_id","title":"DuckDB function current_query_id — current_query_id","text":"Get current query_id.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_query_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_query_id — current_query_id","text":"","code":"current_query_id()"},{"path":"https://cynkra.github.io/dd/reference/current_query_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_query_id — current_query_id","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/current_query_id.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_query_id — current_query_id","text":"","code":"current_query_id()"},{"path":"https://cynkra.github.io/dd/reference/current_role.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_role — current_role","title":"DuckDB function current_role — current_role","text":"DuckDB macro current_role().","code":""},{"path":"https://cynkra.github.io/dd/reference/current_role.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_role — current_role","text":"","code":"current_role()"},{"path":"https://cynkra.github.io/dd/reference/current_role.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_role — current_role","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_schema — current_schema","title":"DuckDB function current_schema — current_schema","text":"Returns name currently active schema. Default main.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_schema — current_schema","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schema.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function current_schema — current_schema","text":"current_schema() current_schema()","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schema.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_schema — current_schema","text":"","code":"current_schema()"},{"path":"https://cynkra.github.io/dd/reference/current_schemas.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_schemas — current_schemas","title":"DuckDB function current_schemas — current_schemas","text":"Returns list schemas. Pass parameter True include implicit schemas.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schemas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function current_schemas — current_schemas","text":"include_implicit BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schemas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_schemas — current_schemas","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schemas.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function current_schemas — current_schemas","text":"current_schemas(include_implicit = BOOLEAN) current_schemas(include_implicit)","code":""},{"path":"https://cynkra.github.io/dd/reference/current_schemas.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_schemas — current_schemas","text":"","code":"current_schemas(true)"},{"path":"https://cynkra.github.io/dd/reference/current_setting.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_setting — current_setting","title":"DuckDB function current_setting — current_setting","text":"Returns current value configuration setting.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_setting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_setting — current_setting","text":"","code":"current_setting(setting_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/current_setting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function current_setting — current_setting","text":"setting_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/current_setting.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_setting — current_setting","text":"","code":"current_setting('access_mode')"},{"path":"https://cynkra.github.io/dd/reference/current_transaction_id.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_transaction_id — current_transaction_id","title":"DuckDB function current_transaction_id — current_transaction_id","text":"Get current global transaction_id.","code":""},{"path":"https://cynkra.github.io/dd/reference/current_transaction_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_transaction_id — current_transaction_id","text":"","code":"current_transaction_id()"},{"path":"https://cynkra.github.io/dd/reference/current_transaction_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_transaction_id — current_transaction_id","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/current_transaction_id.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function current_transaction_id — current_transaction_id","text":"","code":"current_transaction_id()"},{"path":"https://cynkra.github.io/dd/reference/current_user.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function current_user — current_user","title":"DuckDB function current_user — current_user","text":"DuckDB macro current_user().","code":""},{"path":"https://cynkra.github.io/dd/reference/current_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function current_user — current_user","text":"","code":"current_user()"},{"path":"https://cynkra.github.io/dd/reference/current_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function current_user — current_user","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/currval.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function currval — currval","title":"DuckDB function currval — currval","text":"Return current value sequence. Note nextval must called least prior calling currval.","code":""},{"path":"https://cynkra.github.io/dd/reference/currval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function currval — currval","text":"","code":"currval(`'sequence_name'` = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/currval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function currval — currval","text":"'sequence_name' VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/currval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function currval — currval","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/currval.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function currval — currval","text":"","code":"currval('my_sequence_name')"},{"path":"https://cynkra.github.io/dd/reference/damerau_levenshtein.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function damerau_levenshtein — damerau_levenshtein","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"Extension Levenshtein distance also include transposition adjacent characters allowed edit operation. words, minimum number edit operations (insertions, deletions, substitutions transpositions) required change one string another. Characters different cases (e.g., ) considered different.","code":""},{"path":"https://cynkra.github.io/dd/reference/damerau_levenshtein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"","code":"damerau_levenshtein(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/damerau_levenshtein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/damerau_levenshtein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/damerau_levenshtein.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function damerau_levenshtein — damerau_levenshtein","text":"","code":"damerau_levenshtein('duckdb', 'udckbd')"},{"path":"https://cynkra.github.io/dd/reference/database_list.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function database_list — database_list","title":"DuckDB function database_list — database_list","text":"DuckDB function database_list().","code":""},{"path":"https://cynkra.github.io/dd/reference/database_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function database_list — database_list","text":"","code":"database_list()"},{"path":"https://cynkra.github.io/dd/reference/database_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function database_list — database_list","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/database_size.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function database_size — database_size","title":"DuckDB function database_size — database_size","text":"DuckDB function database_size().","code":""},{"path":"https://cynkra.github.io/dd/reference/database_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function database_size — database_size","text":"","code":"database_size()"},{"path":"https://cynkra.github.io/dd/reference/database_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function database_size — database_size","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_add.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function date_add — date_add","title":"DuckDB function date_add — date_add","text":"DuckDB macro date_add().","code":""},{"path":"https://cynkra.github.io/dd/reference/date_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function date_add — date_add","text":"","code":"date_add(date, interval)"},{"path":"https://cynkra.github.io/dd/reference/date_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function date_add — date_add","text":"date Unspecified. interval Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function date_add — date_add","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function date_diff — date_diff","title":"DuckDB function date_diff — date_diff","text":"number partition boundaries timestamps.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function date_diff — date_diff","text":"part VARCHAR startdate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE enddate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/date_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function date_diff — date_diff","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/date_diff.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function date_diff — date_diff","text":"date_diff(part = VARCHAR, startdate = DATE, enddate = DATE) date_diff(part = VARCHAR, startdate = TIME, enddate = TIME) date_diff(part = VARCHAR, startdate = TIMESTAMP, enddate = TIMESTAMP) date_diff(part = VARCHAR, startdate = `TIMESTAMP TIME ZONE`, enddate = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/date_diff.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function date_diff — date_diff","text":"","code":"date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},{"path":"https://cynkra.github.io/dd/reference/date_part.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function date_part — date_part","title":"DuckDB function date_part — date_part","text":"Get subfield (equivalent extract).","code":""},{"path":"https://cynkra.github.io/dd/reference/date_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function date_part — date_part","text":"ts VARCHAR[] | VARCHAR col1 DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/date_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function date_part — date_part","text":"STRUCT() | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/date_part.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function date_part — date_part","text":"date_part(ts = `VARCHAR[]`, col1 = DATE) date_part(ts = `VARCHAR[]`, col1 = INTERVAL) date_part(ts = `VARCHAR[]`, col1 = TIME) date_part(ts = `VARCHAR[]`, col1 = TIMESTAMP) date_part(ts = `VARCHAR[]`, col1 = `TIME TIME ZONE`) date_part(ts = `VARCHAR[]`, col1 = TIME_NS) date_part(ts = VARCHAR, col1 = DATE) date_part(ts = VARCHAR, col1 = INTERVAL) date_part(ts = VARCHAR, col1 = TIME) date_part(ts = VARCHAR, col1 = TIMESTAMP) date_part(ts = VARCHAR, col1 = `TIME TIME ZONE`) date_part(ts = VARCHAR, col1 = TIME_NS) date_part(ts = `VARCHAR[]`, col1 = `TIMESTAMP TIME ZONE`) date_part(ts = VARCHAR, col1 = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/date_part.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function date_part — date_part","text":"","code":"date_part('minute', TIMESTAMP '1992-09-20 20:38:40')"},{"path":"https://cynkra.github.io/dd/reference/date_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function date_sub — date_sub","title":"DuckDB function date_sub — date_sub","text":"number complete partitions timestamps.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function date_sub — date_sub","text":"part VARCHAR startdate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE enddate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/date_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function date_sub — date_sub","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/date_sub.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function date_sub — date_sub","text":"date_sub(part = VARCHAR, startdate = DATE, enddate = DATE) date_sub(part = VARCHAR, startdate = TIME, enddate = TIME) date_sub(part = VARCHAR, startdate = TIMESTAMP, enddate = TIMESTAMP) date_sub(part = VARCHAR, startdate = `TIMESTAMP TIME ZONE`, enddate = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/date_sub.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function date_sub — date_sub","text":"","code":"date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},{"path":"https://cynkra.github.io/dd/reference/date_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function date_trunc — date_trunc","title":"DuckDB function date_trunc — date_trunc","text":"Truncate specified precision.","code":""},{"path":"https://cynkra.github.io/dd/reference/date_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function date_trunc — date_trunc","text":"part VARCHAR timestamp DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/date_trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function date_trunc — date_trunc","text":"TIMESTAMP | INTERVAL | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/date_trunc.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function date_trunc — date_trunc","text":"date_trunc(part = VARCHAR, timestamp = DATE) date_trunc(part = VARCHAR, timestamp = INTERVAL) date_trunc(part = VARCHAR, timestamp = TIMESTAMP) date_trunc(part = VARCHAR, timestamp = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/date_trunc.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function date_trunc — date_trunc","text":"","code":"date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"},{"path":"https://cynkra.github.io/dd/reference/datediff.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function datediff — datediff","title":"DuckDB function datediff — datediff","text":"number partition boundaries timestamps.","code":""},{"path":"https://cynkra.github.io/dd/reference/datediff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function datediff — datediff","text":"part VARCHAR startdate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE enddate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/datediff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function datediff — datediff","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/datediff.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function datediff — datediff","text":"datediff(part = VARCHAR, startdate = DATE, enddate = DATE) datediff(part = VARCHAR, startdate = TIME, enddate = TIME) datediff(part = VARCHAR, startdate = TIMESTAMP, enddate = TIMESTAMP) datediff(part = VARCHAR, startdate = `TIMESTAMP TIME ZONE`, enddate = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/datediff.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function datediff — datediff","text":"","code":"datediff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},{"path":"https://cynkra.github.io/dd/reference/datepart.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function datepart — datepart","title":"DuckDB function datepart — datepart","text":"Get subfield (equivalent extract).","code":""},{"path":"https://cynkra.github.io/dd/reference/datepart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function datepart — datepart","text":"ts VARCHAR[] | VARCHAR col1 DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/datepart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function datepart — datepart","text":"STRUCT() | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/datepart.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function datepart — datepart","text":"datepart(ts = `VARCHAR[]`, col1 = DATE) datepart(ts = `VARCHAR[]`, col1 = INTERVAL) datepart(ts = `VARCHAR[]`, col1 = TIME) datepart(ts = `VARCHAR[]`, col1 = TIMESTAMP) datepart(ts = `VARCHAR[]`, col1 = `TIME TIME ZONE`) datepart(ts = `VARCHAR[]`, col1 = TIME_NS) datepart(ts = VARCHAR, col1 = DATE) datepart(ts = VARCHAR, col1 = INTERVAL) datepart(ts = VARCHAR, col1 = TIME) datepart(ts = VARCHAR, col1 = TIMESTAMP) datepart(ts = VARCHAR, col1 = `TIME TIME ZONE`) datepart(ts = VARCHAR, col1 = TIME_NS) datepart(ts = `VARCHAR[]`, col1 = `TIMESTAMP TIME ZONE`) datepart(ts = VARCHAR, col1 = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/datepart.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function datepart — datepart","text":"","code":"datepart('minute', TIMESTAMP '1992-09-20 20:38:40')"},{"path":"https://cynkra.github.io/dd/reference/datesub.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function datesub — datesub","title":"DuckDB function datesub — datesub","text":"number complete partitions timestamps.","code":""},{"path":"https://cynkra.github.io/dd/reference/datesub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function datesub — datesub","text":"part VARCHAR startdate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE enddate DATE | TIME | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/datesub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function datesub — datesub","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/datesub.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function datesub — datesub","text":"datesub(part = VARCHAR, startdate = DATE, enddate = DATE) datesub(part = VARCHAR, startdate = TIME, enddate = TIME) datesub(part = VARCHAR, startdate = TIMESTAMP, enddate = TIMESTAMP) datesub(part = VARCHAR, startdate = `TIMESTAMP TIME ZONE`, enddate = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/datesub.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function datesub — datesub","text":"","code":"datesub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},{"path":"https://cynkra.github.io/dd/reference/datetrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function datetrunc — datetrunc","title":"DuckDB function datetrunc — datetrunc","text":"Truncate specified precision.","code":""},{"path":"https://cynkra.github.io/dd/reference/datetrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function datetrunc — datetrunc","text":"part VARCHAR timestamp DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/datetrunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function datetrunc — datetrunc","text":"TIMESTAMP | INTERVAL | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/datetrunc.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function datetrunc — datetrunc","text":"datetrunc(part = VARCHAR, timestamp = DATE) datetrunc(part = VARCHAR, timestamp = INTERVAL) datetrunc(part = VARCHAR, timestamp = TIMESTAMP) datetrunc(part = VARCHAR, timestamp = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/datetrunc.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function datetrunc — datetrunc","text":"","code":"datetrunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"},{"path":"https://cynkra.github.io/dd/reference/day.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function day — day","title":"DuckDB function day — day","text":"Extract day component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function day — day","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function day — day","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/day.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function day — day","text":"day(ts = DATE) day(ts = INTERVAL) day(ts = TIMESTAMP) day(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/day.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function day — day","text":"","code":"day(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/dayname.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function dayname — dayname","title":"DuckDB function dayname — dayname","text":"(English) name weekday.","code":""},{"path":"https://cynkra.github.io/dd/reference/dayname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function dayname — dayname","text":"ts DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/dayname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function dayname — dayname","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/dayname.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function dayname — dayname","text":"dayname(ts = DATE) dayname(ts = TIMESTAMP) dayname(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/dayname.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function dayname — dayname","text":"","code":"dayname(TIMESTAMP '1992-03-22')"},{"path":"https://cynkra.github.io/dd/reference/dayofmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function dayofmonth — dayofmonth","title":"DuckDB function dayofmonth — dayofmonth","text":"Extract dayofmonth component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function dayofmonth — dayofmonth","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function dayofmonth — dayofmonth","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofmonth.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function dayofmonth — dayofmonth","text":"dayofmonth(ts = DATE) dayofmonth(ts = INTERVAL) dayofmonth(ts = TIMESTAMP) dayofmonth(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofmonth.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function dayofmonth — dayofmonth","text":"","code":"dayofmonth(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/dayofweek.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function dayofweek — dayofweek","title":"DuckDB function dayofweek — dayofweek","text":"Extract dayofweek component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function dayofweek — dayofweek","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function dayofweek — dayofweek","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofweek.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function dayofweek — dayofweek","text":"dayofweek(ts = DATE) dayofweek(ts = INTERVAL) dayofweek(ts = TIMESTAMP) dayofweek(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofweek.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function dayofweek — dayofweek","text":"","code":"dayofweek(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/dayofyear.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function dayofyear — dayofyear","title":"DuckDB function dayofyear — dayofyear","text":"Extract dayofyear component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function dayofyear — dayofyear","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function dayofyear — dayofyear","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofyear.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function dayofyear — dayofyear","text":"dayofyear(ts = DATE) dayofyear(ts = INTERVAL) dayofyear(ts = TIMESTAMP) dayofyear(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/dayofyear.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function dayofyear — dayofyear","text":"","code":"dayofyear(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/dd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dd: Functions Provided by DuckDB — dd-package","title":"dd: Functions Provided by DuckDB — dd-package","text":"Lists DuckDB functions integration R's help system.","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/dd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dd: Functions Provided by DuckDB — dd-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) contributors: cynkra GmbH mail@cynkra.com (ROR) [funder, copyright holder]","code":""},{"path":"https://cynkra.github.io/dd/reference/dd.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB functions — dd","title":"DuckDB functions — dd","text":"list known DuckDB functions.","code":""},{"path":"https://cynkra.github.io/dd/reference/dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB functions — dd","text":"","code":"dd"},{"path":"https://cynkra.github.io/dd/reference/dd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DuckDB functions — dd","text":"object class list length 689.","code":""},{"path":"https://cynkra.github.io/dd/reference/dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DuckDB functions — dd","text":"","code":"dd[1:3] #> $`!__postfix` #> function(x = INTEGER) { #>   stop(\"DuckDB function !__postfix() is not available in R.\") #> } #> <bytecode: 0x55c03ccb4be8> #> <environment: namespace:dd> #>  #> $`!~~` #> function(col0 = VARCHAR, col1 = VARCHAR) { #>   stop(\"DuckDB function !~~() is not available in R.\") #> } #> <bytecode: 0x55c03ccb2d38> #> <environment: namespace:dd> #>  #> $`!~~*` #> function(col0 = VARCHAR, col1 = VARCHAR) { #>   stop(\"DuckDB function !~~*() is not available in R.\") #> } #> <bytecode: 0x55c03cddfa58> #> <environment: namespace:dd> #>"},{"path":"https://cynkra.github.io/dd/reference/decade.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function decade — decade","title":"DuckDB function decade — decade","text":"Extract decade component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/decade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function decade — decade","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/decade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function decade — decade","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/decade.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function decade — decade","text":"decade(ts = DATE) decade(ts = INTERVAL) decade(ts = TIMESTAMP) decade(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/decade.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function decade — decade","text":"","code":"decade(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/decode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function decode — decode","title":"DuckDB function decode — decode","text":"Converts blob VARCHAR. Fails blob valid UTF-8.","code":""},{"path":"https://cynkra.github.io/dd/reference/decode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function decode — decode","text":"","code":"decode(blob = BLOB)"},{"path":"https://cynkra.github.io/dd/reference/decode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function decode — decode","text":"blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/decode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function decode — decode","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/decode.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function decode — decode","text":"","code":"decode('\\xC3\\xBC'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function degrees — degrees","title":"DuckDB function degrees — degrees","text":"Converts radians degrees.","code":""},{"path":"https://cynkra.github.io/dd/reference/degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function degrees — degrees","text":"","code":"degrees(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function degrees — degrees","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function degrees — degrees","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/degrees.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function degrees — degrees","text":"","code":"degrees(pi())"},{"path":"https://cynkra.github.io/dd/reference/disable_checkpoint_on_shutdown.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_checkpoint_on_shutdown — disable_checkpoint_on_shutdown","title":"DuckDB function disable_checkpoint_on_shutdown — disable_checkpoint_on_shutdown","text":"DuckDB function disable_checkpoint_on_shutdown().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_checkpoint_on_shutdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_checkpoint_on_shutdown — disable_checkpoint_on_shutdown","text":"","code":"disable_checkpoint_on_shutdown()"},{"path":"https://cynkra.github.io/dd/reference/disable_checkpoint_on_shutdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_checkpoint_on_shutdown — disable_checkpoint_on_shutdown","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_logging — disable_logging","title":"DuckDB function disable_logging — disable_logging","text":"DuckDB function disable_logging().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_logging — disable_logging","text":"","code":"disable_logging()"},{"path":"https://cynkra.github.io/dd/reference/disable_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_logging — disable_logging","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_object_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_object_cache — disable_object_cache","title":"DuckDB function disable_object_cache — disable_object_cache","text":"DuckDB function disable_object_cache().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_object_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_object_cache — disable_object_cache","text":"","code":"disable_object_cache()"},{"path":"https://cynkra.github.io/dd/reference/disable_object_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_object_cache — disable_object_cache","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_optimizer — disable_optimizer","title":"DuckDB function disable_optimizer — disable_optimizer","text":"DuckDB function disable_optimizer().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_optimizer — disable_optimizer","text":"","code":"disable_optimizer()"},{"path":"https://cynkra.github.io/dd/reference/disable_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_optimizer — disable_optimizer","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_print_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_print_progress_bar — disable_print_progress_bar","title":"DuckDB function disable_print_progress_bar — disable_print_progress_bar","text":"DuckDB function disable_print_progress_bar().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_print_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_print_progress_bar — disable_print_progress_bar","text":"","code":"disable_print_progress_bar()"},{"path":"https://cynkra.github.io/dd/reference/disable_print_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_print_progress_bar — disable_print_progress_bar","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_profile — disable_profile","title":"DuckDB function disable_profile — disable_profile","text":"DuckDB function disable_profile().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_profile — disable_profile","text":"","code":"disable_profile()"},{"path":"https://cynkra.github.io/dd/reference/disable_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_profile — disable_profile","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_profiling.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_profiling — disable_profiling","title":"DuckDB function disable_profiling — disable_profiling","text":"DuckDB function disable_profiling().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_profiling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_profiling — disable_profiling","text":"","code":"disable_profiling()"},{"path":"https://cynkra.github.io/dd/reference/disable_profiling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_profiling — disable_profiling","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_progress_bar — disable_progress_bar","title":"DuckDB function disable_progress_bar — disable_progress_bar","text":"DuckDB function disable_progress_bar().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_progress_bar — disable_progress_bar","text":"","code":"disable_progress_bar()"},{"path":"https://cynkra.github.io/dd/reference/disable_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_progress_bar — disable_progress_bar","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verification.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_verification — disable_verification","title":"DuckDB function disable_verification — disable_verification","text":"DuckDB function disable_verification().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_verification — disable_verification","text":"","code":"disable_verification()"},{"path":"https://cynkra.github.io/dd/reference/disable_verification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_verification — disable_verification","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_external.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_verify_external — disable_verify_external","title":"DuckDB function disable_verify_external — disable_verify_external","text":"DuckDB function disable_verify_external().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_verify_external — disable_verify_external","text":"","code":"disable_verify_external()"},{"path":"https://cynkra.github.io/dd/reference/disable_verify_external.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_verify_external — disable_verify_external","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_fetch_row.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_verify_fetch_row — disable_verify_fetch_row","title":"DuckDB function disable_verify_fetch_row — disable_verify_fetch_row","text":"DuckDB function disable_verify_fetch_row().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_fetch_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_verify_fetch_row — disable_verify_fetch_row","text":"","code":"disable_verify_fetch_row()"},{"path":"https://cynkra.github.io/dd/reference/disable_verify_fetch_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_verify_fetch_row — disable_verify_fetch_row","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_parallelism.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_verify_parallelism — disable_verify_parallelism","title":"DuckDB function disable_verify_parallelism — disable_verify_parallelism","text":"DuckDB function disable_verify_parallelism().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_parallelism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_verify_parallelism — disable_verify_parallelism","text":"","code":"disable_verify_parallelism()"},{"path":"https://cynkra.github.io/dd/reference/disable_verify_parallelism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_verify_parallelism — disable_verify_parallelism","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function disable_verify_serializer — disable_verify_serializer","title":"DuckDB function disable_verify_serializer — disable_verify_serializer","text":"DuckDB function disable_verify_serializer().","code":""},{"path":"https://cynkra.github.io/dd/reference/disable_verify_serializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function disable_verify_serializer — disable_verify_serializer","text":"","code":"disable_verify_serializer()"},{"path":"https://cynkra.github.io/dd/reference/disable_verify_serializer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function disable_verify_serializer — disable_verify_serializer","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/divide.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function divide — divide","title":"DuckDB function divide — divide","text":"DuckDB function divide().","code":""},{"path":"https://cynkra.github.io/dd/reference/divide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function divide — divide","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/divide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function divide — divide","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/divide.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function divide — divide","text":"divide(col0 = TINYINT, col1 = TINYINT) divide(col0 = SMALLINT, col1 = SMALLINT) divide(col0 = INTEGER, col1 = INTEGER) divide(col0 = BIGINT, col1 = BIGINT) divide(col0 = HUGEINT, col1 = HUGEINT) divide(col0 = FLOAT, col1 = FLOAT) divide(col0 = DOUBLE, col1 = DOUBLE) divide(col0 = UTINYINT, col1 = UTINYINT) divide(col0 = USMALLINT, col1 = USMALLINT) divide(col0 = UINTEGER, col1 = UINTEGER) divide(col0 = UBIGINT, col1 = UBIGINT) divide(col0 = UHUGEINT, col1 = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_approx_database_count.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_approx_database_count — duckdb_approx_database_count","title":"DuckDB function duckdb_approx_database_count — duckdb_approx_database_count","text":"DuckDB function duckdb_approx_database_count().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_approx_database_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_approx_database_count — duckdb_approx_database_count","text":"","code":"duckdb_approx_database_count()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_approx_database_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_approx_database_count — duckdb_approx_database_count","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_columns — duckdb_columns","title":"DuckDB function duckdb_columns — duckdb_columns","text":"DuckDB function duckdb_columns().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_columns — duckdb_columns","text":"","code":"duckdb_columns()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_columns — duckdb_columns","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_constraints — duckdb_constraints","title":"DuckDB function duckdb_constraints — duckdb_constraints","text":"DuckDB function duckdb_constraints().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_constraints — duckdb_constraints","text":"","code":"duckdb_constraints()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_constraints — duckdb_constraints","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_databases — duckdb_databases","title":"DuckDB function duckdb_databases — duckdb_databases","text":"DuckDB function duckdb_databases().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_databases — duckdb_databases","text":"","code":"duckdb_databases()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_databases — duckdb_databases","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_dependencies — duckdb_dependencies","title":"DuckDB function duckdb_dependencies — duckdb_dependencies","text":"DuckDB function duckdb_dependencies().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_dependencies — duckdb_dependencies","text":"","code":"duckdb_dependencies()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_dependencies — duckdb_dependencies","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_extensions.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_extensions — duckdb_extensions","title":"DuckDB function duckdb_extensions — duckdb_extensions","text":"DuckDB function duckdb_extensions().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_extensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_extensions — duckdb_extensions","text":"","code":"duckdb_extensions()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_extensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_extensions — duckdb_extensions","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_external_file_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_external_file_cache — duckdb_external_file_cache","title":"DuckDB function duckdb_external_file_cache — duckdb_external_file_cache","text":"DuckDB function duckdb_external_file_cache().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_external_file_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_external_file_cache — duckdb_external_file_cache","text":"","code":"duckdb_external_file_cache()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_external_file_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_external_file_cache — duckdb_external_file_cache","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_functions — duckdb_functions","title":"DuckDB function duckdb_functions — duckdb_functions","text":"DuckDB function duckdb_functions().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_functions — duckdb_functions","text":"","code":"duckdb_functions()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_functions — duckdb_functions","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_indexes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_indexes — duckdb_indexes","title":"DuckDB function duckdb_indexes — duckdb_indexes","text":"DuckDB function duckdb_indexes().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_indexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_indexes — duckdb_indexes","text":"","code":"duckdb_indexes()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_indexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_indexes — duckdb_indexes","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_keywords — duckdb_keywords","title":"DuckDB function duckdb_keywords — duckdb_keywords","text":"DuckDB function duckdb_keywords().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_keywords — duckdb_keywords","text":"","code":"duckdb_keywords()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_keywords — duckdb_keywords","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_log_contexts.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_log_contexts — duckdb_log_contexts","title":"DuckDB function duckdb_log_contexts — duckdb_log_contexts","text":"DuckDB function duckdb_log_contexts().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_log_contexts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_log_contexts — duckdb_log_contexts","text":"","code":"duckdb_log_contexts()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_log_contexts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_log_contexts — duckdb_log_contexts","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_logs — duckdb_logs","title":"DuckDB function duckdb_logs — duckdb_logs","text":"DuckDB function duckdb_logs().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_logs — duckdb_logs","text":"","code":"duckdb_logs(denormalized_table = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function duckdb_logs — duckdb_logs","text":"denormalized_table BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_logs — duckdb_logs","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs_parsed.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_logs_parsed — duckdb_logs_parsed","title":"DuckDB function duckdb_logs_parsed — duckdb_logs_parsed","text":"DuckDB macro duckdb_logs_parsed().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs_parsed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_logs_parsed — duckdb_logs_parsed","text":"","code":"duckdb_logs_parsed(log_type)"},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs_parsed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function duckdb_logs_parsed — duckdb_logs_parsed","text":"log_type Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_logs_parsed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_logs_parsed — duckdb_logs_parsed","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_memory.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_memory — duckdb_memory","title":"DuckDB function duckdb_memory — duckdb_memory","text":"DuckDB function duckdb_memory().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_memory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_memory — duckdb_memory","text":"","code":"duckdb_memory()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_memory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_memory — duckdb_memory","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_optimizers.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_optimizers — duckdb_optimizers","title":"DuckDB function duckdb_optimizers — duckdb_optimizers","text":"DuckDB function duckdb_optimizers().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_optimizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_optimizers — duckdb_optimizers","text":"","code":"duckdb_optimizers()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_optimizers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_optimizers — duckdb_optimizers","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_prepared_statements.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_prepared_statements — duckdb_prepared_statements","title":"DuckDB function duckdb_prepared_statements — duckdb_prepared_statements","text":"DuckDB function duckdb_prepared_statements().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_prepared_statements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_prepared_statements — duckdb_prepared_statements","text":"","code":"duckdb_prepared_statements()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_prepared_statements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_prepared_statements — duckdb_prepared_statements","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_schemas.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_schemas — duckdb_schemas","title":"DuckDB function duckdb_schemas — duckdb_schemas","text":"DuckDB function duckdb_schemas().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_schemas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_schemas — duckdb_schemas","text":"","code":"duckdb_schemas()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_schemas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_schemas — duckdb_schemas","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_secret_types.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_secret_types — duckdb_secret_types","title":"DuckDB function duckdb_secret_types — duckdb_secret_types","text":"DuckDB function duckdb_secret_types().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_secret_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_secret_types — duckdb_secret_types","text":"","code":"duckdb_secret_types()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_secret_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_secret_types — duckdb_secret_types","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_secrets.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_secrets — duckdb_secrets","title":"DuckDB function duckdb_secrets — duckdb_secrets","text":"DuckDB function duckdb_secrets().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_secrets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_secrets — duckdb_secrets","text":"","code":"duckdb_secrets(redact = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/duckdb_secrets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function duckdb_secrets — duckdb_secrets","text":"redact BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_secrets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_secrets — duckdb_secrets","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_sequences — duckdb_sequences","title":"DuckDB function duckdb_sequences — duckdb_sequences","text":"DuckDB function duckdb_sequences().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_sequences — duckdb_sequences","text":"","code":"duckdb_sequences()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_sequences — duckdb_sequences","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_settings — duckdb_settings","title":"DuckDB function duckdb_settings — duckdb_settings","text":"DuckDB function duckdb_settings().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_settings — duckdb_settings","text":"","code":"duckdb_settings()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_settings — duckdb_settings","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_table_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_table_sample — duckdb_table_sample","title":"DuckDB function duckdb_table_sample — duckdb_table_sample","text":"DuckDB function duckdb_table_sample().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_table_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_table_sample — duckdb_table_sample","text":"","code":"duckdb_table_sample(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/duckdb_table_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function duckdb_table_sample — duckdb_table_sample","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_table_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_table_sample — duckdb_table_sample","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_tables — duckdb_tables","title":"DuckDB function duckdb_tables — duckdb_tables","text":"DuckDB function duckdb_tables().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_tables — duckdb_tables","text":"","code":"duckdb_tables()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_tables — duckdb_tables","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_temporary_files.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_temporary_files — duckdb_temporary_files","title":"DuckDB function duckdb_temporary_files — duckdb_temporary_files","text":"DuckDB function duckdb_temporary_files().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_temporary_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_temporary_files — duckdb_temporary_files","text":"","code":"duckdb_temporary_files()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_temporary_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_temporary_files — duckdb_temporary_files","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_types.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_types — duckdb_types","title":"DuckDB function duckdb_types — duckdb_types","text":"DuckDB function duckdb_types().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_types — duckdb_types","text":"","code":"duckdb_types()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_types — duckdb_types","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_variables — duckdb_variables","title":"DuckDB function duckdb_variables — duckdb_variables","text":"DuckDB function duckdb_variables().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_variables — duckdb_variables","text":"","code":"duckdb_variables()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_variables — duckdb_variables","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_views.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function duckdb_views — duckdb_views","title":"DuckDB function duckdb_views — duckdb_views","text":"DuckDB function duckdb_views().","code":""},{"path":"https://cynkra.github.io/dd/reference/duckdb_views.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function duckdb_views — duckdb_views","text":"","code":"duckdb_views()"},{"path":"https://cynkra.github.io/dd/reference/duckdb_views.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function duckdb_views — duckdb_views","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/editdist3.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function editdist3 — editdist3","title":"DuckDB function editdist3 — editdist3","text":"minimum number single-character edits (insertions, deletions substitutions) required change one string . Characters different cases (e.g., ) considered different.","code":""},{"path":"https://cynkra.github.io/dd/reference/editdist3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function editdist3 — editdist3","text":"","code":"editdist3(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/editdist3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function editdist3 — editdist3","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/editdist3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function editdist3 — editdist3","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/editdist3.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function editdist3 — editdist3","text":"","code":"editdist3('duck', 'db')"},{"path":"https://cynkra.github.io/dd/reference/element_at.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function element_at — element_at","title":"DuckDB function element_at — element_at","text":"Returns list containing value given key empty list key contained map. type key provided second parameter must match type map’s keys else error returned.","code":""},{"path":"https://cynkra.github.io/dd/reference/element_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function element_at — element_at","text":"","code":"element_at(map = `MAP(K, V)`, key = K)"},{"path":"https://cynkra.github.io/dd/reference/element_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function element_at — element_at","text":"map MAP(K, V) key K","code":""},{"path":"https://cynkra.github.io/dd/reference/element_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function element_at — element_at","text":"V[]","code":""},{"path":"https://cynkra.github.io/dd/reference/element_at.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function element_at — element_at","text":"","code":"element_at(map(['key'], ['val']), 'key')"},{"path":"https://cynkra.github.io/dd/reference/enable_checkpoint_on_shutdown.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_checkpoint_on_shutdown — enable_checkpoint_on_shutdown","title":"DuckDB function enable_checkpoint_on_shutdown — enable_checkpoint_on_shutdown","text":"DuckDB function enable_checkpoint_on_shutdown().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_checkpoint_on_shutdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_checkpoint_on_shutdown — enable_checkpoint_on_shutdown","text":"","code":"enable_checkpoint_on_shutdown()"},{"path":"https://cynkra.github.io/dd/reference/enable_checkpoint_on_shutdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_checkpoint_on_shutdown — enable_checkpoint_on_shutdown","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_object_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_object_cache — enable_object_cache","title":"DuckDB function enable_object_cache — enable_object_cache","text":"DuckDB function enable_object_cache().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_object_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_object_cache — enable_object_cache","text":"","code":"enable_object_cache()"},{"path":"https://cynkra.github.io/dd/reference/enable_object_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_object_cache — enable_object_cache","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_optimizer — enable_optimizer","title":"DuckDB function enable_optimizer — enable_optimizer","text":"DuckDB function enable_optimizer().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_optimizer — enable_optimizer","text":"","code":"enable_optimizer()"},{"path":"https://cynkra.github.io/dd/reference/enable_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_optimizer — enable_optimizer","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_print_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_print_progress_bar — enable_print_progress_bar","title":"DuckDB function enable_print_progress_bar — enable_print_progress_bar","text":"DuckDB function enable_print_progress_bar().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_print_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_print_progress_bar — enable_print_progress_bar","text":"","code":"enable_print_progress_bar()"},{"path":"https://cynkra.github.io/dd/reference/enable_print_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_print_progress_bar — enable_print_progress_bar","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_profile — enable_profile","title":"DuckDB function enable_profile — enable_profile","text":"DuckDB function enable_profile().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_profile — enable_profile","text":"","code":"enable_profile()"},{"path":"https://cynkra.github.io/dd/reference/enable_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_profile — enable_profile","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_profiling.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_profiling — enable_profiling","title":"DuckDB function enable_profiling — enable_profiling","text":"DuckDB function enable_profiling().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_profiling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_profiling — enable_profiling","text":"","code":"enable_profiling()"},{"path":"https://cynkra.github.io/dd/reference/enable_profiling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_profiling — enable_profiling","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_progress_bar — enable_progress_bar","title":"DuckDB function enable_progress_bar — enable_progress_bar","text":"DuckDB function enable_progress_bar().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_progress_bar — enable_progress_bar","text":"","code":"enable_progress_bar()"},{"path":"https://cynkra.github.io/dd/reference/enable_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_progress_bar — enable_progress_bar","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_verification.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enable_verification — enable_verification","title":"DuckDB function enable_verification — enable_verification","text":"DuckDB function enable_verification().","code":""},{"path":"https://cynkra.github.io/dd/reference/enable_verification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enable_verification — enable_verification","text":"","code":"enable_verification()"},{"path":"https://cynkra.github.io/dd/reference/enable_verification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enable_verification — enable_verification","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/encode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function encode — encode","title":"DuckDB function encode — encode","text":"Converts string BLOB. Converts UTF-8 characters literal encoding.","code":""},{"path":"https://cynkra.github.io/dd/reference/encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function encode — encode","text":"","code":"encode(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function encode — encode","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function encode — encode","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/encode.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function encode — encode","text":"","code":"encode('my_string_with_ü')"},{"path":"https://cynkra.github.io/dd/reference/ends_with.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ends_with — ends_with","title":"DuckDB function ends_with — ends_with","text":"Returns true string ends search_string.","code":""},{"path":"https://cynkra.github.io/dd/reference/ends_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ends_with — ends_with","text":"","code":"ends_with(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/ends_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ends_with — ends_with","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ends_with.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ends_with — ends_with","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/ends_with.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ends_with — ends_with","text":"","code":"ends_with('abc', 'bc')"},{"path":"https://cynkra.github.io/dd/reference/entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function entropy — entropy","title":"DuckDB function entropy — entropy","text":"Returns log-2 entropy count input-values.","code":""},{"path":"https://cynkra.github.io/dd/reference/entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function entropy — entropy","text":"","code":"entropy(x = ANY)"},{"path":"https://cynkra.github.io/dd/reference/entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function entropy — entropy","text":"x ","code":""},{"path":"https://cynkra.github.io/dd/reference/entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function entropy — entropy","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_code.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_code — enum_code","title":"DuckDB function enum_code — enum_code","text":"Returns numeric value backing given enum value.","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enum_code — enum_code","text":"","code":"enum_code(enum = ANY)"},{"path":"https://cynkra.github.io/dd/reference/enum_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_code — enum_code","text":"enum ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/enum_code.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function enum_code — enum_code","text":"","code":"enum_code('happy'::mood)"},{"path":"https://cynkra.github.io/dd/reference/enum_first.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_first — enum_first","title":"DuckDB function enum_first — enum_first","text":"Returns first value input enum type.","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enum_first — enum_first","text":"","code":"enum_first(enum = ANY)"},{"path":"https://cynkra.github.io/dd/reference/enum_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_first — enum_first","text":"enum ","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enum_first — enum_first","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_first.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function enum_first — enum_first","text":"","code":"enum_first(NULL::mood)"},{"path":"https://cynkra.github.io/dd/reference/enum_last.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_last — enum_last","title":"DuckDB function enum_last — enum_last","text":"Returns last value input enum type.","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_last.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enum_last — enum_last","text":"","code":"enum_last(enum = ANY)"},{"path":"https://cynkra.github.io/dd/reference/enum_last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_last — enum_last","text":"enum ","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enum_last — enum_last","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_last.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function enum_last — enum_last","text":"","code":"enum_last(NULL::mood)"},{"path":"https://cynkra.github.io/dd/reference/enum_range.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_range — enum_range","title":"DuckDB function enum_range — enum_range","text":"Returns values input enum type array.","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enum_range — enum_range","text":"","code":"enum_range(enum = ANY)"},{"path":"https://cynkra.github.io/dd/reference/enum_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_range — enum_range","text":"enum ","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enum_range — enum_range","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function enum_range — enum_range","text":"","code":"enum_range(NULL::mood)"},{"path":"https://cynkra.github.io/dd/reference/enum_range_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function enum_range_boundary — enum_range_boundary","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"Returns range two given enum values array. values must enum type. first parameter NULL, result starts first value enum type. second parameter NULL, result ends last value enum type.","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"","code":"enum_range_boundary(start = ANY, end = ANY)"},{"path":"https://cynkra.github.io/dd/reference/enum_range_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"start end ","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/enum_range_boundary.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function enum_range_boundary — enum_range_boundary","text":"","code":"enum_range_boundary(NULL, 'happy'::mood)"},{"path":"https://cynkra.github.io/dd/reference/epoch.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function epoch — epoch","title":"DuckDB function epoch — epoch","text":"Extract epoch component temporal type.","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function epoch — epoch","text":"temporal DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function epoch — epoch","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function epoch — epoch","text":"epoch(temporal = DATE) epoch(temporal = INTERVAL) epoch(temporal = TIME) epoch(temporal = TIMESTAMP) epoch(temporal = `TIME TIME ZONE`) epoch(temporal = TIME_NS) epoch(temporal = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function epoch — epoch","text":"","code":"epoch(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/epoch_ms.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function epoch_ms — epoch_ms","title":"DuckDB function epoch_ms — epoch_ms","text":"Extract epoch component milliseconds temporal type.","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function epoch_ms — epoch_ms","text":"temporal DATE | TIMESTAMP | INTERVAL | TIME | TIME_NS | TIME TIME ZONE | TIMESTAMP TIME ZONE | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function epoch_ms — epoch_ms","text":"BIGINT | TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ms.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function epoch_ms — epoch_ms","text":"epoch_ms(temporal = DATE) epoch_ms(temporal = TIMESTAMP) epoch_ms(temporal = INTERVAL) epoch_ms(temporal = TIME) epoch_ms(temporal = TIME_NS) epoch_ms(temporal = `TIME TIME ZONE`) epoch_ms(temporal = `TIMESTAMP TIME ZONE`) epoch_ms(temporal = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ms.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function epoch_ms — epoch_ms","text":"","code":"epoch_ms(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/epoch_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function epoch_ns — epoch_ns","title":"DuckDB function epoch_ns — epoch_ns","text":"Extract epoch component nanoseconds temporal type.","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function epoch_ns — epoch_ns","text":"temporal DATE | TIMESTAMP | INTERVAL | TIME | TIME_NS | TIME TIME ZONE | TIMESTAMP TIME ZONE | TIMESTAMP_NS","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function epoch_ns — epoch_ns","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ns.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function epoch_ns — epoch_ns","text":"epoch_ns(temporal = DATE) epoch_ns(temporal = TIMESTAMP) epoch_ns(temporal = INTERVAL) epoch_ns(temporal = TIME) epoch_ns(temporal = TIME_NS) epoch_ns(temporal = `TIME TIME ZONE`) epoch_ns(temporal = `TIMESTAMP TIME ZONE`) epoch_ns(temporal = TIMESTAMP_NS)","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_ns.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function epoch_ns — epoch_ns","text":"","code":"epoch_ns(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/epoch_us.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function epoch_us — epoch_us","title":"DuckDB function epoch_us — epoch_us","text":"Extract epoch component microseconds temporal type.","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_us.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function epoch_us — epoch_us","text":"temporal DATE | TIMESTAMP | INTERVAL | TIME | TIME_NS | TIME TIME ZONE | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_us.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function epoch_us — epoch_us","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_us.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function epoch_us — epoch_us","text":"epoch_us(temporal = DATE) epoch_us(temporal = TIMESTAMP) epoch_us(temporal = INTERVAL) epoch_us(temporal = TIME) epoch_us(temporal = TIME_NS) epoch_us(temporal = `TIME TIME ZONE`) epoch_us(temporal = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/epoch_us.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function epoch_us — epoch_us","text":"","code":"epoch_us(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/equi_width_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function equi_width_bins — equi_width_bins","title":"DuckDB function equi_width_bins — equi_width_bins","text":"Generates bin_count equi-width bins min max. enabled nice_rounding makes numbers readable/less jagged.","code":""},{"path":"https://cynkra.github.io/dd/reference/equi_width_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function equi_width_bins — equi_width_bins","text":"min BIGINT | DOUBLE | TIMESTAMP | max BIGINT | DOUBLE | TIMESTAMP | bin_count BIGINT nice_rounding BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/equi_width_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function equi_width_bins — equi_width_bins","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/equi_width_bins.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function equi_width_bins — equi_width_bins","text":"equi_width_bins(min = BIGINT, max = BIGINT, bin_count = BIGINT, nice_rounding = BOOLEAN) equi_width_bins(min = DOUBLE, max = DOUBLE, bin_count = BIGINT, nice_rounding = BOOLEAN) equi_width_bins(min = TIMESTAMP, max = TIMESTAMP, bin_count = BIGINT, nice_rounding = BOOLEAN) equi_width_bins(min = , max = , bin_count = BIGINT, nice_rounding = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/equi_width_bins.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function equi_width_bins — equi_width_bins","text":"","code":"equi_width_bins(0, 10, 2, true)"},{"path":"https://cynkra.github.io/dd/reference/era.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function era — era","title":"DuckDB function era — era","text":"Extract era component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/era.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function era — era","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/era.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function era — era","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/era.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function era — era","text":"era(ts = DATE) era(ts = INTERVAL) era(ts = TIMESTAMP) era(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/era.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function era — era","text":"","code":"era(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/error.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function error — error","title":"DuckDB function error — error","text":"Throws given error message.","code":""},{"path":"https://cynkra.github.io/dd/reference/error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function error — error","text":"","code":"error(message = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function error — error","text":"message VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function error — error","text":"\"NULL\"","code":""},{"path":"https://cynkra.github.io/dd/reference/error.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function error — error","text":"","code":"error('access_mode')"},{"path":"https://cynkra.github.io/dd/reference/even.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function even — even","title":"DuckDB function even — even","text":"Rounds x next even number rounding away zero.","code":""},{"path":"https://cynkra.github.io/dd/reference/even.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function even — even","text":"","code":"even(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function even — even","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/even.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function even — even","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/even.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function even — even","text":"","code":"even(2.9)"},{"path":"https://cynkra.github.io/dd/reference/exp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function exp — exp","title":"DuckDB function exp — exp","text":"Computes e power x.","code":""},{"path":"https://cynkra.github.io/dd/reference/exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function exp — exp","text":"","code":"exp(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function exp — exp","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function exp — exp","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/exp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function exp — exp","text":"","code":"exp(1)"},{"path":"https://cynkra.github.io/dd/reference/extension_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function extension_versions — extension_versions","title":"DuckDB function extension_versions — extension_versions","text":"DuckDB function extension_versions().","code":""},{"path":"https://cynkra.github.io/dd/reference/extension_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function extension_versions — extension_versions","text":"","code":"extension_versions()"},{"path":"https://cynkra.github.io/dd/reference/extension_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function extension_versions — extension_versions","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/factorial.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function factorial — factorial","title":"DuckDB function factorial — factorial","text":"Factorial x. Computes product current integer integers .","code":""},{"path":"https://cynkra.github.io/dd/reference/factorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function factorial — factorial","text":"","code":"factorial(x = INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/factorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function factorial — factorial","text":"x INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/factorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function factorial — factorial","text":"HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/factorial.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function factorial — factorial","text":"","code":"4!"},{"path":"https://cynkra.github.io/dd/reference/favg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function favg — favg","title":"DuckDB function favg — favg","text":"Calculates average using accurate floating point summation (Kahan Sum).","code":""},{"path":"https://cynkra.github.io/dd/reference/favg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function favg — favg","text":"","code":"favg(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/favg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function favg — favg","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/favg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function favg — favg","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/favg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function favg — favg","text":"","code":"favg(A)"},{"path":"https://cynkra.github.io/dd/reference/fdiv.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function fdiv — fdiv","title":"DuckDB function fdiv — fdiv","text":"DuckDB macro fdiv().","code":""},{"path":"https://cynkra.github.io/dd/reference/fdiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function fdiv — fdiv","text":"","code":"fdiv(x, y)"},{"path":"https://cynkra.github.io/dd/reference/fdiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function fdiv — fdiv","text":"x Unspecified. y Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/fdiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function fdiv — fdiv","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function filter — filter","title":"DuckDB function filter — filter","text":"Constructs list elements input list lambda function returns true. DuckDB must able cast lambda function's return type BOOL. return type list_filter input list's.","code":""},{"path":"https://cynkra.github.io/dd/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function filter — filter","text":"","code":"filter(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function filter — filter","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function filter — filter","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/filter.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function filter — filter","text":"","code":"filter([3, 4, 5], lambda x : x > 4)"},{"path":"https://cynkra.github.io/dd/reference/finalize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function finalize — finalize","title":"DuckDB function finalize — finalize","text":"DuckDB function finalize().","code":""},{"path":"https://cynkra.github.io/dd/reference/finalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function finalize — finalize","text":"","code":"finalize(col0 = `AGGREGATE_STATE<?>`)"},{"path":"https://cynkra.github.io/dd/reference/finalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function finalize — finalize","text":"col0 AGGREGATE_STATE<?>","code":""},{"path":"https://cynkra.github.io/dd/reference/finalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function finalize — finalize","text":"INVALID","code":""},{"path":"https://cynkra.github.io/dd/reference/first.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function first — first","title":"DuckDB function first — first","text":"Returns first value (NULL non-NULL) arg. function affected ordering.","code":""},{"path":"https://cynkra.github.io/dd/reference/first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function first — first","text":"arg DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function first — first","text":"DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/first.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function first — first","text":"first(arg = DECIMAL) first(arg = )","code":""},{"path":"https://cynkra.github.io/dd/reference/first.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function first — first","text":"","code":"first(A)"},{"path":"https://cynkra.github.io/dd/reference/flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function flatten — flatten","title":"DuckDB function flatten — flatten","text":"Flattens nested list one level.","code":""},{"path":"https://cynkra.github.io/dd/reference/flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function flatten — flatten","text":"","code":"flatten(nested_list = `T[][]`)"},{"path":"https://cynkra.github.io/dd/reference/flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function flatten — flatten","text":"nested_list T[][]","code":""},{"path":"https://cynkra.github.io/dd/reference/flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function flatten — flatten","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/flatten.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function flatten — flatten","text":"","code":"flatten([[1, 2, 3], [4, 5]])"},{"path":"https://cynkra.github.io/dd/reference/floor.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function floor — floor","title":"DuckDB function floor — floor","text":"Rounds number .","code":""},{"path":"https://cynkra.github.io/dd/reference/floor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function floor — floor","text":"x FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/floor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function floor — floor","text":"FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/floor.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function floor — floor","text":"floor(x = FLOAT) floor(x = DOUBLE) floor(x = DECIMAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/floor.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function floor — floor","text":"","code":"floor(17.4)"},{"path":"https://cynkra.github.io/dd/reference/fmod.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function fmod — fmod","title":"DuckDB function fmod — fmod","text":"DuckDB macro fmod().","code":""},{"path":"https://cynkra.github.io/dd/reference/fmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function fmod — fmod","text":"","code":"fmod(x, y)"},{"path":"https://cynkra.github.io/dd/reference/fmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function fmod — fmod","text":"x Unspecified. y Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/fmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function fmod — fmod","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/force_checkpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function force_checkpoint — force_checkpoint","title":"DuckDB function force_checkpoint — force_checkpoint","text":"DuckDB function force_checkpoint().","code":""},{"path":"https://cynkra.github.io/dd/reference/force_checkpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function force_checkpoint — force_checkpoint","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/force_checkpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function force_checkpoint — force_checkpoint","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/force_checkpoint.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function force_checkpoint — force_checkpoint","text":"force_checkpoint() force_checkpoint(col0 = VARCHAR) force_checkpoint()","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableDecimalSize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"Converts integer human-readable representation using units based powers 10 (KB, MB, GB, etc.).","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableDecimalSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"","code":"formatReadableDecimalSize(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/formatReadableDecimalSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableDecimalSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableDecimalSize.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function formatReadableDecimalSize — formatReadableDecimalSize","text":"","code":"formatReadableDecimalSize(16_000)"},{"path":"https://cynkra.github.io/dd/reference/formatReadableSize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function formatReadableSize — formatReadableSize","title":"DuckDB function formatReadableSize — formatReadableSize","text":"Converts integer human-readable representation using units based powers 2 (KiB, MiB, GiB, etc.).","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function formatReadableSize — formatReadableSize","text":"","code":"formatReadableSize(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/formatReadableSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function formatReadableSize — formatReadableSize","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function formatReadableSize — formatReadableSize","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/formatReadableSize.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function formatReadableSize — formatReadableSize","text":"","code":"formatReadableSize(16_000)"},{"path":"https://cynkra.github.io/dd/reference/format_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function format_bytes — format_bytes","title":"DuckDB function format_bytes — format_bytes","text":"Converts integer human-readable representation using units based powers 2 (KiB, MiB, GiB, etc.).","code":""},{"path":"https://cynkra.github.io/dd/reference/format_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function format_bytes — format_bytes","text":"","code":"format_bytes(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/format_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function format_bytes — format_bytes","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/format_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function format_bytes — format_bytes","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/format_bytes.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function format_bytes — format_bytes","text":"","code":"format_bytes(16_000)"},{"path":"https://cynkra.github.io/dd/reference/format_pg_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function format_pg_type — format_pg_type","title":"DuckDB function format_pg_type — format_pg_type","text":"DuckDB macro format_pg_type().","code":""},{"path":"https://cynkra.github.io/dd/reference/format_pg_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function format_pg_type — format_pg_type","text":"","code":"format_pg_type(logical_type, type_name)"},{"path":"https://cynkra.github.io/dd/reference/format_pg_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function format_pg_type — format_pg_type","text":"logical_type Unspecified. type_name Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/format_pg_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function format_pg_type — format_pg_type","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/format_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function format_type — format_type","title":"DuckDB function format_type — format_type","text":"DuckDB macro format_type().","code":""},{"path":"https://cynkra.github.io/dd/reference/format_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function format_type — format_type","text":"","code":"format_type(type_oid, typemod)"},{"path":"https://cynkra.github.io/dd/reference/format_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function format_type — format_type","text":"type_oid Unspecified. typemod Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/format_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function format_type — format_type","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/from_base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_base64 — from_base64","title":"DuckDB function from_base64 — from_base64","text":"Converts base64 encoded string character string (BLOB).","code":""},{"path":"https://cynkra.github.io/dd/reference/from_base64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function from_base64 — from_base64","text":"","code":"from_base64(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/from_base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_base64 — from_base64","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/from_base64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function from_base64 — from_base64","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/from_base64.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function from_base64 — from_base64","text":"","code":"from_base64('QQ==')"},{"path":"https://cynkra.github.io/dd/reference/from_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_binary — from_binary","title":"DuckDB function from_binary — from_binary","text":"Converts value binary representation blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/from_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function from_binary — from_binary","text":"","code":"from_binary(value = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/from_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_binary — from_binary","text":"value VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/from_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function from_binary — from_binary","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/from_binary.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function from_binary — from_binary","text":"","code":"from_binary('0110')"},{"path":"https://cynkra.github.io/dd/reference/from_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function from_hex — from_hex","title":"DuckDB function from_hex — from_hex","text":"Converts value hexadecimal representation blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/from_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function from_hex — from_hex","text":"","code":"from_hex(value = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/from_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function from_hex — from_hex","text":"value VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/from_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function from_hex — from_hex","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/from_hex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function from_hex — from_hex","text":"","code":"from_hex('2A')"},{"path":"https://cynkra.github.io/dd/reference/fsum.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function fsum — fsum","title":"DuckDB function fsum — fsum","text":"Calculates sum using accurate floating point summation (Kahan Sum).","code":""},{"path":"https://cynkra.github.io/dd/reference/fsum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function fsum — fsum","text":"","code":"fsum(arg = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/fsum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function fsum — fsum","text":"arg DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/fsum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function fsum — fsum","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/fsum.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function fsum — fsum","text":"","code":"fsum(A)"},{"path":"https://cynkra.github.io/dd/reference/functions.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function functions — functions","title":"DuckDB function functions — functions","text":"DuckDB function functions().","code":""},{"path":"https://cynkra.github.io/dd/reference/functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function functions — functions","text":"","code":"functions()"},{"path":"https://cynkra.github.io/dd/reference/functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function functions — functions","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function gamma — gamma","title":"DuckDB function gamma — gamma","text":"Interpolation (x-1) factorial (decimal inputs allowed).","code":""},{"path":"https://cynkra.github.io/dd/reference/gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function gamma — gamma","text":"","code":"gamma(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function gamma — gamma","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function gamma — gamma","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/gamma.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function gamma — gamma","text":"","code":"gamma(5.5)"},{"path":"https://cynkra.github.io/dd/reference/gcd.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function gcd — gcd","title":"DuckDB function gcd — gcd","text":"Computes greatest common divisor x y.","code":""},{"path":"https://cynkra.github.io/dd/reference/gcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function gcd — gcd","text":"x BIGINT | HUGEINT y BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/gcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function gcd — gcd","text":"BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/gcd.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function gcd — gcd","text":"gcd(x = BIGINT, y = BIGINT) gcd(x = HUGEINT, y = HUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/gcd.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function gcd — gcd","text":"","code":"gcd(42, 57)"},{"path":"https://cynkra.github.io/dd/reference/gen_random_uuid.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function gen_random_uuid — gen_random_uuid","title":"DuckDB function gen_random_uuid — gen_random_uuid","text":"Returns random UUID v4 similar : eeccb8c5-9943-b2bb-bb5e-222f4e14b687.","code":""},{"path":"https://cynkra.github.io/dd/reference/gen_random_uuid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function gen_random_uuid — gen_random_uuid","text":"","code":"gen_random_uuid()"},{"path":"https://cynkra.github.io/dd/reference/gen_random_uuid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function gen_random_uuid — gen_random_uuid","text":"UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/gen_random_uuid.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function gen_random_uuid — gen_random_uuid","text":"","code":"gen_random_uuid()"},{"path":"https://cynkra.github.io/dd/reference/generate_series.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function generate_series — generate_series","title":"DuckDB function generate_series — generate_series","text":"Creates list values start stop - stop parameter inclusive.","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function generate_series — generate_series","text":"col0 BIGINT | TIMESTAMP col1 BIGINT | TIMESTAMP col2 BIGINT | INTERVAL start BIGINT | TIMESTAMP | TIMESTAMP TIME ZONE stop BIGINT | TIMESTAMP | TIMESTAMP TIME ZONE step BIGINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function generate_series — generate_series","text":"BIGINT[] | TIMESTAMP[] | TIMESTAMP TIME ZONE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_series.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function generate_series — generate_series","text":"generate_series(col0 = BIGINT) generate_series(col0 = BIGINT, col1 = BIGINT) generate_series(col0 = BIGINT, col1 = BIGINT, col2 = BIGINT) generate_series(col0 = TIMESTAMP, col1 = TIMESTAMP, col2 = INTERVAL) generate_series(start = BIGINT) generate_series(start = BIGINT, stop = BIGINT) generate_series(start = BIGINT, stop = BIGINT, step = BIGINT) generate_series(start = TIMESTAMP, stop = TIMESTAMP, step = INTERVAL) generate_series(start = `TIMESTAMP TIME ZONE`, stop = `TIMESTAMP TIME ZONE`, step = INTERVAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_series.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function generate_series — generate_series","text":"","code":"generate_series(2, 5, 3)"},{"path":"https://cynkra.github.io/dd/reference/generate_subscripts.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function generate_subscripts — generate_subscripts","title":"DuckDB function generate_subscripts — generate_subscripts","text":"DuckDB macro generate_subscripts().","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_subscripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function generate_subscripts — generate_subscripts","text":"","code":"generate_subscripts(arr, dim)"},{"path":"https://cynkra.github.io/dd/reference/generate_subscripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function generate_subscripts — generate_subscripts","text":"arr Unspecified. dim Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/generate_subscripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function generate_subscripts — generate_subscripts","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/geomean.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function geomean — geomean","title":"DuckDB function geomean — geomean","text":"DuckDB macro geomean().","code":""},{"path":"https://cynkra.github.io/dd/reference/geomean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function geomean — geomean","text":"","code":"geomean(x)"},{"path":"https://cynkra.github.io/dd/reference/geomean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function geomean — geomean","text":"x Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/geomean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function geomean — geomean","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/geometric_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function geometric_mean — geometric_mean","title":"DuckDB function geometric_mean — geometric_mean","text":"DuckDB macro geometric_mean().","code":""},{"path":"https://cynkra.github.io/dd/reference/geometric_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function geometric_mean — geometric_mean","text":"","code":"geometric_mean(x)"},{"path":"https://cynkra.github.io/dd/reference/geometric_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function geometric_mean — geometric_mean","text":"x Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/geometric_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function geometric_mean — geometric_mean","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/get_bit.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function get_bit — get_bit","title":"DuckDB function get_bit — get_bit","text":"Extracts nth bit bitstring; first (leftmost) bit indexed 0.","code":""},{"path":"https://cynkra.github.io/dd/reference/get_bit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function get_bit — get_bit","text":"","code":"get_bit(bitstring = BIT, index = INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/get_bit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function get_bit — get_bit","text":"bitstring BIT index INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/get_bit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function get_bit — get_bit","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/get_bit.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function get_bit — get_bit","text":"","code":"get_bit('0110010'::BIT, 2)"},{"path":"https://cynkra.github.io/dd/reference/get_block_size.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function get_block_size — get_block_size","title":"DuckDB function get_block_size — get_block_size","text":"DuckDB macro get_block_size().","code":""},{"path":"https://cynkra.github.io/dd/reference/get_block_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function get_block_size — get_block_size","text":"","code":"get_block_size(db_name)"},{"path":"https://cynkra.github.io/dd/reference/get_block_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function get_block_size — get_block_size","text":"db_name Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/get_block_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function get_block_size — get_block_size","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/get_current_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function get_current_timestamp — get_current_timestamp","title":"DuckDB function get_current_timestamp — get_current_timestamp","text":"Returns current timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/get_current_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function get_current_timestamp — get_current_timestamp","text":"","code":"get_current_timestamp()"},{"path":"https://cynkra.github.io/dd/reference/get_current_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function get_current_timestamp — get_current_timestamp","text":"TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/get_current_timestamp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function get_current_timestamp — get_current_timestamp","text":"","code":"get_current_timestamp()"},{"path":"https://cynkra.github.io/dd/reference/getvariable.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function getvariable — getvariable","title":"DuckDB function getvariable — getvariable","text":"DuckDB function getvariable().","code":""},{"path":"https://cynkra.github.io/dd/reference/getvariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function getvariable — getvariable","text":"","code":"getvariable(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/getvariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function getvariable — getvariable","text":"col0 VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/glob.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function glob — glob","title":"DuckDB function glob — glob","text":"DuckDB function glob().","code":""},{"path":"https://cynkra.github.io/dd/reference/glob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function glob — glob","text":"col0 VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/glob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function glob — glob","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/glob.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function glob — glob","text":"glob(col0 = VARCHAR) glob(col0 = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/grade_up.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function grade_up — grade_up","title":"DuckDB function grade_up — grade_up","text":"Works like list_sort, results indexes correspond position original list instead actual values.","code":""},{"path":"https://cynkra.github.io/dd/reference/grade_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function grade_up — grade_up","text":"list [] col1 VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/grade_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function grade_up — grade_up","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/grade_up.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function grade_up — grade_up","text":"grade_up(list = `[]`) grade_up(list = `[]`, col1 = VARCHAR) grade_up(list = `[]`, col1 = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/grade_up.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function grade_up — grade_up","text":"","code":"grade_up([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function % — %","title":"DuckDB function % — %","text":"DuckDB function %().","code":""},{"path":"https://cynkra.github.io/dd/reference/grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function % — %","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function % — %","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/greater-than-greater-than.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function >> — >>","title":"DuckDB function >> — >>","text":"Bitwise shift right.","code":""},{"path":"https://cynkra.github.io/dd/reference/greater-than-greater-than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function >> — >>","text":"input TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/greater-than-greater-than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function >> — >>","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/greater-than-greater-than.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function >> — >>","text":"`>>`(input = TINYINT, col1 = TINYINT) `>>`(input = SMALLINT, col1 = SMALLINT) `>>`(input = INTEGER, col1 = INTEGER) `>>`(input = BIGINT, col1 = BIGINT) `>>`(input = HUGEINT, col1 = HUGEINT) `>>`(input = UTINYINT, col1 = UTINYINT) `>>`(input = USMALLINT, col1 = USMALLINT) `>>`(input = UINTEGER, col1 = UINTEGER) `>>`(input = UBIGINT, col1 = UBIGINT) `>>`(input = UHUGEINT, col1 = UHUGEINT) `>>`(input = BIT, col1 = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/greater-than-greater-than.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function >> — >>","text":"","code":"8 >> 2"},{"path":"https://cynkra.github.io/dd/reference/greatest.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function greatest — greatest","title":"DuckDB function greatest — greatest","text":"Returns largest value. strings lexicographical ordering used. Note lowercase characters considered “larger” uppercase characters collations supported.","code":""},{"path":"https://cynkra.github.io/dd/reference/greatest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function greatest — greatest","text":"","code":"greatest(arg1 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/greatest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function greatest — greatest","text":"arg1 ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/greatest.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function greatest — greatest","text":"","code":"greatest(42, 84) greatest('abc', 'bcd', 'cde', 'EFG')"},{"path":"https://cynkra.github.io/dd/reference/greatest_common_divisor.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function greatest_common_divisor — greatest_common_divisor","title":"DuckDB function greatest_common_divisor — greatest_common_divisor","text":"Computes greatest common divisor x y.","code":""},{"path":"https://cynkra.github.io/dd/reference/greatest_common_divisor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function greatest_common_divisor — greatest_common_divisor","text":"x BIGINT | HUGEINT y BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/greatest_common_divisor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function greatest_common_divisor — greatest_common_divisor","text":"BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/greatest_common_divisor.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function greatest_common_divisor — greatest_common_divisor","text":"greatest_common_divisor(x = BIGINT, y = BIGINT) greatest_common_divisor(x = HUGEINT, y = HUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/greatest_common_divisor.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function greatest_common_divisor — greatest_common_divisor","text":"","code":"greatest_common_divisor(42, 57)"},{"path":"https://cynkra.github.io/dd/reference/group_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function group_concat — group_concat","title":"DuckDB function group_concat — group_concat","text":"Concatenates column string values optional separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/group_concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function group_concat — group_concat","text":"str arg VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/group_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function group_concat — group_concat","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/group_concat.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function group_concat — group_concat","text":"group_concat(str = ) group_concat(str = , arg = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/group_concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function group_concat — group_concat","text":"","code":"group_concat(A, '-')"},{"path":"https://cynkra.github.io/dd/reference/hamming.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function hamming — hamming","title":"DuckDB function hamming — hamming","text":"Hamming distance strings, .e., number positions different characters two strings equal length. Strings must equal length. Characters different cases (e.g., ) considered different.","code":""},{"path":"https://cynkra.github.io/dd/reference/hamming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function hamming — hamming","text":"","code":"hamming(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/hamming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function hamming — hamming","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/hamming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function hamming — hamming","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/hamming.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function hamming — hamming","text":"","code":"hamming('duck', 'luck')"},{"path":"https://cynkra.github.io/dd/reference/has_any_column_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_any_column_privilege — has_any_column_privilege","title":"DuckDB function has_any_column_privilege — has_any_column_privilege","text":"DuckDB function has_any_column_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_any_column_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_any_column_privilege — has_any_column_privilege","text":"table Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_any_column_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_any_column_privilege — has_any_column_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_any_column_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_any_column_privilege — has_any_column_privilege","text":"has_any_column_privilege(table, privilege) has_any_column_privilege(user, table, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_column_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_column_privilege — has_column_privilege","title":"DuckDB function has_column_privilege — has_column_privilege","text":"DuckDB function has_column_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_column_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_column_privilege — has_column_privilege","text":"table Unspecified. column Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_column_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_column_privilege — has_column_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_column_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_column_privilege — has_column_privilege","text":"has_column_privilege(table, column, privilege) has_column_privilege(user, table, column, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_database_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_database_privilege — has_database_privilege","title":"DuckDB function has_database_privilege — has_database_privilege","text":"DuckDB function has_database_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_database_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_database_privilege — has_database_privilege","text":"database Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_database_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_database_privilege — has_database_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_database_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_database_privilege — has_database_privilege","text":"has_database_privilege(database, privilege) has_database_privilege(user, database, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_foreign_data_wrapper_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_foreign_data_wrapper_privilege — has_foreign_data_wrapper_privilege","title":"DuckDB function has_foreign_data_wrapper_privilege — has_foreign_data_wrapper_privilege","text":"DuckDB function has_foreign_data_wrapper_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_foreign_data_wrapper_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_foreign_data_wrapper_privilege — has_foreign_data_wrapper_privilege","text":"fdw Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_foreign_data_wrapper_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_foreign_data_wrapper_privilege — has_foreign_data_wrapper_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_foreign_data_wrapper_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_foreign_data_wrapper_privilege — has_foreign_data_wrapper_privilege","text":"has_foreign_data_wrapper_privilege(fdw, privilege) has_foreign_data_wrapper_privilege(user, fdw, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_function_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_function_privilege — has_function_privilege","title":"DuckDB function has_function_privilege — has_function_privilege","text":"DuckDB function has_function_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_function_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_function_privilege — has_function_privilege","text":"function Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_function_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_function_privilege — has_function_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_function_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_function_privilege — has_function_privilege","text":"has_function_privilege(`function`, privilege) has_function_privilege(user, `function`, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_language_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_language_privilege — has_language_privilege","title":"DuckDB function has_language_privilege — has_language_privilege","text":"DuckDB function has_language_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_language_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_language_privilege — has_language_privilege","text":"language Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_language_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_language_privilege — has_language_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_language_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_language_privilege — has_language_privilege","text":"has_language_privilege(language, privilege) has_language_privilege(user, language, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_schema_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_schema_privilege — has_schema_privilege","title":"DuckDB function has_schema_privilege — has_schema_privilege","text":"DuckDB function has_schema_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_schema_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_schema_privilege — has_schema_privilege","text":"schema Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_schema_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_schema_privilege — has_schema_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_schema_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_schema_privilege — has_schema_privilege","text":"has_schema_privilege(schema, privilege) has_schema_privilege(user, schema, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_sequence_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_sequence_privilege — has_sequence_privilege","title":"DuckDB function has_sequence_privilege — has_sequence_privilege","text":"DuckDB function has_sequence_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_sequence_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_sequence_privilege — has_sequence_privilege","text":"sequence Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_sequence_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_sequence_privilege — has_sequence_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_sequence_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_sequence_privilege — has_sequence_privilege","text":"has_sequence_privilege(sequence, privilege) has_sequence_privilege(user, sequence, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_server_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_server_privilege — has_server_privilege","title":"DuckDB function has_server_privilege — has_server_privilege","text":"DuckDB function has_server_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_server_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_server_privilege — has_server_privilege","text":"server Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_server_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_server_privilege — has_server_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_server_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_server_privilege — has_server_privilege","text":"has_server_privilege(server, privilege) has_server_privilege(user, server, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_table_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_table_privilege — has_table_privilege","title":"DuckDB function has_table_privilege — has_table_privilege","text":"DuckDB function has_table_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_table_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_table_privilege — has_table_privilege","text":"table Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_table_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_table_privilege — has_table_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_table_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_table_privilege — has_table_privilege","text":"has_table_privilege(table, privilege) has_table_privilege(user, table, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/has_tablespace_privilege.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function has_tablespace_privilege — has_tablespace_privilege","title":"DuckDB function has_tablespace_privilege — has_tablespace_privilege","text":"DuckDB function has_tablespace_privilege().","code":""},{"path":"https://cynkra.github.io/dd/reference/has_tablespace_privilege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function has_tablespace_privilege — has_tablespace_privilege","text":"tablespace Unspecified. privilege Unspecified. user Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_tablespace_privilege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function has_tablespace_privilege — has_tablespace_privilege","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/has_tablespace_privilege.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function has_tablespace_privilege — has_tablespace_privilege","text":"has_tablespace_privilege(tablespace, privilege) has_tablespace_privilege(user, tablespace, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/hash.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function hash — hash","title":"DuckDB function hash — hash","text":"Returns UBIGINT hash value. Note cryptographic hash.","code":""},{"path":"https://cynkra.github.io/dd/reference/hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function hash — hash","text":"","code":"hash(value = ANY)"},{"path":"https://cynkra.github.io/dd/reference/hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function hash — hash","text":"value ","code":""},{"path":"https://cynkra.github.io/dd/reference/hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function hash — hash","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/hash.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function hash — hash","text":"","code":"hash('🦆')"},{"path":"https://cynkra.github.io/dd/reference/hex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function hex — hex","title":"DuckDB function hex — hex","text":"Converts string hexadecimal representation. Converts value VARCHAR using hexadecimal representation. Converts blob VARCHAR using hexadecimal encoding.","code":""},{"path":"https://cynkra.github.io/dd/reference/hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function hex — hex","text":"string VARCHAR value BIGNUM | BIGINT | UBIGINT | HUGEINT | UHUGEINT blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function hex — hex","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/hex.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function hex — hex","text":"hex(string = VARCHAR) hex(value = BIGNUM) hex(blob = BLOB) hex(value = BIGINT) hex(value = UBIGINT) hex(value = HUGEINT) hex(value = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/hex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function hex — hex","text":"","code":"hex('Hello') hex(42) hex('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function histogram — histogram","title":"DuckDB function histogram — histogram","text":"Returns LIST STRUCTs fields bucket count.","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function histogram — histogram","text":"arg col1 [] source Unspecified. col_name Unspecified. bin_count Unspecified. technique Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function histogram — histogram","text":"MAP","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function histogram — histogram","text":"histogram(arg = , col1 = `[]`) histogram(arg = ) histogram(source, col_name, bin_count, technique)","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function histogram — histogram","text":"","code":"histogram(A)"},{"path":"https://cynkra.github.io/dd/reference/histogram_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function histogram_exact — histogram_exact","title":"DuckDB function histogram_exact — histogram_exact","text":"Returns LIST STRUCTs fields bucket count matching buckets exactly.","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function histogram_exact — histogram_exact","text":"","code":"histogram_exact(arg = ANY, bins = `ANY[]`)"},{"path":"https://cynkra.github.io/dd/reference/histogram_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function histogram_exact — histogram_exact","text":"arg bins []","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function histogram_exact — histogram_exact","text":"MAP","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram_exact.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function histogram_exact — histogram_exact","text":"","code":"histogram_exact(A, [0, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/histogram_values.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function histogram_values — histogram_values","title":"DuckDB function histogram_values — histogram_values","text":"DuckDB macro histogram_values().","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function histogram_values — histogram_values","text":"","code":"histogram_values(source, col_name, bin_count, technique)"},{"path":"https://cynkra.github.io/dd/reference/histogram_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function histogram_values — histogram_values","text":"source Unspecified. col_name Unspecified. bin_count Unspecified. technique Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/histogram_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function histogram_values — histogram_values","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/hour.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function hour — hour","title":"DuckDB function hour — hour","text":"Extract hour component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function hour — hour","text":"ts DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function hour — hour","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/hour.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function hour — hour","text":"hour(ts = DATE) hour(ts = INTERVAL) hour(ts = TIME) hour(ts = TIMESTAMP) hour(ts = `TIME TIME ZONE`) hour(ts = TIME_NS) hour(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/hour.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function hour — hour","text":"","code":"hour(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/ilike_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ilike_escape — ilike_escape","title":"DuckDB function ilike_escape — ilike_escape","text":"Returns true string matches like_specifier (see Pattern Matching) using case-insensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"https://cynkra.github.io/dd/reference/ilike_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ilike_escape — ilike_escape","text":"","code":"ilike_escape(string = VARCHAR, like_specifier = VARCHAR, escape_character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/ilike_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ilike_escape — ilike_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ilike_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ilike_escape — ilike_escape","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/ilike_escape.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ilike_escape — ilike_escape","text":"","code":"ilike_escape('A%c', 'a$%C', '$')"},{"path":"https://cynkra.github.io/dd/reference/import_database.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function import_database — import_database","title":"DuckDB function import_database — import_database","text":"DuckDB function import_database().","code":""},{"path":"https://cynkra.github.io/dd/reference/import_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function import_database — import_database","text":"","code":"import_database(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/import_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function import_database — import_database","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/import_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function import_database — import_database","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/in_search_path.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function in_search_path — in_search_path","title":"DuckDB function in_search_path — in_search_path","text":"Returns whether database/schema search path.","code":""},{"path":"https://cynkra.github.io/dd/reference/in_search_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function in_search_path — in_search_path","text":"","code":"in_search_path(database_name = VARCHAR, schema_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/in_search_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function in_search_path — in_search_path","text":"database_name VARCHAR schema_name VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/in_search_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function in_search_path — in_search_path","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/in_search_path.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function in_search_path — in_search_path","text":"","code":"in_search_path('memory', 'main')"},{"path":"https://cynkra.github.io/dd/reference/inet_client_addr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function inet_client_addr — inet_client_addr","title":"DuckDB function inet_client_addr — inet_client_addr","text":"DuckDB macro inet_client_addr().","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_client_addr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function inet_client_addr — inet_client_addr","text":"","code":"inet_client_addr()"},{"path":"https://cynkra.github.io/dd/reference/inet_client_addr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function inet_client_addr — inet_client_addr","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_client_port.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function inet_client_port — inet_client_port","title":"DuckDB function inet_client_port — inet_client_port","text":"DuckDB macro inet_client_port().","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_client_port.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function inet_client_port — inet_client_port","text":"","code":"inet_client_port()"},{"path":"https://cynkra.github.io/dd/reference/inet_client_port.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function inet_client_port — inet_client_port","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_server_addr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function inet_server_addr — inet_server_addr","title":"DuckDB function inet_server_addr — inet_server_addr","text":"DuckDB macro inet_server_addr().","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_server_addr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function inet_server_addr — inet_server_addr","text":"","code":"inet_server_addr()"},{"path":"https://cynkra.github.io/dd/reference/inet_server_addr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function inet_server_addr — inet_server_addr","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_server_port.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function inet_server_port — inet_server_port","title":"DuckDB function inet_server_port — inet_server_port","text":"DuckDB macro inet_server_port().","code":""},{"path":"https://cynkra.github.io/dd/reference/inet_server_port.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function inet_server_port — inet_server_port","text":"","code":"inet_server_port()"},{"path":"https://cynkra.github.io/dd/reference/inet_server_port.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function inet_server_port — inet_server_port","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/instr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function instr — instr","title":"DuckDB function instr — instr","text":"Returns location first occurrence search_string string, counting 1. Returns 0 match found.","code":""},{"path":"https://cynkra.github.io/dd/reference/instr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function instr — instr","text":"","code":"instr(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/instr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function instr — instr","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/instr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function instr — instr","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/instr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function instr — instr","text":"","code":"instr('test test', 'es')"},{"path":"https://cynkra.github.io/dd/reference/is_histogram_other_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"Whether provided value histogram \"\" bin (used values belonging provided bin).","code":""},{"path":"https://cynkra.github.io/dd/reference/is_histogram_other_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"","code":"is_histogram_other_bin(val = ANY)"},{"path":"https://cynkra.github.io/dd/reference/is_histogram_other_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"val ","code":""},{"path":"https://cynkra.github.io/dd/reference/is_histogram_other_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/is_histogram_other_bin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function is_histogram_other_bin — is_histogram_other_bin","text":"","code":"is_histogram_other_bin(v)"},{"path":"https://cynkra.github.io/dd/reference/isfinite.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function isfinite — isfinite","title":"DuckDB function isfinite — isfinite","text":"Returns true floating point value finite, false otherwise.","code":""},{"path":"https://cynkra.github.io/dd/reference/isfinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function isfinite — isfinite","text":"x FLOAT | DOUBLE | DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/isfinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function isfinite — isfinite","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/isfinite.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function isfinite — isfinite","text":"isfinite(x = FLOAT) isfinite(x = DOUBLE) isfinite(x = DATE) isfinite(x = TIMESTAMP) isfinite(x = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/isfinite.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function isfinite — isfinite","text":"","code":"isfinite(5.5)"},{"path":"https://cynkra.github.io/dd/reference/isinf.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function isinf — isinf","title":"DuckDB function isinf — isinf","text":"Returns true floating point value infinite, false otherwise.","code":""},{"path":"https://cynkra.github.io/dd/reference/isinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function isinf — isinf","text":"x FLOAT | DOUBLE | DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/isinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function isinf — isinf","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/isinf.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function isinf — isinf","text":"isinf(x = FLOAT) isinf(x = DOUBLE) isinf(x = DATE) isinf(x = TIMESTAMP) isinf(x = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/isinf.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function isinf — isinf","text":"","code":"isinf('Infinity'::float)"},{"path":"https://cynkra.github.io/dd/reference/isnan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function isnan — isnan","title":"DuckDB function isnan — isnan","text":"Returns true floating point value number, false otherwise.","code":""},{"path":"https://cynkra.github.io/dd/reference/isnan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function isnan — isnan","text":"x FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/isnan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function isnan — isnan","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/isnan.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function isnan — isnan","text":"isnan(x = FLOAT) isnan(x = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/isnan.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function isnan — isnan","text":"","code":"isnan('NaN'::FLOAT)"},{"path":"https://cynkra.github.io/dd/reference/isodow.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function isodow — isodow","title":"DuckDB function isodow — isodow","text":"Extract isodow component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/isodow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function isodow — isodow","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/isodow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function isodow — isodow","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/isodow.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function isodow — isodow","text":"isodow(ts = DATE) isodow(ts = INTERVAL) isodow(ts = TIMESTAMP) isodow(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/isodow.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function isodow — isodow","text":"","code":"isodow(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/isoyear.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function isoyear — isoyear","title":"DuckDB function isoyear — isoyear","text":"Extract isoyear component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/isoyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function isoyear — isoyear","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/isoyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function isoyear — isoyear","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/isoyear.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function isoyear — isoyear","text":"isoyear(ts = DATE) isoyear(ts = INTERVAL) isoyear(ts = TIMESTAMP) isoyear(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/isoyear.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function isoyear — isoyear","text":"","code":"isoyear(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function jaccard — jaccard","title":"DuckDB function jaccard — jaccard","text":"Jaccard similarity two strings. Characters different cases (e.g., ) considered different. Returns number 0 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/jaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function jaccard — jaccard","text":"","code":"jaccard(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function jaccard — jaccard","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/jaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function jaccard — jaccard","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/jaccard.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function jaccard — jaccard","text":"","code":"jaccard('duck', 'luck')"},{"path":"https://cynkra.github.io/dd/reference/jaro_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function jaro_similarity — jaro_similarity","title":"DuckDB function jaro_similarity — jaro_similarity","text":"Jaro similarity two strings. Characters different cases (e.g., ) considered different. Returns number 0 1. similarity < score_cutoff, 0 returned instead. score_cutoff defaults 0.","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function jaro_similarity — jaro_similarity","text":"s1 VARCHAR s2 VARCHAR score_cutoff DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function jaro_similarity — jaro_similarity","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_similarity.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function jaro_similarity — jaro_similarity","text":"jaro_similarity(s1 = VARCHAR, s2 = VARCHAR) jaro_similarity(s1 = VARCHAR, s2 = VARCHAR, score_cutoff = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_similarity.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function jaro_similarity — jaro_similarity","text":"","code":"jaro_similarity('duck', 'duckdb')"},{"path":"https://cynkra.github.io/dd/reference/jaro_winkler_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","title":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","text":"Jaro-Winkler similarity two strings. Characters different cases (e.g., ) considered different. Returns number 0 1. similarity < score_cutoff, 0 returned instead. score_cutoff defaults 0.","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_winkler_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","text":"s1 VARCHAR s2 VARCHAR score_cutoff DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_winkler_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_winkler_similarity.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","text":"jaro_winkler_similarity(s1 = VARCHAR, s2 = VARCHAR) jaro_winkler_similarity(s1 = VARCHAR, s2 = VARCHAR, score_cutoff = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/jaro_winkler_similarity.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function jaro_winkler_similarity — jaro_winkler_similarity","text":"","code":"jaro_winkler_similarity('duck', 'duckdb')"},{"path":"https://cynkra.github.io/dd/reference/julian.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function julian — julian","title":"DuckDB function julian — julian","text":"Extract Julian Day number date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/julian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function julian — julian","text":"ts DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/julian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function julian — julian","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/julian.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function julian — julian","text":"julian(ts = DATE) julian(ts = TIMESTAMP) julian(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/julian.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function julian — julian","text":"","code":"julian(timestamp '2006-01-01 12:00')"},{"path":"https://cynkra.github.io/dd/reference/kahan_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function kahan_sum — kahan_sum","title":"DuckDB function kahan_sum — kahan_sum","text":"Calculates sum using accurate floating point summation (Kahan Sum).","code":""},{"path":"https://cynkra.github.io/dd/reference/kahan_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function kahan_sum — kahan_sum","text":"","code":"kahan_sum(arg = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/kahan_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function kahan_sum — kahan_sum","text":"arg DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/kahan_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function kahan_sum — kahan_sum","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/kahan_sum.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function kahan_sum — kahan_sum","text":"","code":"kahan_sum(A)"},{"path":"https://cynkra.github.io/dd/reference/kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function kurtosis — kurtosis","title":"DuckDB function kurtosis — kurtosis","text":"Returns excess kurtosis (Fisher’s definition) input values, bias correction according sample size.","code":""},{"path":"https://cynkra.github.io/dd/reference/kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function kurtosis — kurtosis","text":"","code":"kurtosis(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function kurtosis — kurtosis","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function kurtosis — kurtosis","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/kurtosis_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function kurtosis_pop — kurtosis_pop","title":"DuckDB function kurtosis_pop — kurtosis_pop","text":"Returns excess kurtosis (Fisher’s definition) input values, without bias correction.","code":""},{"path":"https://cynkra.github.io/dd/reference/kurtosis_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function kurtosis_pop — kurtosis_pop","text":"","code":"kurtosis_pop(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/kurtosis_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function kurtosis_pop — kurtosis_pop","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/kurtosis_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function kurtosis_pop — kurtosis_pop","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/last.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function last — last","title":"DuckDB function last — last","text":"Returns last value column. function affected ordering.","code":""},{"path":"https://cynkra.github.io/dd/reference/last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function last — last","text":"arg DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function last — last","text":"DECIMAL | ","code":""},{"path":"https://cynkra.github.io/dd/reference/last.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function last — last","text":"last(arg = DECIMAL) last(arg = )","code":""},{"path":"https://cynkra.github.io/dd/reference/last.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function last — last","text":"","code":"last(A)"},{"path":"https://cynkra.github.io/dd/reference/last_day.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function last_day — last_day","title":"DuckDB function last_day — last_day","text":"Returns last day month.","code":""},{"path":"https://cynkra.github.io/dd/reference/last_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function last_day — last_day","text":"ts DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/last_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function last_day — last_day","text":"DATE","code":""},{"path":"https://cynkra.github.io/dd/reference/last_day.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function last_day — last_day","text":"last_day(ts = DATE) last_day(ts = TIMESTAMP) last_day(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/last_day.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function last_day — last_day","text":"","code":"last_day(TIMESTAMP '1992-03-22 01:02:03.1234')"},{"path":"https://cynkra.github.io/dd/reference/lcase.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lcase — lcase","title":"DuckDB function lcase — lcase","text":"Converts string lower case.","code":""},{"path":"https://cynkra.github.io/dd/reference/lcase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function lcase — lcase","text":"","code":"lcase(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/lcase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lcase — lcase","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lcase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function lcase — lcase","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lcase.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function lcase — lcase","text":"","code":"lcase('Hello')"},{"path":"https://cynkra.github.io/dd/reference/lcm.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lcm — lcm","title":"DuckDB function lcm — lcm","text":"Computes least common multiple x y.","code":""},{"path":"https://cynkra.github.io/dd/reference/lcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lcm — lcm","text":"x BIGINT | HUGEINT y BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/lcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function lcm — lcm","text":"BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/lcm.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function lcm — lcm","text":"lcm(x = BIGINT, y = BIGINT) lcm(x = HUGEINT, y = HUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/lcm.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function lcm — lcm","text":"","code":"lcm(42, 57)"},{"path":"https://cynkra.github.io/dd/reference/least.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function least — least","title":"DuckDB function least — least","text":"Returns smallest value. strings lexicographical ordering used. Note uppercase characters considered “smaller” lowercase characters, collations supported.","code":""},{"path":"https://cynkra.github.io/dd/reference/least.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function least — least","text":"","code":"least(arg1 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/least.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function least — least","text":"arg1 ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/least.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function least — least","text":"","code":"least(42, 84) least('abc', 'bcd', 'cde', 'EFG')"},{"path":"https://cynkra.github.io/dd/reference/least_common_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function least_common_multiple — least_common_multiple","title":"DuckDB function least_common_multiple — least_common_multiple","text":"Computes least common multiple x y.","code":""},{"path":"https://cynkra.github.io/dd/reference/least_common_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function least_common_multiple — least_common_multiple","text":"x BIGINT | HUGEINT y BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/least_common_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function least_common_multiple — least_common_multiple","text":"BIGINT | HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/least_common_multiple.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function least_common_multiple — least_common_multiple","text":"least_common_multiple(x = BIGINT, y = BIGINT) least_common_multiple(x = HUGEINT, y = HUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/least_common_multiple.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function least_common_multiple — least_common_multiple","text":"","code":"least_common_multiple(42, 57)"},{"path":"https://cynkra.github.io/dd/reference/left.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function left — left","title":"DuckDB function left — left","text":"Extracts left-count characters.","code":""},{"path":"https://cynkra.github.io/dd/reference/left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function left — left","text":"","code":"left(string = VARCHAR, count = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function left — left","text":"string VARCHAR count BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function left — left","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/left.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function left — left","text":"","code":"left('Hello🦆', 2)"},{"path":"https://cynkra.github.io/dd/reference/left_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function left_grapheme — left_grapheme","title":"DuckDB function left_grapheme — left_grapheme","text":"Extracts left-count grapheme clusters.","code":""},{"path":"https://cynkra.github.io/dd/reference/left_grapheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function left_grapheme — left_grapheme","text":"","code":"left_grapheme(string = VARCHAR, count = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/left_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function left_grapheme — left_grapheme","text":"string VARCHAR count BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/left_grapheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function left_grapheme — left_grapheme","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/left_grapheme.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function left_grapheme — left_grapheme","text":"","code":"left_grapheme('🤦🏼‍♂️🤦🏽‍♀️', 1)"},{"path":"https://cynkra.github.io/dd/reference/len.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function len — len","title":"DuckDB function len — len","text":"Number characters string. Returns bit-length bit argument. Returns length list.","code":""},{"path":"https://cynkra.github.io/dd/reference/len.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function len — len","text":"string VARCHAR bit BIT list []","code":""},{"path":"https://cynkra.github.io/dd/reference/len.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function len — len","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/len.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function len — len","text":"len(string = VARCHAR) len(bit = BIT) len(list = `[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/len.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function len — len","text":"","code":"length('Hello🦆') length(42::TINYINT::BIT) length([1,2,3])"},{"path":"https://cynkra.github.io/dd/reference/length_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function length_grapheme — length_grapheme","title":"DuckDB function length_grapheme — length_grapheme","text":"Number grapheme clusters string.","code":""},{"path":"https://cynkra.github.io/dd/reference/length_grapheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function length_grapheme — length_grapheme","text":"","code":"length_grapheme(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/length_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function length_grapheme — length_grapheme","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/length_grapheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function length_grapheme — length_grapheme","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/length_grapheme.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function length_grapheme — length_grapheme","text":"","code":"length_grapheme('🤦🏼‍♂️🤦🏽‍♀️')"},{"path":"https://cynkra.github.io/dd/reference/less-than-equals-greater-than.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function <=> — <=>","title":"DuckDB function <=> — <=>","text":"Computes cosine distance two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-equals-greater-than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function <=> — <=>","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-equals-greater-than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function <=> — <=>","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-equals-greater-than.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function <=> — <=>","text":"`<=>`(list1 = `FLOAT[]`, list2 = `FLOAT[]`) `<=>`(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-equals-greater-than.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function <=> — <=>","text":"","code":"list_cosine_distance([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/less-than-less-than.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function << — <<","title":"DuckDB function << — <<","text":"Bitwise shift left.","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-less-than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function << — <<","text":"input TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-less-than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function << — <<","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-less-than.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function << — <<","text":"`<<`(input = TINYINT, col1 = TINYINT) `<<`(input = SMALLINT, col1 = SMALLINT) `<<`(input = INTEGER, col1 = INTEGER) `<<`(input = BIGINT, col1 = BIGINT) `<<`(input = HUGEINT, col1 = HUGEINT) `<<`(input = UTINYINT, col1 = UTINYINT) `<<`(input = USMALLINT, col1 = USMALLINT) `<<`(input = UINTEGER, col1 = UINTEGER) `<<`(input = UBIGINT, col1 = UBIGINT) `<<`(input = UHUGEINT, col1 = UHUGEINT) `<<`(input = BIT, col1 = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/less-than-less-than.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function << — <<","text":"","code":"1 << 4"},{"path":"https://cynkra.github.io/dd/reference/levenshtein.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function levenshtein — levenshtein","title":"DuckDB function levenshtein — levenshtein","text":"minimum number single-character edits (insertions, deletions substitutions) required change one string . Characters different cases (e.g., ) considered different.","code":""},{"path":"https://cynkra.github.io/dd/reference/levenshtein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function levenshtein — levenshtein","text":"","code":"levenshtein(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/levenshtein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function levenshtein — levenshtein","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/levenshtein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function levenshtein — levenshtein","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/levenshtein.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function levenshtein — levenshtein","text":"","code":"levenshtein('duck', 'db')"},{"path":"https://cynkra.github.io/dd/reference/lgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lgamma — lgamma","title":"DuckDB function lgamma — lgamma","text":"Computes log gamma function.","code":""},{"path":"https://cynkra.github.io/dd/reference/lgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function lgamma — lgamma","text":"","code":"lgamma(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/lgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lgamma — lgamma","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/lgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function lgamma — lgamma","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/lgamma.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function lgamma — lgamma","text":"","code":"lgamma(2)"},{"path":"https://cynkra.github.io/dd/reference/like_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function like_escape — like_escape","title":"DuckDB function like_escape — like_escape","text":"Returns true string matches like_specifier (see Pattern Matching) using case-sensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"https://cynkra.github.io/dd/reference/like_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function like_escape — like_escape","text":"","code":"like_escape(string = VARCHAR, like_specifier = VARCHAR, escape_character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/like_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function like_escape — like_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/like_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function like_escape — like_escape","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/like_escape.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function like_escape — like_escape","text":"","code":"like_escape('a%c', 'a$%c', '$')"},{"path":"https://cynkra.github.io/dd/reference/list.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list — list","title":"DuckDB function list — list","text":"Returns LIST containing values column.","code":""},{"path":"https://cynkra.github.io/dd/reference/list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list — list","text":"","code":"list(arg = T)"},{"path":"https://cynkra.github.io/dd/reference/list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list — list","text":"arg T","code":""},{"path":"https://cynkra.github.io/dd/reference/list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list — list","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list — list","text":"","code":"list(A)"},{"path":"https://cynkra.github.io/dd/reference/list_aggr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_aggr — list_aggr","title":"DuckDB function list_aggr — list_aggr","text":"Executes aggregate function function_name elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_aggr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_aggr — list_aggr","text":"","code":"list_aggr(list = `ANY[]`, function_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/list_aggr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_aggr — list_aggr","text":"list [] function_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/list_aggr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_aggr — list_aggr","text":"","code":"list_aggregate([1, 2, NULL], 'min')"},{"path":"https://cynkra.github.io/dd/reference/list_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_aggregate — list_aggregate","title":"DuckDB function list_aggregate — list_aggregate","text":"Executes aggregate function function_name elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_aggregate — list_aggregate","text":"","code":"list_aggregate(list = `ANY[]`, function_name = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/list_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_aggregate — list_aggregate","text":"list [] function_name VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/list_aggregate.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_aggregate — list_aggregate","text":"","code":"list_aggregate([1, 2, NULL], 'min')"},{"path":"https://cynkra.github.io/dd/reference/list_any_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_any_value — list_any_value","title":"DuckDB function list_any_value — list_any_value","text":"DuckDB macro list_any_value().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_any_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_any_value — list_any_value","text":"","code":"list_any_value(l)"},{"path":"https://cynkra.github.io/dd/reference/list_any_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_any_value — list_any_value","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_any_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_any_value — list_any_value","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_append.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_append — list_append","title":"DuckDB function list_append — list_append","text":"DuckDB macro list_append().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_append — list_append","text":"","code":"list_append(l, e)"},{"path":"https://cynkra.github.io/dd/reference/list_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_append — list_append","text":"l Unspecified. e Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_append — list_append","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_apply — list_apply","title":"DuckDB function list_apply — list_apply","text":"Returns list result applying lambda function element input list. return type defined return type lambda function.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_apply — list_apply","text":"","code":"list_apply(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/list_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_apply — list_apply","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/list_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_apply — list_apply","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_apply.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_apply — list_apply","text":"","code":"list_apply([1, 2, 3], lambda x : x + 1)"},{"path":"https://cynkra.github.io/dd/reference/list_approx_count_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_approx_count_distinct — list_approx_count_distinct","title":"DuckDB function list_approx_count_distinct — list_approx_count_distinct","text":"DuckDB macro list_approx_count_distinct().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_approx_count_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_approx_count_distinct — list_approx_count_distinct","text":"","code":"list_approx_count_distinct(l)"},{"path":"https://cynkra.github.io/dd/reference/list_approx_count_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_approx_count_distinct — list_approx_count_distinct","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_approx_count_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_approx_count_distinct — list_approx_count_distinct","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_avg — list_avg","title":"DuckDB function list_avg — list_avg","text":"DuckDB macro list_avg().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_avg — list_avg","text":"","code":"list_avg(l)"},{"path":"https://cynkra.github.io/dd/reference/list_avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_avg — list_avg","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_avg — list_avg","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_bit_and — list_bit_and","title":"DuckDB function list_bit_and — list_bit_and","text":"DuckDB macro list_bit_and().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_bit_and — list_bit_and","text":"","code":"list_bit_and(l)"},{"path":"https://cynkra.github.io/dd/reference/list_bit_and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_bit_and — list_bit_and","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_bit_and — list_bit_and","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_bit_or — list_bit_or","title":"DuckDB function list_bit_or — list_bit_or","text":"DuckDB macro list_bit_or().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_bit_or — list_bit_or","text":"","code":"list_bit_or(l)"},{"path":"https://cynkra.github.io/dd/reference/list_bit_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_bit_or — list_bit_or","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_bit_or — list_bit_or","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_xor.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_bit_xor — list_bit_xor","title":"DuckDB function list_bit_xor — list_bit_xor","text":"DuckDB macro list_bit_xor().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_xor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_bit_xor — list_bit_xor","text":"","code":"list_bit_xor(l)"},{"path":"https://cynkra.github.io/dd/reference/list_bit_xor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_bit_xor — list_bit_xor","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bit_xor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_bit_xor — list_bit_xor","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_and.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_bool_and — list_bool_and","title":"DuckDB function list_bool_and — list_bool_and","text":"DuckDB macro list_bool_and().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_and.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_bool_and — list_bool_and","text":"","code":"list_bool_and(l)"},{"path":"https://cynkra.github.io/dd/reference/list_bool_and.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_bool_and — list_bool_and","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_and.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_bool_and — list_bool_and","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_bool_or — list_bool_or","title":"DuckDB function list_bool_or — list_bool_or","text":"DuckDB macro list_bool_or().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_bool_or — list_bool_or","text":"","code":"list_bool_or(l)"},{"path":"https://cynkra.github.io/dd/reference/list_bool_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_bool_or — list_bool_or","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_bool_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_bool_or — list_bool_or","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_cat — list_cat","title":"DuckDB function list_cat — list_cat","text":"Concatenates lists. NULL inputs skipped. See also operator ||.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_cat — list_cat","text":"","code":"list_cat()"},{"path":"https://cynkra.github.io/dd/reference/list_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_cat — list_cat","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_cat — list_cat","text":"","code":"list_cat([2, 3], [4, 5, 6], [7])"},{"path":"https://cynkra.github.io/dd/reference/list_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_concat — list_concat","title":"DuckDB function list_concat — list_concat","text":"Concatenates lists. NULL inputs skipped. See also operator ||.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_concat — list_concat","text":"","code":"list_concat()"},{"path":"https://cynkra.github.io/dd/reference/list_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_concat — list_concat","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_concat — list_concat","text":"","code":"list_concat([2, 3], [4, 5, 6], [7])"},{"path":"https://cynkra.github.io/dd/reference/list_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_contains — list_contains","title":"DuckDB function list_contains — list_contains","text":"Returns true list contains element.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_contains — list_contains","text":"","code":"list_contains(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/list_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_contains — list_contains","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_contains — list_contains","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/list_contains.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_contains — list_contains","text":"","code":"list_contains([1, 2, NULL], 1)"},{"path":"https://cynkra.github.io/dd/reference/list_cosine_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_cosine_distance — list_cosine_distance","title":"DuckDB function list_cosine_distance — list_cosine_distance","text":"Computes cosine distance two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_cosine_distance — list_cosine_distance","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_cosine_distance — list_cosine_distance","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_distance.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_cosine_distance — list_cosine_distance","text":"list_cosine_distance(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_cosine_distance(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_distance.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_cosine_distance — list_cosine_distance","text":"","code":"list_cosine_distance([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_cosine_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_cosine_similarity — list_cosine_similarity","title":"DuckDB function list_cosine_similarity — list_cosine_similarity","text":"Computes cosine similarity two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_cosine_similarity — list_cosine_similarity","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_cosine_similarity — list_cosine_similarity","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_similarity.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_cosine_similarity — list_cosine_similarity","text":"list_cosine_similarity(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_cosine_similarity(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_cosine_similarity.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_cosine_similarity — list_cosine_similarity","text":"","code":"list_cosine_similarity([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_count.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_count — list_count","title":"DuckDB function list_count — list_count","text":"DuckDB macro list_count().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_count — list_count","text":"","code":"list_count(l)"},{"path":"https://cynkra.github.io/dd/reference/list_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_count — list_count","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_count — list_count","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_distance — list_distance","title":"DuckDB function list_distance — list_distance","text":"Calculates Euclidean distance two points coordinates given two inputs lists equal length.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_distance — list_distance","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_distance — list_distance","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distance.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_distance — list_distance","text":"list_distance(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_distance(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distance.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_distance — list_distance","text":"","code":"list_distance([1, 2, 3], [1, 2, 5])"},{"path":"https://cynkra.github.io/dd/reference/list_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_distinct — list_distinct","title":"DuckDB function list_distinct — list_distinct","text":"Removes duplicates NULL values list. preserve original order.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_distinct — list_distinct","text":"","code":"list_distinct(list = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_distinct — list_distinct","text":"list T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_distinct — list_distinct","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_distinct.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_distinct — list_distinct","text":"","code":"list_distinct([1, 1, NULL, -3, 1, 5])"},{"path":"https://cynkra.github.io/dd/reference/list_dot_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_dot_product — list_dot_product","title":"DuckDB function list_dot_product — list_dot_product","text":"Computes inner product two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_dot_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_dot_product — list_dot_product","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_dot_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_dot_product — list_dot_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_dot_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_dot_product — list_dot_product","text":"list_dot_product(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_dot_product(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_dot_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_dot_product — list_dot_product","text":"","code":"list_dot_product([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_element.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_element — list_element","title":"DuckDB function list_element — list_element","text":"Extract indexth (1-based) value list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_element — list_element","text":"list T[] | VARCHAR index BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/list_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_element — list_element","text":"T | VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/list_element.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_element — list_element","text":"list_element(list = `T[]`, index = BIGINT) list_element(list = VARCHAR, index = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_element.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_element — list_element","text":"","code":"list_element([4, 5, 6], 3)"},{"path":"https://cynkra.github.io/dd/reference/list_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_entropy — list_entropy","title":"DuckDB function list_entropy — list_entropy","text":"DuckDB macro list_entropy().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_entropy — list_entropy","text":"","code":"list_entropy(l)"},{"path":"https://cynkra.github.io/dd/reference/list_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_entropy — list_entropy","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_entropy — list_entropy","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_extract — list_extract","title":"DuckDB function list_extract — list_extract","text":"Extract indexth (1-based) value list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_extract — list_extract","text":"list T[] | VARCHAR index BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/list_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_extract — list_extract","text":"T | VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/list_extract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_extract — list_extract","text":"list_extract(list = `T[]`, index = BIGINT) list_extract(list = VARCHAR, index = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_extract — list_extract","text":"","code":"list_extract([4, 5, 6], 3)"},{"path":"https://cynkra.github.io/dd/reference/list_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_filter — list_filter","title":"DuckDB function list_filter — list_filter","text":"Constructs list elements input list lambda function returns true. DuckDB must able cast lambda function's return type BOOL. return type list_filter input list's.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_filter — list_filter","text":"","code":"list_filter(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/list_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_filter — list_filter","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/list_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_filter — list_filter","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_filter.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_filter — list_filter","text":"","code":"list_filter([3, 4, 5], lambda x : x > 4)"},{"path":"https://cynkra.github.io/dd/reference/list_first.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_first — list_first","title":"DuckDB function list_first — list_first","text":"DuckDB macro list_first().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_first — list_first","text":"","code":"list_first(l)"},{"path":"https://cynkra.github.io/dd/reference/list_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_first — list_first","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_first — list_first","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_grade_up.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_grade_up — list_grade_up","title":"DuckDB function list_grade_up — list_grade_up","text":"Works like list_sort, results indexes correspond position original list instead actual values.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_grade_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_grade_up — list_grade_up","text":"list [] col1 VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/list_grade_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_grade_up — list_grade_up","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_grade_up.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_grade_up — list_grade_up","text":"list_grade_up(list = `[]`) list_grade_up(list = `[]`, col1 = VARCHAR) list_grade_up(list = `[]`, col1 = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_grade_up.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_grade_up — list_grade_up","text":"","code":"list_grade_up([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/list_has.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has — list_has","title":"DuckDB function list_has — list_has","text":"Returns true list contains element.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_has — list_has","text":"","code":"list_has(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/list_has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has — list_has","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_has — list_has","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_has — list_has","text":"","code":"list_has([1, 2, NULL], 1)"},{"path":"https://cynkra.github.io/dd/reference/list_has_all.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has_all — list_has_all","title":"DuckDB function list_has_all — list_has_all","text":"Returns true elements list2 list1. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_has_all — list_has_all","text":"","code":"list_has_all(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_has_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has_all — list_has_all","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_has_all — list_has_all","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_all.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_has_all — list_has_all","text":"","code":"list_has_all([1, 2, 3], [2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_has_any.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_has_any — list_has_any","title":"DuckDB function list_has_any — list_has_any","text":"Returns true lists element common. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_has_any — list_has_any","text":"","code":"list_has_any(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_has_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_has_any — list_has_any","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_has_any — list_has_any","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/list_has_any.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_has_any — list_has_any","text":"","code":"list_has_any([1, 2, 3], [2, 3, 4])"},{"path":"https://cynkra.github.io/dd/reference/list_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_histogram — list_histogram","title":"DuckDB function list_histogram — list_histogram","text":"DuckDB macro list_histogram().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_histogram — list_histogram","text":"","code":"list_histogram(l)"},{"path":"https://cynkra.github.io/dd/reference/list_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_histogram — list_histogram","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_histogram — list_histogram","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_indexof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_indexof — list_indexof","title":"DuckDB function list_indexof — list_indexof","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_indexof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_indexof — list_indexof","text":"","code":"list_indexof(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/list_indexof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_indexof — list_indexof","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_indexof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_indexof — list_indexof","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/list_indexof.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_indexof — list_indexof","text":"","code":"list_indexof([1, 2, NULL], 2)"},{"path":"https://cynkra.github.io/dd/reference/list_inner_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_inner_product — list_inner_product","title":"DuckDB function list_inner_product — list_inner_product","text":"Computes inner product two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_inner_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_inner_product — list_inner_product","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_inner_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_inner_product — list_inner_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_inner_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_inner_product — list_inner_product","text":"list_inner_product(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_inner_product(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_inner_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_inner_product — list_inner_product","text":"","code":"list_inner_product([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_intersect — list_intersect","title":"DuckDB function list_intersect — list_intersect","text":"DuckDB macro list_intersect().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_intersect — list_intersect","text":"","code":"list_intersect(l1, l2)"},{"path":"https://cynkra.github.io/dd/reference/list_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_intersect — list_intersect","text":"l1 Unspecified. l2 Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_intersect — list_intersect","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_kurtosis — list_kurtosis","title":"DuckDB function list_kurtosis — list_kurtosis","text":"DuckDB macro list_kurtosis().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_kurtosis — list_kurtosis","text":"","code":"list_kurtosis(l)"},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_kurtosis — list_kurtosis","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_kurtosis — list_kurtosis","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_kurtosis_pop — list_kurtosis_pop","title":"DuckDB function list_kurtosis_pop — list_kurtosis_pop","text":"DuckDB macro list_kurtosis_pop().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_kurtosis_pop — list_kurtosis_pop","text":"","code":"list_kurtosis_pop(l)"},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_kurtosis_pop — list_kurtosis_pop","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_kurtosis_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_kurtosis_pop — list_kurtosis_pop","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_last.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_last — list_last","title":"DuckDB function list_last — list_last","text":"DuckDB macro list_last().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_last.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_last — list_last","text":"","code":"list_last(l)"},{"path":"https://cynkra.github.io/dd/reference/list_last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_last — list_last","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_last — list_last","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_mad — list_mad","title":"DuckDB function list_mad — list_mad","text":"DuckDB macro list_mad().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_mad — list_mad","text":"","code":"list_mad(l)"},{"path":"https://cynkra.github.io/dd/reference/list_mad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_mad — list_mad","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_mad — list_mad","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_max.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_max — list_max","title":"DuckDB function list_max — list_max","text":"DuckDB macro list_max().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_max — list_max","text":"","code":"list_max(l)"},{"path":"https://cynkra.github.io/dd/reference/list_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_max — list_max","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_max — list_max","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_median.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_median — list_median","title":"DuckDB function list_median — list_median","text":"DuckDB macro list_median().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_median — list_median","text":"","code":"list_median(l)"},{"path":"https://cynkra.github.io/dd/reference/list_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_median — list_median","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_median — list_median","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_min.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_min — list_min","title":"DuckDB function list_min — list_min","text":"DuckDB macro list_min().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_min — list_min","text":"","code":"list_min(l)"},{"path":"https://cynkra.github.io/dd/reference/list_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_min — list_min","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_min — list_min","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_mode — list_mode","title":"DuckDB function list_mode — list_mode","text":"DuckDB macro list_mode().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_mode — list_mode","text":"","code":"list_mode(l)"},{"path":"https://cynkra.github.io/dd/reference/list_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_mode — list_mode","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_mode — list_mode","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_dot_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_negative_dot_product — list_negative_dot_product","title":"DuckDB function list_negative_dot_product — list_negative_dot_product","text":"Computes negative inner product two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_dot_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_negative_dot_product — list_negative_dot_product","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_dot_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_negative_dot_product — list_negative_dot_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_dot_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_negative_dot_product — list_negative_dot_product","text":"list_negative_dot_product(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_negative_dot_product(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_dot_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_negative_dot_product — list_negative_dot_product","text":"","code":"list_negative_dot_product([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_negative_inner_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_negative_inner_product — list_negative_inner_product","title":"DuckDB function list_negative_inner_product — list_negative_inner_product","text":"Computes negative inner product two -sized lists.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_inner_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_negative_inner_product — list_negative_inner_product","text":"list1 FLOAT[] | DOUBLE[] list2 FLOAT[] | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_inner_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_negative_inner_product — list_negative_inner_product","text":"FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_inner_product.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_negative_inner_product — list_negative_inner_product","text":"list_negative_inner_product(list1 = `FLOAT[]`, list2 = `FLOAT[]`) list_negative_inner_product(list1 = `DOUBLE[]`, list2 = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_negative_inner_product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_negative_inner_product — list_negative_inner_product","text":"","code":"list_negative_inner_product([1, 2, 3], [1, 2, 3])"},{"path":"https://cynkra.github.io/dd/reference/list_pack.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_pack — list_pack","title":"DuckDB function list_pack — list_pack","text":"Creates LIST containing argument values.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_pack — list_pack","text":"T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_pack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_pack — list_pack","text":"\"NULL\"[] | T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_pack.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_pack — list_pack","text":"list_pack() list_pack(= T)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_pack.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_pack — list_pack","text":"","code":"list_pack(4, 5, 6)"},{"path":"https://cynkra.github.io/dd/reference/list_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_position — list_position","title":"DuckDB function list_position — list_position","text":"Returns index element list contains element. element found, returns NULL.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_position — list_position","text":"","code":"list_position(list = `T[]`, element = T)"},{"path":"https://cynkra.github.io/dd/reference/list_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_position — list_position","text":"list T[] element T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_position — list_position","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/list_position.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_position — list_position","text":"","code":"list_position([1, 2, NULL], 2)"},{"path":"https://cynkra.github.io/dd/reference/list_prepend.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_prepend — list_prepend","title":"DuckDB function list_prepend — list_prepend","text":"DuckDB macro list_prepend().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_prepend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_prepend — list_prepend","text":"","code":"list_prepend(e, l)"},{"path":"https://cynkra.github.io/dd/reference/list_prepend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_prepend — list_prepend","text":"e Unspecified. l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_prepend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_prepend — list_prepend","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_product — list_product","title":"DuckDB function list_product — list_product","text":"DuckDB macro list_product().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_product — list_product","text":"","code":"list_product(l)"},{"path":"https://cynkra.github.io/dd/reference/list_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_product — list_product","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_product — list_product","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_reduce — list_reduce","title":"DuckDB function list_reduce — list_reduce","text":"Reduces elements input list single scalar value executing lambda function running result next list element. lambda function optional initial_value argument.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_reduce — list_reduce","text":"list [] initial_value lambda(x, y) LAMBDA","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/list_reduce.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_reduce — list_reduce","text":"list_reduce(list = `[]`, `lambda(x,y)` = LAMBDA) list_reduce(list = `[]`, `lambda(x,y)` = LAMBDA, initial_value = )","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reduce.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_reduce — list_reduce","text":"","code":"list_reduce([1, 2, 3], lambda x, y : x + y)"},{"path":"https://cynkra.github.io/dd/reference/list_resize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_resize — list_resize","title":"DuckDB function list_resize — list_resize","text":"Resizes list contain size elements. Initializes new elements value NULL value set.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_resize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_resize — list_resize","text":"list [] size[ value] ","code":""},{"path":"https://cynkra.github.io/dd/reference/list_resize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_resize — list_resize","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_resize.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_resize — list_resize","text":"list_resize(list = `[]`, `size[` = ) list_resize(list = `[]`, `size[` = , `value]` = )","code":""},{"path":"https://cynkra.github.io/dd/reference/list_resize.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_resize — list_resize","text":"","code":"list_resize([1, 2, 3], 5, 0)"},{"path":"https://cynkra.github.io/dd/reference/list_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_reverse — list_reverse","title":"DuckDB function list_reverse — list_reverse","text":"DuckDB macro list_reverse().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_reverse — list_reverse","text":"","code":"list_reverse(l)"},{"path":"https://cynkra.github.io/dd/reference/list_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_reverse — list_reverse","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_reverse — list_reverse","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_reverse_sort — list_reverse_sort","title":"DuckDB function list_reverse_sort — list_reverse_sort","text":"Sorts elements list reverse order.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_reverse_sort — list_reverse_sort","text":"list [] col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_reverse_sort — list_reverse_sort","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse_sort.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_reverse_sort — list_reverse_sort","text":"list_reverse_sort(list = `[]`) list_reverse_sort(list = `[]`, col1 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_reverse_sort.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_reverse_sort — list_reverse_sort","text":"","code":"list_reverse_sort([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/list_select.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_select — list_select","title":"DuckDB function list_select — list_select","text":"Returns list based elements selected index_list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_select — list_select","text":"","code":"list_select(value_list = `T[]`, index_list = `BIGINT[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_select — list_select","text":"value_list T[] index_list BIGINT[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_select — list_select","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_select.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_select — list_select","text":"","code":"list_select([10, 20, 30, 40], [1, 4])"},{"path":"https://cynkra.github.io/dd/reference/list_sem.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_sem — list_sem","title":"DuckDB function list_sem — list_sem","text":"DuckDB macro list_sem().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_sem — list_sem","text":"","code":"list_sem(l)"},{"path":"https://cynkra.github.io/dd/reference/list_sem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_sem — list_sem","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_sem — list_sem","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_skewness — list_skewness","title":"DuckDB function list_skewness — list_skewness","text":"DuckDB macro list_skewness().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_skewness — list_skewness","text":"","code":"list_skewness(l)"},{"path":"https://cynkra.github.io/dd/reference/list_skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_skewness — list_skewness","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_skewness — list_skewness","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_slice — list_slice","title":"DuckDB function list_slice — list_slice","text":"Extracts sublist substring using slice conventions. Negative values accepted. list_slice added step feature.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_slice — list_slice","text":"list begin end step BIGINT","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/list_slice.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_slice — list_slice","text":"list_slice(list = , begin = , end = ) list_slice(list = , begin = , end = , step = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_slice.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_slice — list_slice","text":"","code":"list_slice([4, 5, 6], 2, 3) list_slice([4, 5, 6], 1, 3, 2)"},{"path":"https://cynkra.github.io/dd/reference/list_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_sort — list_sort","title":"DuckDB function list_sort — list_sort","text":"Sorts elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_sort — list_sort","text":"list [] col1 VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_sort — list_sort","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sort.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_sort — list_sort","text":"list_sort(list = `[]`) list_sort(list = `[]`, col1 = VARCHAR) list_sort(list = `[]`, col1 = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sort.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_sort — list_sort","text":"","code":"list_sort([3, 6, 1, 2])"},{"path":"https://cynkra.github.io/dd/reference/list_stddev_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_stddev_pop — list_stddev_pop","title":"DuckDB function list_stddev_pop — list_stddev_pop","text":"DuckDB macro list_stddev_pop().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_stddev_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_stddev_pop — list_stddev_pop","text":"","code":"list_stddev_pop(l)"},{"path":"https://cynkra.github.io/dd/reference/list_stddev_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_stddev_pop — list_stddev_pop","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_stddev_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_stddev_pop — list_stddev_pop","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_stddev_samp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_stddev_samp — list_stddev_samp","title":"DuckDB function list_stddev_samp — list_stddev_samp","text":"DuckDB macro list_stddev_samp().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_stddev_samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_stddev_samp — list_stddev_samp","text":"","code":"list_stddev_samp(l)"},{"path":"https://cynkra.github.io/dd/reference/list_stddev_samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_stddev_samp — list_stddev_samp","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_stddev_samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_stddev_samp — list_stddev_samp","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_string_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_string_agg — list_string_agg","title":"DuckDB function list_string_agg — list_string_agg","text":"DuckDB macro list_string_agg().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_string_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_string_agg — list_string_agg","text":"","code":"list_string_agg(l)"},{"path":"https://cynkra.github.io/dd/reference/list_string_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_string_agg — list_string_agg","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_string_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_string_agg — list_string_agg","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_sum — list_sum","title":"DuckDB function list_sum — list_sum","text":"DuckDB macro list_sum().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_sum — list_sum","text":"","code":"list_sum(l)"},{"path":"https://cynkra.github.io/dd/reference/list_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_sum — list_sum","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_sum — list_sum","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_transform — list_transform","title":"DuckDB function list_transform — list_transform","text":"Returns list result applying lambda function element input list. return type defined return type lambda function.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_transform — list_transform","text":"","code":"list_transform(list = `ANY[]`, `lambda(x)` = LAMBDA)"},{"path":"https://cynkra.github.io/dd/reference/list_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_transform — list_transform","text":"list [] lambda(x) LAMBDA","code":""},{"path":"https://cynkra.github.io/dd/reference/list_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_transform — list_transform","text":"[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_transform.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_transform — list_transform","text":"","code":"list_transform([1, 2, 3], lambda x : x + 1)"},{"path":"https://cynkra.github.io/dd/reference/list_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_unique — list_unique","title":"DuckDB function list_unique — list_unique","text":"Counts unique elements list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_unique — list_unique","text":"","code":"list_unique(list = `ANY[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_unique — list_unique","text":"list []","code":""},{"path":"https://cynkra.github.io/dd/reference/list_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_unique — list_unique","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/list_unique.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_unique — list_unique","text":"","code":"list_unique([1, 1, NULL, -3, 1, 5])"},{"path":"https://cynkra.github.io/dd/reference/list_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_value — list_value","title":"DuckDB function list_value — list_value","text":"Creates LIST containing argument values.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_value — list_value","text":"T","code":""},{"path":"https://cynkra.github.io/dd/reference/list_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_value — list_value","text":"\"NULL\"[] | T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_value.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function list_value — list_value","text":"list_value() list_value(= T)","code":""},{"path":"https://cynkra.github.io/dd/reference/list_value.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_value — list_value","text":"","code":"list_value(4, 5, 6)"},{"path":"https://cynkra.github.io/dd/reference/list_var_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_var_pop — list_var_pop","title":"DuckDB function list_var_pop — list_var_pop","text":"DuckDB macro list_var_pop().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_var_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_var_pop — list_var_pop","text":"","code":"list_var_pop(l)"},{"path":"https://cynkra.github.io/dd/reference/list_var_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_var_pop — list_var_pop","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_var_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_var_pop — list_var_pop","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_var_samp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_var_samp — list_var_samp","title":"DuckDB function list_var_samp — list_var_samp","text":"DuckDB macro list_var_samp().","code":""},{"path":"https://cynkra.github.io/dd/reference/list_var_samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_var_samp — list_var_samp","text":"","code":"list_var_samp(l)"},{"path":"https://cynkra.github.io/dd/reference/list_var_samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_var_samp — list_var_samp","text":"l Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_var_samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_var_samp — list_var_samp","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_where.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_where — list_where","title":"DuckDB function list_where — list_where","text":"Returns list BOOLEANs mask_list applied mask value_list.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_where — list_where","text":"","code":"list_where(value_list = `T[]`, mask_list = `BOOLEAN[]`)"},{"path":"https://cynkra.github.io/dd/reference/list_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function list_where — list_where","text":"value_list T[] mask_list BOOLEAN[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_where — list_where","text":"T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_where.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_where — list_where","text":"","code":"list_where([10, 20, 30, 40], [true, false, false, true])"},{"path":"https://cynkra.github.io/dd/reference/list_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function list_zip — list_zip","title":"DuckDB function list_zip — list_zip","text":"Zips n LISTs new LIST whose length longest list. elements structs n elements list list_1, …, list_n, missing elements replaced NULL. truncate set, lists truncated smallest list length.","code":""},{"path":"https://cynkra.github.io/dd/reference/list_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function list_zip — list_zip","text":"","code":"list_zip()"},{"path":"https://cynkra.github.io/dd/reference/list_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function list_zip — list_zip","text":"STRUCT[]","code":""},{"path":"https://cynkra.github.io/dd/reference/list_zip.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function list_zip — list_zip","text":"","code":"list_zip([1, 2], [3, 4], [5, 6]) list_zip([1, 2], [3, 4], [5, 6, 7]) list_zip([1, 2], [3, 4], [5, 6, 7], true)"},{"path":"https://cynkra.github.io/dd/reference/listagg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function listagg — listagg","title":"DuckDB function listagg — listagg","text":"Concatenates column string values optional separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/listagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function listagg — listagg","text":"str arg VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/listagg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function listagg — listagg","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/listagg.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function listagg — listagg","text":"listagg(str = ) listagg(str = , arg = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/listagg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function listagg — listagg","text":"","code":"listagg(A, '-')"},{"path":"https://cynkra.github.io/dd/reference/ln.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ln — ln","title":"DuckDB function ln — ln","text":"Computes natural logarithm x.","code":""},{"path":"https://cynkra.github.io/dd/reference/ln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ln — ln","text":"","code":"ln(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/ln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ln — ln","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/ln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ln — ln","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/ln.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ln — ln","text":"","code":"ln(2)"},{"path":"https://cynkra.github.io/dd/reference/log.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function log — log","title":"DuckDB function log — log","text":"Computes logarithm x base b. b may omitted, case default 10.","code":""},{"path":"https://cynkra.github.io/dd/reference/log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function log — log","text":"b DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function log — log","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function log — log","text":"log(b = DOUBLE) log(b = DOUBLE, x = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/log.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function log — log","text":"","code":"log(2, 64)"},{"path":"https://cynkra.github.io/dd/reference/log10.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function log10 — log10","title":"DuckDB function log10 — log10","text":"Computes 10-log x.","code":""},{"path":"https://cynkra.github.io/dd/reference/log10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function log10 — log10","text":"","code":"log10(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/log10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function log10 — log10","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log10.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function log10 — log10","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log10.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function log10 — log10","text":"","code":"log10(1000)"},{"path":"https://cynkra.github.io/dd/reference/log2.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function log2 — log2","title":"DuckDB function log2 — log2","text":"Computes 2-log x.","code":""},{"path":"https://cynkra.github.io/dd/reference/log2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function log2 — log2","text":"","code":"log2(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/log2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function log2 — log2","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function log2 — log2","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/log2.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function log2 — log2","text":"","code":"log2(8)"},{"path":"https://cynkra.github.io/dd/reference/lower.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lower — lower","title":"DuckDB function lower — lower","text":"Converts string lower case.","code":""},{"path":"https://cynkra.github.io/dd/reference/lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function lower — lower","text":"","code":"lower(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lower — lower","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function lower — lower","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lower.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function lower — lower","text":"","code":"lower('Hello')"},{"path":"https://cynkra.github.io/dd/reference/lpad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function lpad — lpad","title":"DuckDB function lpad — lpad","text":"Pads string character left count characters. Truncates string right count characters.","code":""},{"path":"https://cynkra.github.io/dd/reference/lpad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function lpad — lpad","text":"","code":"lpad(string = VARCHAR, count = INTEGER, character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/lpad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function lpad — lpad","text":"string VARCHAR count INTEGER character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lpad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function lpad — lpad","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/lpad.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function lpad — lpad","text":"","code":"lpad('hello', 8, '>')"},{"path":"https://cynkra.github.io/dd/reference/ltrim.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ltrim — ltrim","title":"DuckDB function ltrim — ltrim","text":"Removes occurrences characters left side string. characters defaults space.","code":""},{"path":"https://cynkra.github.io/dd/reference/ltrim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ltrim — ltrim","text":"string VARCHAR characters VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ltrim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ltrim — ltrim","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ltrim.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function ltrim — ltrim","text":"ltrim(string = VARCHAR) ltrim(string = VARCHAR, characters = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/ltrim.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ltrim — ltrim","text":"","code":"ltrim('    test  ') ltrim('>>>>test<<', '><')"},{"path":"https://cynkra.github.io/dd/reference/mad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mad — mad","title":"DuckDB function mad — mad","text":"Returns median absolute deviation values within x. NULL values ignored. Temporal types return positive INTERVAL.\t.","code":""},{"path":"https://cynkra.github.io/dd/reference/mad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mad — mad","text":"x DECIMAL | FLOAT | DOUBLE | DATE | TIMESTAMP | TIME | TIMESTAMP TIME ZONE | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/mad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function mad — mad","text":"DECIMAL | FLOAT | DOUBLE | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/mad.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function mad — mad","text":"mad(x = DECIMAL) mad(x = FLOAT) mad(x = DOUBLE) mad(x = DATE) mad(x = TIMESTAMP) mad(x = TIME) mad(x = `TIMESTAMP TIME ZONE`) mad(x = `TIME TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/mad.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function mad — mad","text":"","code":"mad(x)"},{"path":"https://cynkra.github.io/dd/reference/make_date.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_date — make_date","title":"DuckDB function make_date — make_date","text":"date given parts. date given struct.","code":""},{"path":"https://cynkra.github.io/dd/reference/make_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_date — make_date","text":"col0 INTEGER year BIGINT month BIGINT day BIGINT date-struct STRUCT(\"year\" BIGINT, \"month\" BIGINT, \"day\" BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/make_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function make_date — make_date","text":"DATE","code":""},{"path":"https://cynkra.github.io/dd/reference/make_date.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function make_date — make_date","text":"make_date(col0 = INTEGER) make_date(year = BIGINT, month = BIGINT, day = BIGINT) make_date(`date-struct` = `STRUCT(\"year\" BIGINT, \"month\" BIGINT, \"day\" BIGINT)`)","code":""},{"path":"https://cynkra.github.io/dd/reference/make_date.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function make_date — make_date","text":"","code":"make_date(1992, 9, 20) make_date({'year': 2024, 'month': 11, 'day': 14})"},{"path":"https://cynkra.github.io/dd/reference/make_time.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_time — make_time","title":"DuckDB function make_time — make_time","text":"time given parts.","code":""},{"path":"https://cynkra.github.io/dd/reference/make_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function make_time — make_time","text":"","code":"make_time(hour = BIGINT, minute = BIGINT, seconds = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/make_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_time — make_time","text":"hour BIGINT minute BIGINT seconds DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/make_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function make_time — make_time","text":"TIME","code":""},{"path":"https://cynkra.github.io/dd/reference/make_time.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function make_time — make_time","text":"","code":"make_time(13, 34, 27.123456)"},{"path":"https://cynkra.github.io/dd/reference/make_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_timestamp — make_timestamp","title":"DuckDB function make_timestamp — make_timestamp","text":"timestamp given parts.","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_timestamp — make_timestamp","text":"year BIGINT month BIGINT day BIGINT hour BIGINT minute BIGINT seconds DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function make_timestamp — make_timestamp","text":"TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function make_timestamp — make_timestamp","text":"make_timestamp(year = BIGINT, month = BIGINT, day = BIGINT, hour = BIGINT, minute = BIGINT, seconds = DOUBLE) make_timestamp(year = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function make_timestamp — make_timestamp","text":"","code":"make_timestamp(1992, 9, 20, 13, 34, 27.123456)"},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ms.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_timestamp_ms — make_timestamp_ms","title":"DuckDB function make_timestamp_ms — make_timestamp_ms","text":"timestamp given microseconds since epoch.","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function make_timestamp_ms — make_timestamp_ms","text":"","code":"make_timestamp_ms(nanos = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_timestamp_ms — make_timestamp_ms","text":"nanos BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function make_timestamp_ms — make_timestamp_ms","text":"TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ms.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function make_timestamp_ms — make_timestamp_ms","text":"","code":"make_timestamp_ms(1732117793000000)"},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function make_timestamp_ns — make_timestamp_ns","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"timestamp given nanoseconds since epoch.","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"","code":"make_timestamp_ns(nanos = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"nanos BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"TIMESTAMP_NS","code":""},{"path":"https://cynkra.github.io/dd/reference/make_timestamp_ns.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function make_timestamp_ns — make_timestamp_ns","text":"","code":"make_timestamp_ns(1732117793000000000)"},{"path":"https://cynkra.github.io/dd/reference/map.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map — map","title":"DuckDB function map — map","text":"Creates map set keys values.","code":""},{"path":"https://cynkra.github.io/dd/reference/map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map — map","text":"keys K[] values V[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map — map","text":"MAP(\"NULL\", \"NULL\") | MAP(K, V)","code":""},{"path":"https://cynkra.github.io/dd/reference/map.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function map — map","text":"map() map(keys = `K[]`, values = `V[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/map.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map — map","text":"","code":"map(['key1', 'key2'], ['val1', 'val2'])"},{"path":"https://cynkra.github.io/dd/reference/map_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_concat — map_concat","title":"DuckDB function map_concat — map_concat","text":"Returns map created merging input maps, key collision value taken last map key.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_concat — map_concat","text":"","code":"map_concat()"},{"path":"https://cynkra.github.io/dd/reference/map_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_concat — map_concat","text":"LIST","code":""},{"path":"https://cynkra.github.io/dd/reference/map_concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_concat — map_concat","text":"","code":"map_concat(map([1, 2], ['a', 'b']), map([2, 3], ['c', 'd']));"},{"path":"https://cynkra.github.io/dd/reference/map_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_contains — map_contains","title":"DuckDB function map_contains — map_contains","text":"Checks map contains given key.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_contains — map_contains","text":"","code":"map_contains(map = `MAP(K, V)`, key = K)"},{"path":"https://cynkra.github.io/dd/reference/map_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_contains — map_contains","text":"map MAP(K, V) key K","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_contains — map_contains","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_contains — map_contains","text":"","code":"map_contains(MAP {'key1': 10, 'key2': 20, 'key3': 30}, 'key2')"},{"path":"https://cynkra.github.io/dd/reference/map_contains_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_contains_entry — map_contains_entry","title":"DuckDB function map_contains_entry — map_contains_entry","text":"DuckDB macro map_contains_entry().","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_contains_entry — map_contains_entry","text":"","code":"map_contains_entry(map, key, value)"},{"path":"https://cynkra.github.io/dd/reference/map_contains_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_contains_entry — map_contains_entry","text":"map Unspecified. key Unspecified. value Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_contains_entry — map_contains_entry","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_contains_value — map_contains_value","title":"DuckDB function map_contains_value — map_contains_value","text":"DuckDB macro map_contains_value().","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_contains_value — map_contains_value","text":"","code":"map_contains_value(map, value)"},{"path":"https://cynkra.github.io/dd/reference/map_contains_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_contains_value — map_contains_value","text":"map Unspecified. value Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_contains_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_contains_value — map_contains_value","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_entries — map_entries","title":"DuckDB function map_entries — map_entries","text":"Returns map entries list keys/values.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_entries — map_entries","text":"","code":"map_entries(map = `MAP(K, V)`)"},{"path":"https://cynkra.github.io/dd/reference/map_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_entries — map_entries","text":"map MAP(K, V)","code":""},{"path":"https://cynkra.github.io/dd/reference/map_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_entries — map_entries","text":"STRUCT(\"key\" K, \"value\" V)[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map_entries.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_entries — map_entries","text":"","code":"map_entries(map(['key'], ['val']))"},{"path":"https://cynkra.github.io/dd/reference/map_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_extract — map_extract","title":"DuckDB function map_extract — map_extract","text":"Returns list containing value given key empty list key contained map. type key provided second parameter must match type map’s keys else error returned.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_extract — map_extract","text":"","code":"map_extract(map = `MAP(K, V)`, key = K)"},{"path":"https://cynkra.github.io/dd/reference/map_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_extract — map_extract","text":"map MAP(K, V) key K","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_extract — map_extract","text":"V[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_extract — map_extract","text":"","code":"map_extract(map(['key'], ['val']), 'key')"},{"path":"https://cynkra.github.io/dd/reference/map_extract_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_extract_value — map_extract_value","title":"DuckDB function map_extract_value — map_extract_value","text":"Returns value given key NULL key contained map. type key provided second parameter must match type map’s keys else error returned.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_extract_value — map_extract_value","text":"","code":"map_extract_value(map = `MAP(K, V)`, key = K)"},{"path":"https://cynkra.github.io/dd/reference/map_extract_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_extract_value — map_extract_value","text":"map MAP(K, V) key K","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_extract_value — map_extract_value","text":"V","code":""},{"path":"https://cynkra.github.io/dd/reference/map_extract_value.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_extract_value — map_extract_value","text":"","code":"map_extract_value(map(['key'], ['val']), 'key')"},{"path":"https://cynkra.github.io/dd/reference/map_from_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_from_entries — map_from_entries","title":"DuckDB function map_from_entries — map_from_entries","text":"Returns map created entries array.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_from_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_from_entries — map_from_entries","text":"","code":"map_from_entries(map = `STRUCT(K, V)[]`)"},{"path":"https://cynkra.github.io/dd/reference/map_from_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_from_entries — map_from_entries","text":"map STRUCT(K, V)[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map_from_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_from_entries — map_from_entries","text":"MAP(K, V)","code":""},{"path":"https://cynkra.github.io/dd/reference/map_from_entries.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_from_entries — map_from_entries","text":"","code":"map_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}]);"},{"path":"https://cynkra.github.io/dd/reference/map_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_keys — map_keys","title":"DuckDB function map_keys — map_keys","text":"Returns keys map list.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_keys — map_keys","text":"","code":"map_keys(map = `MAP(K, V)`)"},{"path":"https://cynkra.github.io/dd/reference/map_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_keys — map_keys","text":"map MAP(K, V)","code":""},{"path":"https://cynkra.github.io/dd/reference/map_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_keys — map_keys","text":"K[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map_keys.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_keys — map_keys","text":"","code":"map_keys(map(['key'], ['val']))"},{"path":"https://cynkra.github.io/dd/reference/map_to_pg_oid.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_to_pg_oid — map_to_pg_oid","title":"DuckDB function map_to_pg_oid — map_to_pg_oid","text":"DuckDB macro map_to_pg_oid().","code":""},{"path":"https://cynkra.github.io/dd/reference/map_to_pg_oid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_to_pg_oid — map_to_pg_oid","text":"","code":"map_to_pg_oid(type_name)"},{"path":"https://cynkra.github.io/dd/reference/map_to_pg_oid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_to_pg_oid — map_to_pg_oid","text":"type_name Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_to_pg_oid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_to_pg_oid — map_to_pg_oid","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_values.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function map_values — map_values","title":"DuckDB function map_values — map_values","text":"Returns values map list.","code":""},{"path":"https://cynkra.github.io/dd/reference/map_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function map_values — map_values","text":"","code":"map_values(map = `MAP(K, V)`)"},{"path":"https://cynkra.github.io/dd/reference/map_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function map_values — map_values","text":"map MAP(K, V)","code":""},{"path":"https://cynkra.github.io/dd/reference/map_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function map_values — map_values","text":"V[]","code":""},{"path":"https://cynkra.github.io/dd/reference/map_values.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function map_values — map_values","text":"","code":"map_values(map(['key'], ['val']))"},{"path":"https://cynkra.github.io/dd/reference/max.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function max — max","title":"DuckDB function max — max","text":"Returns maximum value present arg.","code":""},{"path":"https://cynkra.github.io/dd/reference/max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function max — max","text":"arg col1 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function max — max","text":"| []","code":""},{"path":"https://cynkra.github.io/dd/reference/max.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function max — max","text":"max(arg = ) max(arg = , col1 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/max.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function max — max","text":"","code":"max(A)"},{"path":"https://cynkra.github.io/dd/reference/max_by.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function max_by — max_by","title":"DuckDB function max_by — max_by","text":"Finds row maximum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/max_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function max_by — max_by","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/max_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function max_by — max_by","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/max_by.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function max_by — max_by","text":"max_by(arg = INTEGER, val = INTEGER) max_by(arg = INTEGER, val = BIGINT) max_by(arg = INTEGER, val = HUGEINT) max_by(arg = INTEGER, val = DOUBLE) max_by(arg = INTEGER, val = VARCHAR) max_by(arg = INTEGER, val = DATE) max_by(arg = INTEGER, val = TIMESTAMP) max_by(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) max_by(arg = INTEGER, val = BLOB) max_by(arg = BIGINT, val = INTEGER) max_by(arg = BIGINT, val = BIGINT) max_by(arg = BIGINT, val = HUGEINT) max_by(arg = BIGINT, val = DOUBLE) max_by(arg = BIGINT, val = VARCHAR) max_by(arg = BIGINT, val = DATE) max_by(arg = BIGINT, val = TIMESTAMP) max_by(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) max_by(arg = BIGINT, val = BLOB) max_by(arg = DOUBLE, val = INTEGER) max_by(arg = DOUBLE, val = BIGINT) max_by(arg = DOUBLE, val = HUGEINT) max_by(arg = DOUBLE, val = DOUBLE) max_by(arg = DOUBLE, val = VARCHAR) max_by(arg = DOUBLE, val = DATE) max_by(arg = DOUBLE, val = TIMESTAMP) max_by(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) max_by(arg = DOUBLE, val = BLOB) max_by(arg = VARCHAR, val = INTEGER) max_by(arg = VARCHAR, val = BIGINT) max_by(arg = VARCHAR, val = HUGEINT) max_by(arg = VARCHAR, val = DOUBLE) max_by(arg = VARCHAR, val = VARCHAR) max_by(arg = VARCHAR, val = DATE) max_by(arg = VARCHAR, val = TIMESTAMP) max_by(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) max_by(arg = VARCHAR, val = BLOB) max_by(arg = DATE, val = INTEGER) max_by(arg = DATE, val = BIGINT) max_by(arg = DATE, val = HUGEINT) max_by(arg = DATE, val = DOUBLE) max_by(arg = DATE, val = VARCHAR) max_by(arg = DATE, val = DATE) max_by(arg = DATE, val = TIMESTAMP) max_by(arg = DATE, val = `TIMESTAMP TIME ZONE`) max_by(arg = DATE, val = BLOB) max_by(arg = TIMESTAMP, val = INTEGER) max_by(arg = TIMESTAMP, val = BIGINT) max_by(arg = TIMESTAMP, val = HUGEINT) max_by(arg = TIMESTAMP, val = DOUBLE) max_by(arg = TIMESTAMP, val = VARCHAR) max_by(arg = TIMESTAMP, val = DATE) max_by(arg = TIMESTAMP, val = TIMESTAMP) max_by(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) max_by(arg = TIMESTAMP, val = BLOB) max_by(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) max_by(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) max_by(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) max_by(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) max_by(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) max_by(arg = `TIMESTAMP TIME ZONE`, val = DATE) max_by(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) max_by(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) max_by(arg = `TIMESTAMP TIME ZONE`, val = BLOB) max_by(arg = BLOB, val = INTEGER) max_by(arg = BLOB, val = BIGINT) max_by(arg = BLOB, val = HUGEINT) max_by(arg = BLOB, val = DOUBLE) max_by(arg = BLOB, val = VARCHAR) max_by(arg = BLOB, val = DATE) max_by(arg = BLOB, val = TIMESTAMP) max_by(arg = BLOB, val = `TIMESTAMP TIME ZONE`) max_by(arg = BLOB, val = BLOB) max_by(arg = DECIMAL, val = INTEGER) max_by(arg = DECIMAL, val = BIGINT) max_by(arg = DECIMAL, val = HUGEINT) max_by(arg = DECIMAL, val = DOUBLE) max_by(arg = DECIMAL, val = VARCHAR) max_by(arg = DECIMAL, val = DATE) max_by(arg = DECIMAL, val = TIMESTAMP) max_by(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) max_by(arg = DECIMAL, val = BLOB) max_by(arg = , val = INTEGER) max_by(arg = , val = BIGINT) max_by(arg = , val = HUGEINT) max_by(arg = , val = DOUBLE) max_by(arg = , val = VARCHAR) max_by(arg = , val = DATE) max_by(arg = , val = TIMESTAMP) max_by(arg = , val = `TIMESTAMP TIME ZONE`) max_by(arg = , val = BLOB) max_by(arg = , val = ) max_by(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/max_by.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function max_by — max_by","text":"","code":"max_by(A, B)"},{"path":"https://cynkra.github.io/dd/reference/md5.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function md5 — md5","title":"DuckDB function md5 — md5","text":"Returns MD5 hash string VARCHAR. Returns MD5 hash blob VARCHAR.","code":""},{"path":"https://cynkra.github.io/dd/reference/md5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function md5 — md5","text":"string VARCHAR blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/md5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function md5 — md5","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/md5.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function md5 — md5","text":"md5(string = VARCHAR) md5(blob = BLOB)","code":""},{"path":"https://cynkra.github.io/dd/reference/md5.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function md5 — md5","text":"","code":"md5('abc') md5('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/md5_number.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function md5_number — md5_number","title":"DuckDB function md5_number — md5_number","text":"Returns MD5 hash string HUGEINT. Returns MD5 hash blob HUGEINT.","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function md5_number — md5_number","text":"string VARCHAR blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function md5_number — md5_number","text":"UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function md5_number — md5_number","text":"md5_number(string = VARCHAR) md5_number(blob = BLOB)","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function md5_number — md5_number","text":"","code":"md5_number('abc') md5_number('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/md5_number_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function md5_number_lower — md5_number_lower","title":"DuckDB function md5_number_lower — md5_number_lower","text":"DuckDB macro md5_number_lower().","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function md5_number_lower — md5_number_lower","text":"","code":"md5_number_lower(param)"},{"path":"https://cynkra.github.io/dd/reference/md5_number_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function md5_number_lower — md5_number_lower","text":"param Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function md5_number_lower — md5_number_lower","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number_upper.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function md5_number_upper — md5_number_upper","title":"DuckDB function md5_number_upper — md5_number_upper","text":"DuckDB macro md5_number_upper().","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number_upper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function md5_number_upper — md5_number_upper","text":"","code":"md5_number_upper(param)"},{"path":"https://cynkra.github.io/dd/reference/md5_number_upper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function md5_number_upper — md5_number_upper","text":"param Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/md5_number_upper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function md5_number_upper — md5_number_upper","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/mean.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mean — mean","title":"DuckDB function mean — mean","text":"Calculates average value tuples x.","code":""},{"path":"https://cynkra.github.io/dd/reference/mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mean — mean","text":"x DECIMAL | SMALLINT | INTEGER | BIGINT | HUGEINT | INTERVAL | DOUBLE | TIMESTAMP | TIMESTAMP TIME ZONE | TIME | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function mean — mean","text":"DECIMAL | DOUBLE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE | TIME | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/mean.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function mean — mean","text":"mean(x = DECIMAL) mean(x = SMALLINT) mean(x = INTEGER) mean(x = BIGINT) mean(x = HUGEINT) mean(x = INTERVAL) mean(x = DOUBLE) mean(x = TIMESTAMP) mean(x = `TIMESTAMP TIME ZONE`) mean(x = TIME) mean(x = `TIME TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/mean.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function mean — mean","text":"","code":"SUM(x) / COUNT(*)"},{"path":"https://cynkra.github.io/dd/reference/median.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function median — median","title":"DuckDB function median — median","text":"Returns middle value set. NULL values ignored. even value counts, interpolate-able types (numeric, date/time) return average two middle values. Non-interpolate-able types (everything else) return lower two middle values.","code":""},{"path":"https://cynkra.github.io/dd/reference/median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function median — median","text":"","code":"median(x = ANY)"},{"path":"https://cynkra.github.io/dd/reference/median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function median — median","text":"x ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/median.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function median — median","text":"","code":"median(x)"},{"path":"https://cynkra.github.io/dd/reference/metadata_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function metadata_info — metadata_info","title":"DuckDB function metadata_info — metadata_info","text":"DuckDB function metadata_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/metadata_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function metadata_info — metadata_info","text":"","code":"metadata_info()"},{"path":"https://cynkra.github.io/dd/reference/metadata_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function metadata_info — metadata_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/microsecond.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function microsecond — microsecond","title":"DuckDB function microsecond — microsecond","text":"Extract microsecond component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/microsecond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function microsecond — microsecond","text":"ts DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/microsecond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function microsecond — microsecond","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/microsecond.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function microsecond — microsecond","text":"microsecond(ts = DATE) microsecond(ts = INTERVAL) microsecond(ts = TIME) microsecond(ts = TIMESTAMP) microsecond(ts = `TIME TIME ZONE`) microsecond(ts = TIME_NS) microsecond(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/microsecond.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function microsecond — microsecond","text":"","code":"microsecond(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/millennium.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function millennium — millennium","title":"DuckDB function millennium — millennium","text":"Extract millennium component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/millennium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function millennium — millennium","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/millennium.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function millennium — millennium","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/millennium.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function millennium — millennium","text":"millennium(ts = DATE) millennium(ts = INTERVAL) millennium(ts = TIMESTAMP) millennium(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/millennium.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function millennium — millennium","text":"","code":"millennium(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/millisecond.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function millisecond — millisecond","title":"DuckDB function millisecond — millisecond","text":"Extract millisecond component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/millisecond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function millisecond — millisecond","text":"ts DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/millisecond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function millisecond — millisecond","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/millisecond.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function millisecond — millisecond","text":"millisecond(ts = DATE) millisecond(ts = INTERVAL) millisecond(ts = TIME) millisecond(ts = TIMESTAMP) millisecond(ts = `TIME TIME ZONE`) millisecond(ts = TIME_NS) millisecond(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/millisecond.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function millisecond — millisecond","text":"","code":"millisecond(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/min.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function min — min","title":"DuckDB function min — min","text":"Returns minimum value present arg.","code":""},{"path":"https://cynkra.github.io/dd/reference/min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function min — min","text":"arg col1 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function min — min","text":"| []","code":""},{"path":"https://cynkra.github.io/dd/reference/min.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function min — min","text":"min(arg = ) min(arg = , col1 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/min.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function min — min","text":"","code":"min(A)"},{"path":"https://cynkra.github.io/dd/reference/min_by.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function min_by — min_by","title":"DuckDB function min_by — min_by","text":"Finds row minimum val. Calculates non-NULL arg expression row.","code":""},{"path":"https://cynkra.github.io/dd/reference/min_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function min_by — min_by","text":"arg INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | val INTEGER | BIGINT | HUGEINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | col2 BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/min_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function min_by — min_by","text":"INTEGER | BIGINT | DOUBLE | VARCHAR | DATE | TIMESTAMP | TIMESTAMP TIME ZONE | BLOB | DECIMAL | | []","code":""},{"path":"https://cynkra.github.io/dd/reference/min_by.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function min_by — min_by","text":"min_by(arg = INTEGER, val = INTEGER) min_by(arg = INTEGER, val = BIGINT) min_by(arg = INTEGER, val = HUGEINT) min_by(arg = INTEGER, val = DOUBLE) min_by(arg = INTEGER, val = VARCHAR) min_by(arg = INTEGER, val = DATE) min_by(arg = INTEGER, val = TIMESTAMP) min_by(arg = INTEGER, val = `TIMESTAMP TIME ZONE`) min_by(arg = INTEGER, val = BLOB) min_by(arg = BIGINT, val = INTEGER) min_by(arg = BIGINT, val = BIGINT) min_by(arg = BIGINT, val = HUGEINT) min_by(arg = BIGINT, val = DOUBLE) min_by(arg = BIGINT, val = VARCHAR) min_by(arg = BIGINT, val = DATE) min_by(arg = BIGINT, val = TIMESTAMP) min_by(arg = BIGINT, val = `TIMESTAMP TIME ZONE`) min_by(arg = BIGINT, val = BLOB) min_by(arg = DOUBLE, val = INTEGER) min_by(arg = DOUBLE, val = BIGINT) min_by(arg = DOUBLE, val = HUGEINT) min_by(arg = DOUBLE, val = DOUBLE) min_by(arg = DOUBLE, val = VARCHAR) min_by(arg = DOUBLE, val = DATE) min_by(arg = DOUBLE, val = TIMESTAMP) min_by(arg = DOUBLE, val = `TIMESTAMP TIME ZONE`) min_by(arg = DOUBLE, val = BLOB) min_by(arg = VARCHAR, val = INTEGER) min_by(arg = VARCHAR, val = BIGINT) min_by(arg = VARCHAR, val = HUGEINT) min_by(arg = VARCHAR, val = DOUBLE) min_by(arg = VARCHAR, val = VARCHAR) min_by(arg = VARCHAR, val = DATE) min_by(arg = VARCHAR, val = TIMESTAMP) min_by(arg = VARCHAR, val = `TIMESTAMP TIME ZONE`) min_by(arg = VARCHAR, val = BLOB) min_by(arg = DATE, val = INTEGER) min_by(arg = DATE, val = BIGINT) min_by(arg = DATE, val = HUGEINT) min_by(arg = DATE, val = DOUBLE) min_by(arg = DATE, val = VARCHAR) min_by(arg = DATE, val = DATE) min_by(arg = DATE, val = TIMESTAMP) min_by(arg = DATE, val = `TIMESTAMP TIME ZONE`) min_by(arg = DATE, val = BLOB) min_by(arg = TIMESTAMP, val = INTEGER) min_by(arg = TIMESTAMP, val = BIGINT) min_by(arg = TIMESTAMP, val = HUGEINT) min_by(arg = TIMESTAMP, val = DOUBLE) min_by(arg = TIMESTAMP, val = VARCHAR) min_by(arg = TIMESTAMP, val = DATE) min_by(arg = TIMESTAMP, val = TIMESTAMP) min_by(arg = TIMESTAMP, val = `TIMESTAMP TIME ZONE`) min_by(arg = TIMESTAMP, val = BLOB) min_by(arg = `TIMESTAMP TIME ZONE`, val = INTEGER) min_by(arg = `TIMESTAMP TIME ZONE`, val = BIGINT) min_by(arg = `TIMESTAMP TIME ZONE`, val = HUGEINT) min_by(arg = `TIMESTAMP TIME ZONE`, val = DOUBLE) min_by(arg = `TIMESTAMP TIME ZONE`, val = VARCHAR) min_by(arg = `TIMESTAMP TIME ZONE`, val = DATE) min_by(arg = `TIMESTAMP TIME ZONE`, val = TIMESTAMP) min_by(arg = `TIMESTAMP TIME ZONE`, val = `TIMESTAMP TIME ZONE`) min_by(arg = `TIMESTAMP TIME ZONE`, val = BLOB) min_by(arg = BLOB, val = INTEGER) min_by(arg = BLOB, val = BIGINT) min_by(arg = BLOB, val = HUGEINT) min_by(arg = BLOB, val = DOUBLE) min_by(arg = BLOB, val = VARCHAR) min_by(arg = BLOB, val = DATE) min_by(arg = BLOB, val = TIMESTAMP) min_by(arg = BLOB, val = `TIMESTAMP TIME ZONE`) min_by(arg = BLOB, val = BLOB) min_by(arg = DECIMAL, val = INTEGER) min_by(arg = DECIMAL, val = BIGINT) min_by(arg = DECIMAL, val = HUGEINT) min_by(arg = DECIMAL, val = DOUBLE) min_by(arg = DECIMAL, val = VARCHAR) min_by(arg = DECIMAL, val = DATE) min_by(arg = DECIMAL, val = TIMESTAMP) min_by(arg = DECIMAL, val = `TIMESTAMP TIME ZONE`) min_by(arg = DECIMAL, val = BLOB) min_by(arg = , val = INTEGER) min_by(arg = , val = BIGINT) min_by(arg = , val = HUGEINT) min_by(arg = , val = DOUBLE) min_by(arg = , val = VARCHAR) min_by(arg = , val = DATE) min_by(arg = , val = TIMESTAMP) min_by(arg = , val = `TIMESTAMP TIME ZONE`) min_by(arg = , val = BLOB) min_by(arg = , val = ) min_by(arg = , val = , col2 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/min_by.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function min_by — min_by","text":"","code":"min_by(A, B)"},{"path":"https://cynkra.github.io/dd/reference/minute.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function minute — minute","title":"DuckDB function minute — minute","text":"Extract minute component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function minute — minute","text":"ts DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function minute — minute","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/minute.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function minute — minute","text":"minute(ts = DATE) minute(ts = INTERVAL) minute(ts = TIME) minute(ts = TIMESTAMP) minute(ts = `TIME TIME ZONE`) minute(ts = TIME_NS) minute(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/minute.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function minute — minute","text":"","code":"minute(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/mismatches.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mismatches — mismatches","title":"DuckDB function mismatches — mismatches","text":"Hamming distance strings, .e., number positions different characters two strings equal length. Strings must equal length. Characters different cases (e.g., ) considered different.","code":""},{"path":"https://cynkra.github.io/dd/reference/mismatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function mismatches — mismatches","text":"","code":"mismatches(s1 = VARCHAR, s2 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/mismatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mismatches — mismatches","text":"s1 VARCHAR s2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/mismatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function mismatches — mismatches","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/mismatches.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function mismatches — mismatches","text":"","code":"mismatches('duck', 'luck')"},{"path":"https://cynkra.github.io/dd/reference/mod.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mod — mod","title":"DuckDB function mod — mod","text":"DuckDB function mod().","code":""},{"path":"https://cynkra.github.io/dd/reference/mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mod — mod","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function mod — mod","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/mod.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function mod — mod","text":"mod(col0 = TINYINT, col1 = TINYINT) mod(col0 = SMALLINT, col1 = SMALLINT) mod(col0 = INTEGER, col1 = INTEGER) mod(col0 = BIGINT, col1 = BIGINT) mod(col0 = HUGEINT, col1 = HUGEINT) mod(col0 = FLOAT, col1 = FLOAT) mod(col0 = DOUBLE, col1 = DOUBLE) mod(col0 = DECIMAL, col1 = DECIMAL) mod(col0 = UTINYINT, col1 = UTINYINT) mod(col0 = USMALLINT, col1 = USMALLINT) mod(col0 = UINTEGER, col1 = UINTEGER) mod(col0 = UBIGINT, col1 = UBIGINT) mod(col0 = UHUGEINT, col1 = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/mode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function mode — mode","title":"DuckDB function mode — mode","text":"Returns frequent value values within x. NULL values ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function mode — mode","text":"","code":"mode(x = ANY)"},{"path":"https://cynkra.github.io/dd/reference/mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function mode — mode","text":"x ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/month.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function month — month","title":"DuckDB function month — month","text":"Extract month component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function month — month","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function month — month","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/month.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function month — month","text":"month(ts = DATE) month(ts = INTERVAL) month(ts = TIMESTAMP) month(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/month.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function month — month","text":"","code":"month(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/monthname.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function monthname — monthname","title":"DuckDB function monthname — monthname","text":"(English) name month.","code":""},{"path":"https://cynkra.github.io/dd/reference/monthname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function monthname — monthname","text":"ts DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/monthname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function monthname — monthname","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/monthname.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function monthname — monthname","text":"monthname(ts = DATE) monthname(ts = TIMESTAMP) monthname(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/monthname.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function monthname — monthname","text":"","code":"monthname(TIMESTAMP '1992-09-20')"},{"path":"https://cynkra.github.io/dd/reference/multiply.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function multiply — multiply","title":"DuckDB function multiply — multiply","text":"DuckDB function multiply().","code":""},{"path":"https://cynkra.github.io/dd/reference/multiply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function multiply — multiply","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/multiply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function multiply — multiply","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/multiply.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function multiply — multiply","text":"multiply(col0 = TINYINT, col1 = TINYINT) multiply(col0 = SMALLINT, col1 = SMALLINT) multiply(col0 = INTEGER, col1 = INTEGER) multiply(col0 = BIGINT, col1 = BIGINT) multiply(col0 = HUGEINT, col1 = HUGEINT) multiply(col0 = FLOAT, col1 = FLOAT) multiply(col0 = DOUBLE, col1 = DOUBLE) multiply(col0 = DECIMAL, col1 = DECIMAL) multiply(col0 = UTINYINT, col1 = UTINYINT) multiply(col0 = USMALLINT, col1 = USMALLINT) multiply(col0 = UINTEGER, col1 = UINTEGER) multiply(col0 = UBIGINT, col1 = UBIGINT) multiply(col0 = UHUGEINT, col1 = UHUGEINT) multiply(col0 = INTERVAL, col1 = DOUBLE) multiply(col0 = DOUBLE, col1 = INTERVAL) multiply(col0 = BIGINT, col1 = INTERVAL) multiply(col0 = INTERVAL, col1 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/nanosecond.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nanosecond — nanosecond","title":"DuckDB function nanosecond — nanosecond","text":"Extract nanosecond component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/nanosecond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nanosecond — nanosecond","text":"tsns DATE | TIMESTAMP | INTERVAL | TIME | TIME_NS | TIME TIME ZONE | TIMESTAMP_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/nanosecond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function nanosecond — nanosecond","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/nanosecond.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function nanosecond — nanosecond","text":"nanosecond(tsns = DATE) nanosecond(tsns = TIMESTAMP) nanosecond(tsns = INTERVAL) nanosecond(tsns = TIME) nanosecond(tsns = TIME_NS) nanosecond(tsns = `TIME TIME ZONE`) nanosecond(tsns = TIMESTAMP_NS) nanosecond(tsns = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/nanosecond.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function nanosecond — nanosecond","text":"","code":"nanosecond(timestamp_ns '2021-08-03 11:59:44.123456789')"},{"path":"https://cynkra.github.io/dd/reference/nextafter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nextafter — nextafter","title":"DuckDB function nextafter — nextafter","text":"Returns next floating point value x direction y.","code":""},{"path":"https://cynkra.github.io/dd/reference/nextafter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nextafter — nextafter","text":"x DOUBLE | FLOAT y DOUBLE | FLOAT","code":""},{"path":"https://cynkra.github.io/dd/reference/nextafter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function nextafter — nextafter","text":"DOUBLE | FLOAT","code":""},{"path":"https://cynkra.github.io/dd/reference/nextafter.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function nextafter — nextafter","text":"nextafter(x = DOUBLE, y = DOUBLE) nextafter(x = FLOAT, y = FLOAT)","code":""},{"path":"https://cynkra.github.io/dd/reference/nextafter.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function nextafter — nextafter","text":"","code":"nextafter(1::float, 2::float)"},{"path":"https://cynkra.github.io/dd/reference/nextval.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nextval — nextval","title":"DuckDB function nextval — nextval","text":"Return following value sequence.","code":""},{"path":"https://cynkra.github.io/dd/reference/nextval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function nextval — nextval","text":"","code":"nextval(`'sequence_name'` = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/nextval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nextval — nextval","text":"'sequence_name' VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/nextval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function nextval — nextval","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/nextval.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function nextval — nextval","text":"","code":"nextval('my_sequence_name')"},{"path":"https://cynkra.github.io/dd/reference/nfc_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nfc_normalize — nfc_normalize","title":"DuckDB function nfc_normalize — nfc_normalize","text":"Converts string Unicode NFC normalized string. Useful comparisons ordering text data mixed NFC normalized .","code":""},{"path":"https://cynkra.github.io/dd/reference/nfc_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function nfc_normalize — nfc_normalize","text":"","code":"nfc_normalize(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/nfc_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nfc_normalize — nfc_normalize","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/nfc_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function nfc_normalize — nfc_normalize","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/nfc_normalize.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function nfc_normalize — nfc_normalize","text":"","code":"nfc_normalize('ardèch')"},{"path":"https://cynkra.github.io/dd/reference/normalized_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function normalized_interval — normalized_interval","title":"DuckDB function normalized_interval — normalized_interval","text":"Normalizes INTERVAL equivalent interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/normalized_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function normalized_interval — normalized_interval","text":"","code":"normalized_interval(interval = INTERVAL)"},{"path":"https://cynkra.github.io/dd/reference/normalized_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function normalized_interval — normalized_interval","text":"interval INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/normalized_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function normalized_interval — normalized_interval","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/normalized_interval.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function normalized_interval — normalized_interval","text":"","code":"normalized_interval(INTERVAL '30 days')"},{"path":"https://cynkra.github.io/dd/reference/not-__postfix.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function !__postfix — not-__postfix","title":"DuckDB function !__postfix — not-__postfix","text":"Factorial x. Computes product current integer integers .","code":""},{"path":"https://cynkra.github.io/dd/reference/not-__postfix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function !__postfix — not-__postfix","text":"","code":"`!__postfix`(x = INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/not-__postfix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function !__postfix — not-__postfix","text":"x INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/not-__postfix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function !__postfix — not-__postfix","text":"HUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/not-__postfix.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function !__postfix — not-__postfix","text":"","code":"4!"},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle-times.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function !~~* — not-~~*","title":"DuckDB function !~~* — not-~~*","text":"DuckDB function !~~*().","code":""},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle-times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function !~~* — not-~~*","text":"","code":"`!~~*`(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle-times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function !~~* — not-~~*","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle-times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function !~~* — not-~~*","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function !~~ — not-~~","title":"DuckDB function !~~ — not-~~","text":"DuckDB function !~~().","code":""},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function !~~ — not-~~","text":"","code":"`!~~`(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function !~~ — not-~~","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/not-twiddle-twiddle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function !~~ — not-~~","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/not_ilike_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function not_ilike_escape — not_ilike_escape","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"Returns false string matches like_specifier (see Pattern Matching) using case-insensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"https://cynkra.github.io/dd/reference/not_ilike_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"","code":"not_ilike_escape(string = VARCHAR, like_specifier = VARCHAR, escape_character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/not_ilike_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/not_ilike_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/not_ilike_escape.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function not_ilike_escape — not_ilike_escape","text":"","code":"not_ilike_escape('A%c', 'a$%C', '$')"},{"path":"https://cynkra.github.io/dd/reference/not_like_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function not_like_escape — not_like_escape","title":"DuckDB function not_like_escape — not_like_escape","text":"Returns false string matches like_specifier (see Pattern Matching) using case-sensitive matching. escape_character used search wildcard characters string.","code":""},{"path":"https://cynkra.github.io/dd/reference/not_like_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function not_like_escape — not_like_escape","text":"","code":"not_like_escape(string = VARCHAR, like_specifier = VARCHAR, escape_character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/not_like_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function not_like_escape — not_like_escape","text":"string VARCHAR like_specifier VARCHAR escape_character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/not_like_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function not_like_escape — not_like_escape","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/not_like_escape.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function not_like_escape — not_like_escape","text":"","code":"not_like_escape('a%c', 'a$%c', '$')"},{"path":"https://cynkra.github.io/dd/reference/now.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function now — now","title":"DuckDB function now — now","text":"Returns current timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function now — now","text":"","code":"now()"},{"path":"https://cynkra.github.io/dd/reference/now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function now — now","text":"TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/now.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function now — now","text":"","code":"now()"},{"path":"https://cynkra.github.io/dd/reference/nullif.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function nullif — nullif","title":"DuckDB function nullif — nullif","text":"DuckDB macro nullif().","code":""},{"path":"https://cynkra.github.io/dd/reference/nullif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function nullif — nullif","text":"","code":"nullif(a, b)"},{"path":"https://cynkra.github.io/dd/reference/nullif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function nullif — nullif","text":"Unspecified. b Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/nullif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function nullif — nullif","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/obj_description.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function obj_description — obj_description","title":"DuckDB function obj_description — obj_description","text":"DuckDB macro obj_description().","code":""},{"path":"https://cynkra.github.io/dd/reference/obj_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function obj_description — obj_description","text":"","code":"obj_description(object_oid, catalog_name)"},{"path":"https://cynkra.github.io/dd/reference/obj_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function obj_description — obj_description","text":"object_oid Unspecified. catalog_name Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/obj_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function obj_description — obj_description","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/octet_length.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function octet_length — octet_length","title":"DuckDB function octet_length — octet_length","text":"Number bytes blob. Returns number bytes bitstring.","code":""},{"path":"https://cynkra.github.io/dd/reference/octet_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function octet_length — octet_length","text":"blob BLOB bitstring BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/octet_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function octet_length — octet_length","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/octet_length.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function octet_length — octet_length","text":"octet_length(blob = BLOB) octet_length(bitstring = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/octet_length.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function octet_length — octet_length","text":"","code":"octet_length('\\xAA\\xBB'::BLOB) octet_length('1101011'::BITSTRING)"},{"path":"https://cynkra.github.io/dd/reference/or-or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function || — or--or","title":"DuckDB function || — or--or","text":"Concatenates two strings, lists, blobs. NULL input results NULL. See also concat(arg1, arg2, ...) list_concat(list1, list2, ...).","code":""},{"path":"https://cynkra.github.io/dd/reference/or-or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function || — or--or","text":"","code":"ANY || ANY"},{"path":"https://cynkra.github.io/dd/reference/or-or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function || — or--or","text":"arg1 arg2 ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/or-or.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function || — or--or","text":"","code":"'Duck' || 'DB' [1, 2, 3] || [4, 5, 6] '\\xAA'::BLOB || '\\xBB'::BLOB"},{"path":"https://cynkra.github.io/dd/reference/or.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function | — or-","title":"DuckDB function | — or-","text":"Bitwise .","code":""},{"path":"https://cynkra.github.io/dd/reference/or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function | — or-","text":"left TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT right TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function | — or-","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/or.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function | — or-","text":"`|`(left = TINYINT, right = TINYINT) `|`(left = SMALLINT, right = SMALLINT) `|`(left = INTEGER, right = INTEGER) `|`(left = BIGINT, right = BIGINT) `|`(left = HUGEINT, right = HUGEINT) `|`(left = UTINYINT, right = UTINYINT) `|`(left = USMALLINT, right = USMALLINT) `|`(left = UINTEGER, right = UINTEGER) `|`(left = UBIGINT, right = UBIGINT) `|`(left = UHUGEINT, right = UHUGEINT) `|`(left = BIT, right = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/or.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function | — or-","text":"","code":"32 | 3"},{"path":"https://cynkra.github.io/dd/reference/ord.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ord — ord","title":"DuckDB function ord — ord","text":"Returns INTEGER representing unicode codepoint first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/ord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ord — ord","text":"","code":"ord(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/ord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ord — ord","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ord — ord","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/ord.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ord — ord","text":"","code":"[unicode('âbcd'), unicode('â'), unicode(''), unicode(NULL)]"},{"path":"https://cynkra.github.io/dd/reference/parquet_bloom_probe.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_bloom_probe — parquet_bloom_probe","title":"DuckDB function parquet_bloom_probe — parquet_bloom_probe","text":"DuckDB function parquet_bloom_probe().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_bloom_probe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_bloom_probe — parquet_bloom_probe","text":"col0 VARCHAR | VARCHAR[] col1 VARCHAR col2 ","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_bloom_probe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_bloom_probe — parquet_bloom_probe","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_bloom_probe.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_bloom_probe — parquet_bloom_probe","text":"parquet_bloom_probe(col0 = VARCHAR, col1 = VARCHAR, col2 = ) parquet_bloom_probe(col0 = `VARCHAR[]`, col1 = VARCHAR, col2 = )","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_file_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_file_metadata — parquet_file_metadata","title":"DuckDB function parquet_file_metadata — parquet_file_metadata","text":"DuckDB function parquet_file_metadata().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_file_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_file_metadata — parquet_file_metadata","text":"col0 VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_file_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_file_metadata — parquet_file_metadata","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_file_metadata.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_file_metadata — parquet_file_metadata","text":"parquet_file_metadata(col0 = VARCHAR) parquet_file_metadata(col0 = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_kv_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_kv_metadata — parquet_kv_metadata","title":"DuckDB function parquet_kv_metadata — parquet_kv_metadata","text":"DuckDB function parquet_kv_metadata().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_kv_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_kv_metadata — parquet_kv_metadata","text":"col0 VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_kv_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_kv_metadata — parquet_kv_metadata","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_kv_metadata.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_kv_metadata — parquet_kv_metadata","text":"parquet_kv_metadata(col0 = VARCHAR) parquet_kv_metadata(col0 = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_metadata — parquet_metadata","title":"DuckDB function parquet_metadata — parquet_metadata","text":"DuckDB function parquet_metadata().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_metadata — parquet_metadata","text":"col0 VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_metadata — parquet_metadata","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_metadata.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_metadata — parquet_metadata","text":"parquet_metadata(col0 = VARCHAR) parquet_metadata(col0 = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_scan — parquet_scan","title":"DuckDB function parquet_scan — parquet_scan","text":"DuckDB function parquet_scan().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_scan — parquet_scan","text":"col0 VARCHAR | VARCHAR[] can_have_nan BOOLEAN encryption_config file_row_number BOOLEAN schema parquet_version VARCHAR filename binary_as_string BOOLEAN debug_use_openssl BOOLEAN union_by_name BOOLEAN explicit_cardinality UBIGINT compression VARCHAR hive_types hive_partitioning BOOLEAN hive_types_autocast BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_scan — parquet_scan","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_scan.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_scan — parquet_scan","text":"parquet_scan(col0 = VARCHAR, can_have_nan = BOOLEAN, encryption_config = , file_row_number = BOOLEAN, schema = , parquet_version = VARCHAR, filename = , binary_as_string = BOOLEAN, debug_use_openssl = BOOLEAN, union_by_name = BOOLEAN, explicit_cardinality = UBIGINT, compression = VARCHAR, hive_types = , hive_partitioning = BOOLEAN, hive_types_autocast = BOOLEAN) parquet_scan(col0 = `VARCHAR[]`, hive_types_autocast = BOOLEAN, hive_partitioning = BOOLEAN, hive_types = , compression = VARCHAR, explicit_cardinality = UBIGINT, union_by_name = BOOLEAN, debug_use_openssl = BOOLEAN, binary_as_string = BOOLEAN, filename = , parquet_version = VARCHAR, schema = , file_row_number = BOOLEAN, encryption_config = , can_have_nan = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parquet_schema — parquet_schema","title":"DuckDB function parquet_schema — parquet_schema","text":"DuckDB function parquet_schema().","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parquet_schema — parquet_schema","text":"col0 VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parquet_schema — parquet_schema","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/parquet_schema.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parquet_schema — parquet_schema","text":"parquet_schema(col0 = VARCHAR) parquet_schema(col0 = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirname.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parse_dirname — parse_dirname","title":"DuckDB function parse_dirname — parse_dirname","text":"Returns top-level directory name given path. separator options: system, both_slash (default), forward_slash, backslash.","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parse_dirname — parse_dirname","text":"path VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parse_dirname — parse_dirname","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirname.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parse_dirname — parse_dirname","text":"parse_dirname(path = VARCHAR) parse_dirname(path = VARCHAR, separator = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirname.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function parse_dirname — parse_dirname","text":"","code":"parse_dirname('path/to/file.csv', 'system')"},{"path":"https://cynkra.github.io/dd/reference/parse_dirpath.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parse_dirpath — parse_dirpath","title":"DuckDB function parse_dirpath — parse_dirpath","text":"Returns head path (pathname last slash) similarly Python's os.path.dirname. separator options: system, both_slash (default), forward_slash, backslash.","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirpath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parse_dirpath — parse_dirpath","text":"path VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirpath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parse_dirpath — parse_dirpath","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirpath.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parse_dirpath — parse_dirpath","text":"parse_dirpath(path = VARCHAR) parse_dirpath(path = VARCHAR, separator = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_dirpath.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function parse_dirpath — parse_dirpath","text":"","code":"parse_dirpath('path/to/file.csv', 'forward_slash')"},{"path":"https://cynkra.github.io/dd/reference/parse_duckdb_log_message.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parse_duckdb_log_message — parse_duckdb_log_message","title":"DuckDB function parse_duckdb_log_message — parse_duckdb_log_message","text":"Parse message expected logical type.","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_duckdb_log_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function parse_duckdb_log_message — parse_duckdb_log_message","text":"","code":"parse_duckdb_log_message(type = VARCHAR, message = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/parse_duckdb_log_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parse_duckdb_log_message — parse_duckdb_log_message","text":"type VARCHAR message VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/parse_duckdb_log_message.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function parse_duckdb_log_message — parse_duckdb_log_message","text":"","code":"parse_duckdb_log_message('FileSystem', log_message)"},{"path":"https://cynkra.github.io/dd/reference/parse_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parse_filename — parse_filename","title":"DuckDB function parse_filename — parse_filename","text":"Returns last component path similarly Python's os.path.basename function. trim_extension true, file extension removed (defaults false). separator options: system, both_slash (default), forward_slash, backslash.","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parse_filename — parse_filename","text":"string VARCHAR trim_extension VARCHAR | BOOLEAN separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parse_filename — parse_filename","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_filename.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parse_filename — parse_filename","text":"parse_filename(string = VARCHAR) parse_filename(string = VARCHAR, trim_extension = VARCHAR) parse_filename(string = VARCHAR, trim_extension = BOOLEAN) parse_filename(string = VARCHAR, trim_extension = BOOLEAN, separator = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_filename.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function parse_filename — parse_filename","text":"","code":"parse_filename('path/to/file.csv', true, 'forward_slash')"},{"path":"https://cynkra.github.io/dd/reference/parse_path.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function parse_path — parse_path","title":"DuckDB function parse_path — parse_path","text":"Returns list components (directories filename) path similarly Python's pathlib.parts function. separator options: system, both_slash (default), forward_slash, backslash.","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function parse_path — parse_path","text":"path VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function parse_path — parse_path","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_path.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function parse_path — parse_path","text":"parse_path(path = VARCHAR) parse_path(path = VARCHAR, separator = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/parse_path.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function parse_path — parse_path","text":"","code":"parse_path('path/to/file.csv', 'system')"},{"path":"https://cynkra.github.io/dd/reference/pg_collation_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_collation_is_visible — pg_collation_is_visible","title":"DuckDB function pg_collation_is_visible — pg_collation_is_visible","text":"DuckDB macro pg_collation_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_collation_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_collation_is_visible — pg_collation_is_visible","text":"","code":"pg_collation_is_visible(collation_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_collation_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_collation_is_visible — pg_collation_is_visible","text":"collation_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_collation_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_collation_is_visible — pg_collation_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_conf_load_time.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_conf_load_time — pg_conf_load_time","title":"DuckDB function pg_conf_load_time — pg_conf_load_time","text":"DuckDB macro pg_conf_load_time().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_conf_load_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_conf_load_time — pg_conf_load_time","text":"","code":"pg_conf_load_time()"},{"path":"https://cynkra.github.io/dd/reference/pg_conf_load_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_conf_load_time — pg_conf_load_time","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_conversion_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_conversion_is_visible — pg_conversion_is_visible","title":"DuckDB function pg_conversion_is_visible — pg_conversion_is_visible","text":"DuckDB macro pg_conversion_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_conversion_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_conversion_is_visible — pg_conversion_is_visible","text":"","code":"pg_conversion_is_visible(conversion_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_conversion_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_conversion_is_visible — pg_conversion_is_visible","text":"conversion_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_conversion_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_conversion_is_visible — pg_conversion_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_function_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_function_is_visible — pg_function_is_visible","title":"DuckDB function pg_function_is_visible — pg_function_is_visible","text":"DuckDB macro pg_function_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_function_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_function_is_visible — pg_function_is_visible","text":"","code":"pg_function_is_visible(function_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_function_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_function_is_visible — pg_function_is_visible","text":"function_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_function_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_function_is_visible — pg_function_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_constraintdef.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_get_constraintdef — pg_get_constraintdef","title":"DuckDB function pg_get_constraintdef — pg_get_constraintdef","text":"DuckDB function pg_get_constraintdef().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_constraintdef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_get_constraintdef — pg_get_constraintdef","text":"constraint_oid Unspecified. pretty_bool Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_constraintdef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_get_constraintdef — pg_get_constraintdef","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_constraintdef.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function pg_get_constraintdef — pg_get_constraintdef","text":"pg_get_constraintdef(constraint_oid) pg_get_constraintdef(constraint_oid, pretty_bool)","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_get_expr — pg_get_expr","title":"DuckDB function pg_get_expr — pg_get_expr","text":"DuckDB macro pg_get_expr().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_get_expr — pg_get_expr","text":"","code":"pg_get_expr(pg_node_tree, relation_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_get_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_get_expr — pg_get_expr","text":"pg_node_tree Unspecified. relation_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_get_expr — pg_get_expr","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_viewdef.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_get_viewdef — pg_get_viewdef","title":"DuckDB function pg_get_viewdef — pg_get_viewdef","text":"DuckDB macro pg_get_viewdef().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_viewdef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_get_viewdef — pg_get_viewdef","text":"","code":"pg_get_viewdef(oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_get_viewdef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_get_viewdef — pg_get_viewdef","text":"oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_get_viewdef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_get_viewdef — pg_get_viewdef","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_has_role.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_has_role — pg_has_role","title":"DuckDB function pg_has_role — pg_has_role","text":"DuckDB function pg_has_role().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_has_role.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_has_role — pg_has_role","text":"user Unspecified. role Unspecified. privilege Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_has_role.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_has_role — pg_has_role","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_has_role.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function pg_has_role — pg_has_role","text":"pg_has_role(user, role, privilege) pg_has_role(role, privilege)","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_is_other_temp_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_is_other_temp_schema — pg_is_other_temp_schema","title":"DuckDB function pg_is_other_temp_schema — pg_is_other_temp_schema","text":"DuckDB macro pg_is_other_temp_schema().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_is_other_temp_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_is_other_temp_schema — pg_is_other_temp_schema","text":"","code":"pg_is_other_temp_schema(schema_id)"},{"path":"https://cynkra.github.io/dd/reference/pg_is_other_temp_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_is_other_temp_schema — pg_is_other_temp_schema","text":"schema_id Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_is_other_temp_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_is_other_temp_schema — pg_is_other_temp_schema","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_my_temp_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_my_temp_schema — pg_my_temp_schema","title":"DuckDB function pg_my_temp_schema — pg_my_temp_schema","text":"DuckDB macro pg_my_temp_schema().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_my_temp_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_my_temp_schema — pg_my_temp_schema","text":"","code":"pg_my_temp_schema()"},{"path":"https://cynkra.github.io/dd/reference/pg_my_temp_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_my_temp_schema — pg_my_temp_schema","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opclass_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_opclass_is_visible — pg_opclass_is_visible","title":"DuckDB function pg_opclass_is_visible — pg_opclass_is_visible","text":"DuckDB macro pg_opclass_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opclass_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_opclass_is_visible — pg_opclass_is_visible","text":"","code":"pg_opclass_is_visible(opclass_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_opclass_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_opclass_is_visible — pg_opclass_is_visible","text":"opclass_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opclass_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_opclass_is_visible — pg_opclass_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_operator_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_operator_is_visible — pg_operator_is_visible","title":"DuckDB function pg_operator_is_visible — pg_operator_is_visible","text":"DuckDB macro pg_operator_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_operator_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_operator_is_visible — pg_operator_is_visible","text":"","code":"pg_operator_is_visible(operator_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_operator_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_operator_is_visible — pg_operator_is_visible","text":"operator_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_operator_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_operator_is_visible — pg_operator_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opfamily_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_opfamily_is_visible — pg_opfamily_is_visible","title":"DuckDB function pg_opfamily_is_visible — pg_opfamily_is_visible","text":"DuckDB macro pg_opfamily_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opfamily_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_opfamily_is_visible — pg_opfamily_is_visible","text":"","code":"pg_opfamily_is_visible(opclass_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_opfamily_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_opfamily_is_visible — pg_opfamily_is_visible","text":"opclass_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_opfamily_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_opfamily_is_visible — pg_opfamily_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_postmaster_start_time.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_postmaster_start_time — pg_postmaster_start_time","title":"DuckDB function pg_postmaster_start_time — pg_postmaster_start_time","text":"DuckDB macro pg_postmaster_start_time().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_postmaster_start_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_postmaster_start_time — pg_postmaster_start_time","text":"","code":"pg_postmaster_start_time()"},{"path":"https://cynkra.github.io/dd/reference/pg_postmaster_start_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_postmaster_start_time — pg_postmaster_start_time","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_size_pretty.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_size_pretty — pg_size_pretty","title":"DuckDB function pg_size_pretty — pg_size_pretty","text":"DuckDB macro pg_size_pretty().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_size_pretty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_size_pretty — pg_size_pretty","text":"","code":"pg_size_pretty(bytes)"},{"path":"https://cynkra.github.io/dd/reference/pg_size_pretty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_size_pretty — pg_size_pretty","text":"bytes Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_size_pretty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_size_pretty — pg_size_pretty","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_table_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_table_is_visible — pg_table_is_visible","title":"DuckDB function pg_table_is_visible — pg_table_is_visible","text":"DuckDB macro pg_table_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_table_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_table_is_visible — pg_table_is_visible","text":"","code":"pg_table_is_visible(table_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_table_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_table_is_visible — pg_table_is_visible","text":"table_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_table_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_table_is_visible — pg_table_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_config_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_ts_config_is_visible — pg_ts_config_is_visible","title":"DuckDB function pg_ts_config_is_visible — pg_ts_config_is_visible","text":"DuckDB macro pg_ts_config_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_config_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_ts_config_is_visible — pg_ts_config_is_visible","text":"","code":"pg_ts_config_is_visible(config_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_ts_config_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_ts_config_is_visible — pg_ts_config_is_visible","text":"config_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_config_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_ts_config_is_visible — pg_ts_config_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_dict_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_ts_dict_is_visible — pg_ts_dict_is_visible","title":"DuckDB function pg_ts_dict_is_visible — pg_ts_dict_is_visible","text":"DuckDB macro pg_ts_dict_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_dict_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_ts_dict_is_visible — pg_ts_dict_is_visible","text":"","code":"pg_ts_dict_is_visible(dict_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_ts_dict_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_ts_dict_is_visible — pg_ts_dict_is_visible","text":"dict_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_dict_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_ts_dict_is_visible — pg_ts_dict_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_parser_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_ts_parser_is_visible — pg_ts_parser_is_visible","title":"DuckDB function pg_ts_parser_is_visible — pg_ts_parser_is_visible","text":"DuckDB macro pg_ts_parser_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_parser_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_ts_parser_is_visible — pg_ts_parser_is_visible","text":"","code":"pg_ts_parser_is_visible(parser_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_ts_parser_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_ts_parser_is_visible — pg_ts_parser_is_visible","text":"parser_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_parser_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_ts_parser_is_visible — pg_ts_parser_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_template_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_ts_template_is_visible — pg_ts_template_is_visible","title":"DuckDB function pg_ts_template_is_visible — pg_ts_template_is_visible","text":"DuckDB macro pg_ts_template_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_template_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_ts_template_is_visible — pg_ts_template_is_visible","text":"","code":"pg_ts_template_is_visible(template_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_ts_template_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_ts_template_is_visible — pg_ts_template_is_visible","text":"template_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_ts_template_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_ts_template_is_visible — pg_ts_template_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_type_is_visible.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_type_is_visible — pg_type_is_visible","title":"DuckDB function pg_type_is_visible — pg_type_is_visible","text":"DuckDB macro pg_type_is_visible().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_type_is_visible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_type_is_visible — pg_type_is_visible","text":"","code":"pg_type_is_visible(type_oid)"},{"path":"https://cynkra.github.io/dd/reference/pg_type_is_visible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_type_is_visible — pg_type_is_visible","text":"type_oid Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_type_is_visible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_type_is_visible — pg_type_is_visible","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_typeof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pg_typeof — pg_typeof","title":"DuckDB function pg_typeof — pg_typeof","text":"DuckDB macro pg_typeof().","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_typeof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pg_typeof — pg_typeof","text":"","code":"pg_typeof(expression)"},{"path":"https://cynkra.github.io/dd/reference/pg_typeof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pg_typeof — pg_typeof","text":"expression Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pg_typeof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pg_typeof — pg_typeof","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pi.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pi — pi","title":"DuckDB function pi — pi","text":"Returns value pi.","code":""},{"path":"https://cynkra.github.io/dd/reference/pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pi — pi","text":"","code":"pi()"},{"path":"https://cynkra.github.io/dd/reference/pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pi — pi","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/pi.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function pi — pi","text":"","code":"pi()"},{"path":"https://cynkra.github.io/dd/reference/platform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function platform — platform","title":"DuckDB function platform — platform","text":"DuckDB function platform().","code":""},{"path":"https://cynkra.github.io/dd/reference/platform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function platform — platform","text":"","code":"platform()"},{"path":"https://cynkra.github.io/dd/reference/platform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function platform — platform","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function position — position","title":"DuckDB function position — position","text":"Returns location first occurrence search_string string, counting 1. Returns 0 match found.","code":""},{"path":"https://cynkra.github.io/dd/reference/position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function position — position","text":"","code":"position(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function position — position","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function position — position","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/position.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function position — position","text":"","code":"position('b' IN 'abc')"},{"path":"https://cynkra.github.io/dd/reference/pow-at.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ^@ — ^-at","title":"DuckDB function ^@ — ^-at","text":"Returns true string begins search_string.","code":""},{"path":"https://cynkra.github.io/dd/reference/pow-at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ^@ — ^-at","text":"","code":"`^@`(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/pow-at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ^@ — ^-at","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/pow-at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ^@ — ^-at","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/pow-at.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ^@ — ^-at","text":"","code":"starts_with('abc', 'a')"},{"path":"https://cynkra.github.io/dd/reference/pow.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ^ — ^","title":"DuckDB function ^ — ^","text":"Computes x power y. Computes x power y.","code":""},{"path":"https://cynkra.github.io/dd/reference/pow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ^ — ^","text":"","code":"DOUBLE^DOUBLE  pow(x = DOUBLE, y = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/pow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ^ — ^","text":"x DOUBLE y DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/pow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ^ — ^","text":"DOUBLE DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/pow.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ^ — ^","text":"","code":"2 ^ 3 pow(2, 3) power(2, 3)"},{"path":"https://cynkra.github.io/dd/reference/power.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function power — power","title":"DuckDB function power — power","text":"Computes x power y.","code":""},{"path":"https://cynkra.github.io/dd/reference/power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function power — power","text":"","code":"power(x = DOUBLE, y = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function power — power","text":"x DOUBLE y DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function power — power","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/power.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function power — power","text":"","code":"power(2, 3)"},{"path":"https://cynkra.github.io/dd/reference/pragma_collations.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_collations — pragma_collations","title":"DuckDB function pragma_collations — pragma_collations","text":"DuckDB function pragma_collations().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_collations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_collations — pragma_collations","text":"","code":"pragma_collations()"},{"path":"https://cynkra.github.io/dd/reference/pragma_collations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_collations — pragma_collations","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_database_size.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_database_size — pragma_database_size","title":"DuckDB function pragma_database_size — pragma_database_size","text":"DuckDB function pragma_database_size().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_database_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_database_size — pragma_database_size","text":"","code":"pragma_database_size()"},{"path":"https://cynkra.github.io/dd/reference/pragma_database_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_database_size — pragma_database_size","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_metadata_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_metadata_info — pragma_metadata_info","title":"DuckDB function pragma_metadata_info — pragma_metadata_info","text":"DuckDB function pragma_metadata_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_metadata_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pragma_metadata_info — pragma_metadata_info","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_metadata_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_metadata_info — pragma_metadata_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_metadata_info.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function pragma_metadata_info — pragma_metadata_info","text":"pragma_metadata_info() pragma_metadata_info(col0 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_platform.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_platform — pragma_platform","title":"DuckDB function pragma_platform — pragma_platform","text":"DuckDB function pragma_platform().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_platform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_platform — pragma_platform","text":"","code":"pragma_platform()"},{"path":"https://cynkra.github.io/dd/reference/pragma_platform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_platform — pragma_platform","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_show.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_show — pragma_show","title":"DuckDB function pragma_show — pragma_show","text":"DuckDB function pragma_show().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_show — pragma_show","text":"","code":"pragma_show(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/pragma_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pragma_show — pragma_show","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_show — pragma_show","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_storage_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_storage_info — pragma_storage_info","title":"DuckDB function pragma_storage_info — pragma_storage_info","text":"DuckDB function pragma_storage_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_storage_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_storage_info — pragma_storage_info","text":"","code":"pragma_storage_info(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/pragma_storage_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pragma_storage_info — pragma_storage_info","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_storage_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_storage_info — pragma_storage_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_table_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_table_info — pragma_table_info","title":"DuckDB function pragma_table_info — pragma_table_info","text":"DuckDB function pragma_table_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_table_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_table_info — pragma_table_info","text":"","code":"pragma_table_info(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/pragma_table_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function pragma_table_info — pragma_table_info","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_table_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_table_info — pragma_table_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_user_agent — pragma_user_agent","title":"DuckDB function pragma_user_agent — pragma_user_agent","text":"DuckDB function pragma_user_agent().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_user_agent — pragma_user_agent","text":"","code":"pragma_user_agent()"},{"path":"https://cynkra.github.io/dd/reference/pragma_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_user_agent — pragma_user_agent","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_version.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function pragma_version — pragma_version","title":"DuckDB function pragma_version — pragma_version","text":"DuckDB function pragma_version().","code":""},{"path":"https://cynkra.github.io/dd/reference/pragma_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function pragma_version — pragma_version","text":"","code":"pragma_version()"},{"path":"https://cynkra.github.io/dd/reference/pragma_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function pragma_version — pragma_version","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function prefix — prefix","title":"DuckDB function prefix — prefix","text":"Returns true string starts search_string.","code":""},{"path":"https://cynkra.github.io/dd/reference/prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function prefix — prefix","text":"","code":"prefix(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function prefix — prefix","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function prefix — prefix","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/prefix.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function prefix — prefix","text":"","code":"prefix('abc', 'ab')"},{"path":"https://cynkra.github.io/dd/reference/printf.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function printf — printf","title":"DuckDB function printf — printf","text":"Formats string using printf syntax.","code":""},{"path":"https://cynkra.github.io/dd/reference/printf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function printf — printf","text":"","code":"printf(format = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/printf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function printf — printf","text":"format VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/printf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function printf — printf","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/printf.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function printf — printf","text":"","code":"printf('Benchmark \"%s\" took %d seconds', 'CSV', 42)"},{"path":"https://cynkra.github.io/dd/reference/product.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function product — product","title":"DuckDB function product — product","text":"Calculates product tuples arg.","code":""},{"path":"https://cynkra.github.io/dd/reference/product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function product — product","text":"","code":"product(arg = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function product — product","text":"arg DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function product — product","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/product.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function product — product","text":"","code":"product(A)"},{"path":"https://cynkra.github.io/dd/reference/quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function quantile — quantile","title":"DuckDB function quantile — quantile","text":"Returns exact quantile number 0 1 . pos LIST FLOATs, result LIST corresponding exact quantiles.","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function quantile — quantile","text":"x pos DOUBLE | DOUBLE[]","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/quantile.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function quantile — quantile","text":"quantile(x = , pos = DOUBLE) quantile(x = , pos = `DOUBLE[]`) quantile(x = )","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function quantile — quantile","text":"","code":"quantile_disc(x, 0.5)"},{"path":"https://cynkra.github.io/dd/reference/quantile_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function quantile_cont — quantile_cont","title":"DuckDB function quantile_cont — quantile_cont","text":"Returns interpolated quantile number 0 1 . pos LIST FLOATs, result LIST corresponding interpolated quantiles.\t.","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function quantile_cont — quantile_cont","text":"x DECIMAL | TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DATE | TIMESTAMP | TIME | TIMESTAMP TIME ZONE | TIME TIME ZONE pos DOUBLE | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function quantile_cont — quantile_cont","text":"DECIMAL | TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DATE | TIMESTAMP | TIME | TIMESTAMP TIME ZONE | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_cont.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function quantile_cont — quantile_cont","text":"quantile_cont(x = DECIMAL, pos = DOUBLE) quantile_cont(x = DECIMAL, pos = `DOUBLE[]`) quantile_cont(x = TINYINT, pos = DOUBLE) quantile_cont(x = TINYINT, pos = `DOUBLE[]`) quantile_cont(x = SMALLINT, pos = DOUBLE) quantile_cont(x = SMALLINT, pos = `DOUBLE[]`) quantile_cont(x = INTEGER, pos = DOUBLE) quantile_cont(x = INTEGER, pos = `DOUBLE[]`) quantile_cont(x = BIGINT, pos = DOUBLE) quantile_cont(x = BIGINT, pos = `DOUBLE[]`) quantile_cont(x = HUGEINT, pos = DOUBLE) quantile_cont(x = HUGEINT, pos = `DOUBLE[]`) quantile_cont(x = FLOAT, pos = DOUBLE) quantile_cont(x = FLOAT, pos = `DOUBLE[]`) quantile_cont(x = DOUBLE, pos = DOUBLE) quantile_cont(x = DOUBLE, pos = `DOUBLE[]`) quantile_cont(x = DATE, pos = DOUBLE) quantile_cont(x = DATE, pos = `DOUBLE[]`) quantile_cont(x = TIMESTAMP, pos = DOUBLE) quantile_cont(x = TIMESTAMP, pos = `DOUBLE[]`) quantile_cont(x = TIME, pos = DOUBLE) quantile_cont(x = TIME, pos = `DOUBLE[]`) quantile_cont(x = `TIMESTAMP TIME ZONE`, pos = DOUBLE) quantile_cont(x = `TIMESTAMP TIME ZONE`, pos = `DOUBLE[]`) quantile_cont(x = `TIME TIME ZONE`, pos = DOUBLE) quantile_cont(x = `TIME TIME ZONE`, pos = `DOUBLE[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_cont.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function quantile_cont — quantile_cont","text":"","code":"quantile_cont(x, 0.5)"},{"path":"https://cynkra.github.io/dd/reference/quantile_disc.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function quantile_disc — quantile_disc","title":"DuckDB function quantile_disc — quantile_disc","text":"Returns exact quantile number 0 1 . pos LIST FLOATs, result LIST corresponding exact quantiles.","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_disc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function quantile_disc — quantile_disc","text":"x pos DOUBLE | DOUBLE[]","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/quantile_disc.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function quantile_disc — quantile_disc","text":"quantile_disc(x = , pos = DOUBLE) quantile_disc(x = , pos = `DOUBLE[]`) quantile_disc(x = )","code":""},{"path":"https://cynkra.github.io/dd/reference/quantile_disc.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function quantile_disc — quantile_disc","text":"","code":"quantile_disc(x, 0.5)"},{"path":"https://cynkra.github.io/dd/reference/quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function quarter — quarter","title":"DuckDB function quarter — quarter","text":"Extract quarter component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function quarter — quarter","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function quarter — quarter","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/quarter.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function quarter — quarter","text":"quarter(ts = DATE) quarter(ts = INTERVAL) quarter(ts = TIMESTAMP) quarter(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/quarter.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function quarter — quarter","text":"","code":"quarter(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function query — query","title":"DuckDB function query — query","text":"DuckDB function query().","code":""},{"path":"https://cynkra.github.io/dd/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function query — query","text":"","code":"query(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function query — query","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function query — query","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/query_table.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function query_table — query_table","title":"DuckDB function query_table — query_table","text":"DuckDB function query_table().","code":""},{"path":"https://cynkra.github.io/dd/reference/query_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function query_table — query_table","text":"col0 VARCHAR | VARCHAR[] col1 BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/query_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function query_table — query_table","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/query_table.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function query_table — query_table","text":"query_table(col0 = VARCHAR) query_table(col0 = `VARCHAR[]`) query_table(col0 = `VARCHAR[]`, col1 = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/r_dataframe_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function r_dataframe_scan — r_dataframe_scan","title":"DuckDB function r_dataframe_scan — r_dataframe_scan","text":"DuckDB function r_dataframe_scan().","code":""},{"path":"https://cynkra.github.io/dd/reference/r_dataframe_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function r_dataframe_scan — r_dataframe_scan","text":"","code":"r_dataframe_scan(col0 = POINTER, experimental = BOOLEAN, integer64 = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/r_dataframe_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function r_dataframe_scan — r_dataframe_scan","text":"col0 POINTER experimental BOOLEAN integer64 BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/r_dataframe_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function r_dataframe_scan — r_dataframe_scan","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/radians.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function radians — radians","title":"DuckDB function radians — radians","text":"Converts degrees radians.","code":""},{"path":"https://cynkra.github.io/dd/reference/radians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function radians — radians","text":"","code":"radians(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/radians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function radians — radians","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/radians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function radians — radians","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/radians.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function radians — radians","text":"","code":"radians(90)"},{"path":"https://cynkra.github.io/dd/reference/random.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function random — random","title":"DuckDB function random — random","text":"Returns random number 0 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function random — random","text":"","code":"random()"},{"path":"https://cynkra.github.io/dd/reference/random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function random — random","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/random.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function random — random","text":"","code":"random()"},{"path":"https://cynkra.github.io/dd/reference/range.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function range — range","title":"DuckDB function range — range","text":"Creates list values start stop - stop parameter exclusive.","code":""},{"path":"https://cynkra.github.io/dd/reference/range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function range — range","text":"col0 BIGINT | TIMESTAMP col1 BIGINT | TIMESTAMP col2 BIGINT | INTERVAL start BIGINT | TIMESTAMP | TIMESTAMP TIME ZONE stop BIGINT | TIMESTAMP | TIMESTAMP TIME ZONE step BIGINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function range — range","text":"BIGINT[] | TIMESTAMP[] | TIMESTAMP TIME ZONE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/range.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function range — range","text":"range(col0 = BIGINT) range(col0 = BIGINT, col1 = BIGINT) range(col0 = BIGINT, col1 = BIGINT, col2 = BIGINT) range(col0 = TIMESTAMP, col1 = TIMESTAMP, col2 = INTERVAL) range(start = BIGINT) range(start = BIGINT, stop = BIGINT) range(start = BIGINT, stop = BIGINT, step = BIGINT) range(start = TIMESTAMP, stop = TIMESTAMP, step = INTERVAL) range(start = `TIMESTAMP TIME ZONE`, stop = `TIMESTAMP TIME ZONE`, step = INTERVAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/range.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function range — range","text":"","code":"range(2, 5, 3)"},{"path":"https://cynkra.github.io/dd/reference/read_blob.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function read_blob — read_blob","title":"DuckDB function read_blob — read_blob","text":"DuckDB function read_blob().","code":""},{"path":"https://cynkra.github.io/dd/reference/read_blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function read_blob — read_blob","text":"col0 VARCHAR | VARCHAR[] union_by_name BOOLEAN hive_partitioning BOOLEAN hive_types_autocast BOOLEAN hive_types filename ","code":""},{"path":"https://cynkra.github.io/dd/reference/read_blob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function read_blob — read_blob","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/read_blob.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function read_blob — read_blob","text":"read_blob(col0 = VARCHAR, union_by_name = BOOLEAN, hive_partitioning = BOOLEAN, hive_types_autocast = BOOLEAN, hive_types = , filename = ) read_blob(col0 = `VARCHAR[]`, filename = , hive_types = , hive_types_autocast = BOOLEAN, hive_partitioning = BOOLEAN, union_by_name = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function read_csv — read_csv","title":"DuckDB function read_csv — read_csv","text":"DuckDB function read_csv().","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function read_csv — read_csv","text":"col0 VARCHAR | VARCHAR[] hive_types_autocast BOOLEAN skip BIGINT types nullstr encoding VARCHAR hive_types filename header BOOLEAN delim VARCHAR dateformat VARCHAR column_names VARCHAR[] union_by_name BOOLEAN new_line VARCHAR escape VARCHAR allow_quoted_nulls BOOLEAN comment VARCHAR hive_partitioning BOOLEAN sep VARCHAR columns rejects_limit BIGINT force_not_null VARCHAR[] auto_type_candidates sample_size BIGINT timestampformat VARCHAR auto_detect BOOLEAN all_varchar BOOLEAN store_rejects BOOLEAN normalize_names BOOLEAN rejects_table VARCHAR column_types compression VARCHAR ignore_errors BOOLEAN names VARCHAR[] max_line_size VARCHAR quote VARCHAR maximum_line_size VARCHAR rejects_scan VARCHAR buffer_size UBIGINT decimal_separator VARCHAR parallel BOOLEAN null_padding BOOLEAN dtypes strict_mode BOOLEAN thousands VARCHAR files_to_sniff BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function read_csv — read_csv","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function read_csv — read_csv","text":"read_csv(col0 = VARCHAR, hive_types_autocast = BOOLEAN, skip = BIGINT, types = , nullstr = , encoding = VARCHAR, hive_types = , filename = , header = BOOLEAN, delim = VARCHAR, dateformat = VARCHAR, column_names = `VARCHAR[]`, union_by_name = BOOLEAN, new_line = VARCHAR, escape = VARCHAR, allow_quoted_nulls = BOOLEAN, comment = VARCHAR, hive_partitioning = BOOLEAN, sep = VARCHAR, columns = , rejects_limit = BIGINT, force_not_null = `VARCHAR[]`, auto_type_candidates = , sample_size = BIGINT, timestampformat = VARCHAR, auto_detect = BOOLEAN, all_varchar = BOOLEAN, store_rejects = BOOLEAN, normalize_names = BOOLEAN, rejects_table = VARCHAR, column_types = , compression = VARCHAR, ignore_errors = BOOLEAN, names = `VARCHAR[]`, max_line_size = VARCHAR, quote = VARCHAR, maximum_line_size = VARCHAR, rejects_scan = VARCHAR, buffer_size = UBIGINT, decimal_separator = VARCHAR, parallel = BOOLEAN, null_padding = BOOLEAN, dtypes = , strict_mode = BOOLEAN, thousands = VARCHAR, files_to_sniff = BIGINT) read_csv(col0 = `VARCHAR[]`, files_to_sniff = BIGINT, thousands = VARCHAR, strict_mode = BOOLEAN, dtypes = , null_padding = BOOLEAN, parallel = BOOLEAN, decimal_separator = VARCHAR, buffer_size = UBIGINT, rejects_scan = VARCHAR, maximum_line_size = VARCHAR, quote = VARCHAR, max_line_size = VARCHAR, names = `VARCHAR[]`, ignore_errors = BOOLEAN, compression = VARCHAR, column_types = , rejects_table = VARCHAR, normalize_names = BOOLEAN, store_rejects = BOOLEAN, all_varchar = BOOLEAN, auto_detect = BOOLEAN, timestampformat = VARCHAR, sample_size = BIGINT, auto_type_candidates = , force_not_null = `VARCHAR[]`, rejects_limit = BIGINT, columns = , sep = VARCHAR, hive_partitioning = BOOLEAN, comment = VARCHAR, allow_quoted_nulls = BOOLEAN, escape = VARCHAR, new_line = VARCHAR, union_by_name = BOOLEAN, column_names = `VARCHAR[]`, dateformat = VARCHAR, delim = VARCHAR, header = BOOLEAN, filename = , hive_types = , encoding = VARCHAR, nullstr = , types = , skip = BIGINT, hive_types_autocast = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function read_csv_auto — read_csv_auto","title":"DuckDB function read_csv_auto — read_csv_auto","text":"DuckDB function read_csv_auto().","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function read_csv_auto — read_csv_auto","text":"col0 VARCHAR | VARCHAR[] hive_types_autocast BOOLEAN skip BIGINT types nullstr encoding VARCHAR hive_types filename header BOOLEAN delim VARCHAR dateformat VARCHAR column_names VARCHAR[] union_by_name BOOLEAN new_line VARCHAR escape VARCHAR allow_quoted_nulls BOOLEAN comment VARCHAR hive_partitioning BOOLEAN sep VARCHAR columns rejects_limit BIGINT force_not_null VARCHAR[] auto_type_candidates sample_size BIGINT timestampformat VARCHAR auto_detect BOOLEAN all_varchar BOOLEAN store_rejects BOOLEAN normalize_names BOOLEAN rejects_table VARCHAR column_types compression VARCHAR ignore_errors BOOLEAN names VARCHAR[] max_line_size VARCHAR quote VARCHAR maximum_line_size VARCHAR rejects_scan VARCHAR buffer_size UBIGINT decimal_separator VARCHAR parallel BOOLEAN null_padding BOOLEAN dtypes strict_mode BOOLEAN thousands VARCHAR files_to_sniff BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function read_csv_auto — read_csv_auto","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/read_csv_auto.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function read_csv_auto — read_csv_auto","text":"read_csv_auto(col0 = VARCHAR, hive_types_autocast = BOOLEAN, skip = BIGINT, types = , nullstr = , encoding = VARCHAR, hive_types = , filename = , header = BOOLEAN, delim = VARCHAR, dateformat = VARCHAR, column_names = `VARCHAR[]`, union_by_name = BOOLEAN, new_line = VARCHAR, escape = VARCHAR, allow_quoted_nulls = BOOLEAN, comment = VARCHAR, hive_partitioning = BOOLEAN, sep = VARCHAR, columns = , rejects_limit = BIGINT, force_not_null = `VARCHAR[]`, auto_type_candidates = , sample_size = BIGINT, timestampformat = VARCHAR, auto_detect = BOOLEAN, all_varchar = BOOLEAN, store_rejects = BOOLEAN, normalize_names = BOOLEAN, rejects_table = VARCHAR, column_types = , compression = VARCHAR, ignore_errors = BOOLEAN, names = `VARCHAR[]`, max_line_size = VARCHAR, quote = VARCHAR, maximum_line_size = VARCHAR, rejects_scan = VARCHAR, buffer_size = UBIGINT, decimal_separator = VARCHAR, parallel = BOOLEAN, null_padding = BOOLEAN, dtypes = , strict_mode = BOOLEAN, thousands = VARCHAR, files_to_sniff = BIGINT) read_csv_auto(col0 = `VARCHAR[]`, files_to_sniff = BIGINT, thousands = VARCHAR, strict_mode = BOOLEAN, dtypes = , null_padding = BOOLEAN, parallel = BOOLEAN, decimal_separator = VARCHAR, buffer_size = UBIGINT, rejects_scan = VARCHAR, maximum_line_size = VARCHAR, quote = VARCHAR, max_line_size = VARCHAR, names = `VARCHAR[]`, ignore_errors = BOOLEAN, compression = VARCHAR, column_types = , rejects_table = VARCHAR, normalize_names = BOOLEAN, store_rejects = BOOLEAN, all_varchar = BOOLEAN, auto_detect = BOOLEAN, timestampformat = VARCHAR, sample_size = BIGINT, auto_type_candidates = , force_not_null = `VARCHAR[]`, rejects_limit = BIGINT, columns = , sep = VARCHAR, hive_partitioning = BOOLEAN, comment = VARCHAR, allow_quoted_nulls = BOOLEAN, escape = VARCHAR, new_line = VARCHAR, union_by_name = BOOLEAN, column_names = `VARCHAR[]`, dateformat = VARCHAR, delim = VARCHAR, header = BOOLEAN, filename = , hive_types = , encoding = VARCHAR, nullstr = , types = , skip = BIGINT, hive_types_autocast = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/read_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function read_parquet — read_parquet","title":"DuckDB function read_parquet — read_parquet","text":"DuckDB function read_parquet().","code":""},{"path":"https://cynkra.github.io/dd/reference/read_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function read_parquet — read_parquet","text":"col0 VARCHAR | VARCHAR[] can_have_nan BOOLEAN encryption_config file_row_number BOOLEAN schema parquet_version VARCHAR filename binary_as_string BOOLEAN debug_use_openssl BOOLEAN union_by_name BOOLEAN explicit_cardinality UBIGINT compression VARCHAR hive_types hive_partitioning BOOLEAN hive_types_autocast BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/read_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function read_parquet — read_parquet","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/read_parquet.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function read_parquet — read_parquet","text":"read_parquet(col0 = VARCHAR, can_have_nan = BOOLEAN, encryption_config = , file_row_number = BOOLEAN, schema = , parquet_version = VARCHAR, filename = , binary_as_string = BOOLEAN, debug_use_openssl = BOOLEAN, union_by_name = BOOLEAN, explicit_cardinality = UBIGINT, compression = VARCHAR, hive_types = , hive_partitioning = BOOLEAN, hive_types_autocast = BOOLEAN) read_parquet(col0 = `VARCHAR[]`, hive_types_autocast = BOOLEAN, hive_partitioning = BOOLEAN, hive_types = , compression = VARCHAR, explicit_cardinality = UBIGINT, union_by_name = BOOLEAN, debug_use_openssl = BOOLEAN, binary_as_string = BOOLEAN, filename = , parquet_version = VARCHAR, schema = , file_row_number = BOOLEAN, encryption_config = , can_have_nan = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/read_text.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function read_text — read_text","title":"DuckDB function read_text — read_text","text":"DuckDB function read_text().","code":""},{"path":"https://cynkra.github.io/dd/reference/read_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function read_text — read_text","text":"col0 VARCHAR | VARCHAR[] union_by_name BOOLEAN hive_partitioning BOOLEAN hive_types_autocast BOOLEAN hive_types filename ","code":""},{"path":"https://cynkra.github.io/dd/reference/read_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function read_text — read_text","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/read_text.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function read_text — read_text","text":"read_text(col0 = VARCHAR, union_by_name = BOOLEAN, hive_partitioning = BOOLEAN, hive_types_autocast = BOOLEAN, hive_types = , filename = ) read_text(col0 = `VARCHAR[]`, filename = , hive_types = , hive_types_autocast = BOOLEAN, hive_partitioning = BOOLEAN, union_by_name = BOOLEAN)","code":""},{"path":"https://cynkra.github.io/dd/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function reduce — reduce","title":"DuckDB function reduce — reduce","text":"Reduces elements input list single scalar value executing lambda function running result next list element. lambda function optional initial_value argument.","code":""},{"path":"https://cynkra.github.io/dd/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function reduce — reduce","text":"list [] initial_value lambda(x, y) LAMBDA","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/reduce.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function reduce — reduce","text":"reduce(list = `[]`, `lambda(x,y)` = LAMBDA) reduce(list = `[]`, `lambda(x,y)` = LAMBDA, initial_value = )","code":""},{"path":"https://cynkra.github.io/dd/reference/reduce.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function reduce — reduce","text":"","code":"reduce([1, 2, 3], lambda x, y : x + y)"},{"path":"https://cynkra.github.io/dd/reference/regexp_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_escape — regexp_escape","title":"DuckDB function regexp_escape — regexp_escape","text":"Escapes special patterns turn string regular expression similarly Python's re.escape function.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regexp_escape — regexp_escape","text":"","code":"regexp_escape(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/regexp_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_escape — regexp_escape","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_escape — regexp_escape","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_escape.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_escape — regexp_escape","text":"","code":"regexp_escape('https://duckdb.org')"},{"path":"https://cynkra.github.io/dd/reference/regexp_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_extract — regexp_extract","title":"DuckDB function regexp_extract — regexp_extract","text":"string contains regex pattern, returns capturing group specified optional parameter group; otherwise, returns empty string. group must constant value. group given, defaults 0. set optional regex options can set. string contains regex pattern, returns capturing groups struct corresponding names name_list; otherwise, returns struct keys empty strings values. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_extract — regexp_extract","text":"string VARCHAR regex VARCHAR group INTEGER options VARCHAR name_list VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_extract — regexp_extract","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_extract — regexp_extract","text":"regexp_extract(string = VARCHAR, regex = VARCHAR) regexp_extract(string = VARCHAR, regex = VARCHAR, group = INTEGER) regexp_extract(string = VARCHAR, regex = VARCHAR, group = INTEGER, options = VARCHAR) regexp_extract(string = VARCHAR, regex = VARCHAR, name_list = `VARCHAR[]`) regexp_extract(string = VARCHAR, regex = VARCHAR, name_list = `VARCHAR[]`, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_extract — regexp_extract","text":"","code":"regexp_extract('abcde', '[a-z]{3}') regexp_extract('abc', '([a-z])(b)', 1) regexp_extract('ABC', '([a-z])(b)', 1, 'i') regexp_extract('2023-04-15', '(\\d+)-(\\d+)-(\\d+)', ['y', 'm', 'd']) regexp_extract('John Doe', '([a-z]+) ([a-z]+)', ['first_name', 'last_name'], 'i')"},{"path":"https://cynkra.github.io/dd/reference/regexp_extract_all.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_extract_all — regexp_extract_all","title":"DuckDB function regexp_extract_all — regexp_extract_all","text":"Finds non-overlapping occurrences regex string returns corresponding values capturing group. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_extract_all — regexp_extract_all","text":"string VARCHAR regex VARCHAR group INTEGER options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_extract_all — regexp_extract_all","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract_all.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_extract_all — regexp_extract_all","text":"regexp_extract_all(string = VARCHAR, regex = VARCHAR) regexp_extract_all(string = VARCHAR, regex = VARCHAR, group = INTEGER) regexp_extract_all(string = VARCHAR, regex = VARCHAR, group = INTEGER, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_extract_all.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_extract_all — regexp_extract_all","text":"","code":"regexp_extract_all('Peter: 33, Paul:14', '(\\w+):\\s*(\\d+)', 2)"},{"path":"https://cynkra.github.io/dd/reference/regexp_full_match.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_full_match — regexp_full_match","title":"DuckDB function regexp_full_match — regexp_full_match","text":"Returns true entire string matches regex. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_full_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_full_match — regexp_full_match","text":"string VARCHAR regex VARCHAR col2 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_full_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_full_match — regexp_full_match","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_full_match.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_full_match — regexp_full_match","text":"regexp_full_match(string = VARCHAR, regex = VARCHAR) regexp_full_match(string = VARCHAR, regex = VARCHAR, col2 = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_full_match.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_full_match — regexp_full_match","text":"","code":"regexp_full_match('anabanana', '(an)*')"},{"path":"https://cynkra.github.io/dd/reference/regexp_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_matches — regexp_matches","title":"DuckDB function regexp_matches — regexp_matches","text":"Returns true string contains regex, false otherwise. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_matches — regexp_matches","text":"string VARCHAR regex VARCHAR options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_matches — regexp_matches","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_matches.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_matches — regexp_matches","text":"regexp_matches(string = VARCHAR, regex = VARCHAR) regexp_matches(string = VARCHAR, regex = VARCHAR, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_matches.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_matches — regexp_matches","text":"","code":"regexp_matches('anabanana', '(an)*')"},{"path":"https://cynkra.github.io/dd/reference/regexp_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_replace — regexp_replace","title":"DuckDB function regexp_replace — regexp_replace","text":"string contains regex, replaces matching part replacement. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_replace — regexp_replace","text":"string VARCHAR regex VARCHAR replacement VARCHAR options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_replace — regexp_replace","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_replace.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_replace — regexp_replace","text":"regexp_replace(string = VARCHAR, regex = VARCHAR, replacement = VARCHAR) regexp_replace(string = VARCHAR, regex = VARCHAR, replacement = VARCHAR, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_replace.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_replace — regexp_replace","text":"","code":"regexp_replace('hello', '[lo]', '-')"},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_split_to_array — regexp_split_to_array","title":"DuckDB function regexp_split_to_array — regexp_split_to_array","text":"Splits string along regex. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_split_to_array — regexp_split_to_array","text":"string VARCHAR regex VARCHAR options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_split_to_array — regexp_split_to_array","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_array.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function regexp_split_to_array — regexp_split_to_array","text":"regexp_split_to_array(string = VARCHAR, regex = VARCHAR) regexp_split_to_array(string = VARCHAR, regex = VARCHAR, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_array.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regexp_split_to_array — regexp_split_to_array","text":"","code":"regexp_split_to_array('hello world; 42', ';? ')"},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_table.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regexp_split_to_table — regexp_split_to_table","title":"DuckDB function regexp_split_to_table — regexp_split_to_table","text":"DuckDB macro regexp_split_to_table().","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regexp_split_to_table — regexp_split_to_table","text":"","code":"regexp_split_to_table(text, pattern)"},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regexp_split_to_table — regexp_split_to_table","text":"text Unspecified. pattern Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/regexp_split_to_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regexp_split_to_table — regexp_split_to_table","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgx.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_avgx — regr_avgx","title":"DuckDB function regr_avgx — regr_avgx","text":"Returns average independent variable non-NULL pairs group, x independent variable y dependent variable.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_avgx — regr_avgx","text":"","code":"regr_avgx(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_avgx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_avgx — regr_avgx","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_avgx — regr_avgx","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgy.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_avgy — regr_avgy","title":"DuckDB function regr_avgy — regr_avgy","text":"Returns average dependent variable non-NULL pairs group, x independent variable y dependent variable.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_avgy — regr_avgy","text":"","code":"regr_avgy(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_avgy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_avgy — regr_avgy","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_avgy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_avgy — regr_avgy","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_count.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_count — regr_count","title":"DuckDB function regr_count — regr_count","text":"Returns number non-NULL number pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_count — regr_count","text":"","code":"regr_count(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_count — regr_count","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_count — regr_count","text":"UINTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_count.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_count — regr_count","text":"","code":"(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)"},{"path":"https://cynkra.github.io/dd/reference/regr_intercept.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_intercept — regr_intercept","title":"DuckDB function regr_intercept — regr_intercept","text":"Returns intercept univariate linear regression line non-NULL pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_intercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_intercept — regr_intercept","text":"","code":"regr_intercept(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_intercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_intercept — regr_intercept","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_intercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_intercept — regr_intercept","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_intercept.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_intercept — regr_intercept","text":"","code":"AVG(y)-REGR_SLOPE(y, x)*AVG(x)"},{"path":"https://cynkra.github.io/dd/reference/regr_r2.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_r2 — regr_r2","title":"DuckDB function regr_r2 — regr_r2","text":"Returns coefficient determination non-NULL pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_r2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_r2 — regr_r2","text":"","code":"regr_r2(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_r2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_r2 — regr_r2","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_r2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_r2 — regr_r2","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_slope — regr_slope","title":"DuckDB function regr_slope — regr_slope","text":"Returns slope linear regression line non-NULL pairs group.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_slope — regr_slope","text":"","code":"regr_slope(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_slope — regr_slope","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_slope — regr_slope","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_slope.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_slope — regr_slope","text":"","code":"COVAR_POP(x, y) / VAR_POP(x)"},{"path":"https://cynkra.github.io/dd/reference/regr_sxx.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_sxx — regr_sxx","title":"DuckDB function regr_sxx — regr_sxx","text":"DuckDB function regr_sxx().","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_sxx — regr_sxx","text":"","code":"regr_sxx(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_sxx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_sxx — regr_sxx","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_sxx — regr_sxx","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxx.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_sxx — regr_sxx","text":"","code":"REGR_COUNT(y, x) * VAR_POP(x)"},{"path":"https://cynkra.github.io/dd/reference/regr_sxy.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_sxy — regr_sxy","title":"DuckDB function regr_sxy — regr_sxy","text":"Returns population covariance input values.","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_sxy — regr_sxy","text":"","code":"regr_sxy(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_sxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_sxy — regr_sxy","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_sxy — regr_sxy","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_sxy.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_sxy — regr_sxy","text":"","code":"REGR_COUNT(y, x) * COVAR_POP(y, x)"},{"path":"https://cynkra.github.io/dd/reference/regr_syy.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function regr_syy — regr_syy","title":"DuckDB function regr_syy — regr_syy","text":"DuckDB function regr_syy().","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_syy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function regr_syy — regr_syy","text":"","code":"regr_syy(y = DOUBLE, x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/regr_syy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function regr_syy — regr_syy","text":"y DOUBLE x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_syy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function regr_syy — regr_syy","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/regr_syy.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function regr_syy — regr_syy","text":"","code":"REGR_COUNT(y, x) * VAR_POP(y)"},{"path":"https://cynkra.github.io/dd/reference/repeat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function repeat — repeat","title":"DuckDB function repeat — repeat","text":"Repeats string count number times. Repeats blob count number times.","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function repeat — repeat","text":"col0 | T[] col1 BIGINT string VARCHAR count BIGINT blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function repeat — repeat","text":"VARCHAR | BLOB | T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function repeat — repeat","text":"`repeat`(col0 = , col1 = BIGINT) `repeat`(string = VARCHAR, count = BIGINT) `repeat`(blob = BLOB, count = BIGINT) `repeat`(col0 = `T[]`, col1 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function repeat — repeat","text":"","code":"repeat('A', 5) repeat('\\xAA\\xBB'::BLOB, 5)"},{"path":"https://cynkra.github.io/dd/reference/repeat_row.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function repeat_row — repeat_row","title":"DuckDB function repeat_row — repeat_row","text":"DuckDB function repeat_row().","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function repeat_row — repeat_row","text":"","code":"repeat_row(num_rows = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/repeat_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function repeat_row — repeat_row","text":"num_rows BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/repeat_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function repeat_row — repeat_row","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/replace.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function replace — replace","title":"DuckDB function replace — replace","text":"Replaces occurrences source target string.","code":""},{"path":"https://cynkra.github.io/dd/reference/replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function replace — replace","text":"","code":"replace(string = VARCHAR, source = VARCHAR, target = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function replace — replace","text":"string VARCHAR source VARCHAR target VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function replace — replace","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/replace.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function replace — replace","text":"","code":"replace('hello', 'l', '-')"},{"path":"https://cynkra.github.io/dd/reference/replace_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function replace_type — replace_type","title":"DuckDB function replace_type — replace_type","text":"Casts fields type1 type2.","code":""},{"path":"https://cynkra.github.io/dd/reference/replace_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function replace_type — replace_type","text":"","code":"replace_type(param = ANY, type1 = ANY, type2 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/replace_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function replace_type — replace_type","text":"param type1 type2 ","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/replace_type.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function replace_type — replace_type","text":"","code":"replace_type({duck: 3.141592653589793::DOUBLE}, NULL::DOUBLE, NULL::DECIMAL(15,2))"},{"path":"https://cynkra.github.io/dd/reference/reservoir_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function reservoir_quantile — reservoir_quantile","title":"DuckDB function reservoir_quantile — reservoir_quantile","text":"Gives approximate quantile using reservoir sampling, sample size optional uses 8192 default size.","code":""},{"path":"https://cynkra.github.io/dd/reference/reservoir_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function reservoir_quantile — reservoir_quantile","text":"x DECIMAL | TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE quantile DOUBLE | DOUBLE[] sample_size INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/reservoir_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function reservoir_quantile — reservoir_quantile","text":"DECIMAL | DECIMAL[] | TINYINT | TINYINT[] | SMALLINT | SMALLINT[] | INTEGER | INTEGER[] | BIGINT | BIGINT[] | HUGEINT | HUGEINT[] | FLOAT | FLOAT[] | DOUBLE | DOUBLE[]","code":""},{"path":"https://cynkra.github.io/dd/reference/reservoir_quantile.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function reservoir_quantile — reservoir_quantile","text":"reservoir_quantile(x = DECIMAL, quantile = DOUBLE) reservoir_quantile(x = DECIMAL, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = DECIMAL, quantile = `DOUBLE[]`) reservoir_quantile(x = DECIMAL, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = TINYINT, quantile = DOUBLE) reservoir_quantile(x = TINYINT, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = TINYINT, quantile = `DOUBLE[]`) reservoir_quantile(x = TINYINT, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = SMALLINT, quantile = DOUBLE) reservoir_quantile(x = SMALLINT, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = SMALLINT, quantile = `DOUBLE[]`) reservoir_quantile(x = SMALLINT, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = INTEGER, quantile = DOUBLE) reservoir_quantile(x = INTEGER, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = INTEGER, quantile = `DOUBLE[]`) reservoir_quantile(x = INTEGER, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = BIGINT, quantile = DOUBLE) reservoir_quantile(x = BIGINT, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = BIGINT, quantile = `DOUBLE[]`) reservoir_quantile(x = BIGINT, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = HUGEINT, quantile = DOUBLE) reservoir_quantile(x = HUGEINT, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = HUGEINT, quantile = `DOUBLE[]`) reservoir_quantile(x = HUGEINT, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = FLOAT, quantile = DOUBLE) reservoir_quantile(x = FLOAT, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = FLOAT, quantile = `DOUBLE[]`) reservoir_quantile(x = FLOAT, quantile = `DOUBLE[]`, sample_size = INTEGER) reservoir_quantile(x = DOUBLE, quantile = DOUBLE) reservoir_quantile(x = DOUBLE, quantile = DOUBLE, sample_size = INTEGER) reservoir_quantile(x = DOUBLE, quantile = `DOUBLE[]`) reservoir_quantile(x = DOUBLE, quantile = `DOUBLE[]`, sample_size = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/reservoir_quantile.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function reservoir_quantile — reservoir_quantile","text":"","code":"reservoir_quantile(A, 0.5, 1024)"},{"path":"https://cynkra.github.io/dd/reference/reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function reverse — reverse","title":"DuckDB function reverse — reverse","text":"Reverses string.","code":""},{"path":"https://cynkra.github.io/dd/reference/reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function reverse — reverse","text":"","code":"reverse(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function reverse — reverse","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function reverse — reverse","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/reverse.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function reverse — reverse","text":"","code":"reverse('hello')"},{"path":"https://cynkra.github.io/dd/reference/right.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function right — right","title":"DuckDB function right — right","text":"Extract right-count characters.","code":""},{"path":"https://cynkra.github.io/dd/reference/right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function right — right","text":"","code":"right(string = VARCHAR, count = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function right — right","text":"string VARCHAR count BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function right — right","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/right.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function right — right","text":"","code":"right('Hello🦆', 3)"},{"path":"https://cynkra.github.io/dd/reference/right_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function right_grapheme — right_grapheme","title":"DuckDB function right_grapheme — right_grapheme","text":"Extracts right-count grapheme clusters.","code":""},{"path":"https://cynkra.github.io/dd/reference/right_grapheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function right_grapheme — right_grapheme","text":"","code":"right_grapheme(string = VARCHAR, count = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/right_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function right_grapheme — right_grapheme","text":"string VARCHAR count BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/right_grapheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function right_grapheme — right_grapheme","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/right_grapheme.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function right_grapheme — right_grapheme","text":"","code":"right_grapheme('🤦🏼‍♂️🤦🏽‍♀️', 1)"},{"path":"https://cynkra.github.io/dd/reference/round.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function round — round","title":"DuckDB function round — round","text":"Rounds x s decimal places.","code":""},{"path":"https://cynkra.github.io/dd/reference/round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function round — round","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL precision INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function round — round","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/round.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function round — round","text":"round(x = TINYINT) round(x = TINYINT, precision = INTEGER) round(x = SMALLINT) round(x = SMALLINT, precision = INTEGER) round(x = INTEGER) round(x = INTEGER, precision = INTEGER) round(x = BIGINT) round(x = BIGINT, precision = INTEGER) round(x = HUGEINT) round(x = HUGEINT, precision = INTEGER) round(x = FLOAT) round(x = FLOAT, precision = INTEGER) round(x = DOUBLE) round(x = DOUBLE, precision = INTEGER) round(x = DECIMAL) round(x = DECIMAL, precision = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/round.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function round — round","text":"","code":"round(42.4332, 2)"},{"path":"https://cynkra.github.io/dd/reference/round_even.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function round_even — round_even","title":"DuckDB function round_even — round_even","text":"DuckDB macro round_even().","code":""},{"path":"https://cynkra.github.io/dd/reference/round_even.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function round_even — round_even","text":"","code":"round_even(x, n)"},{"path":"https://cynkra.github.io/dd/reference/round_even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function round_even — round_even","text":"x Unspecified. n Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/round_even.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function round_even — round_even","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/roundbankers.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function roundbankers — roundbankers","title":"DuckDB function roundbankers — roundbankers","text":"DuckDB macro roundbankers().","code":""},{"path":"https://cynkra.github.io/dd/reference/roundbankers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function roundbankers — roundbankers","text":"","code":"roundbankers(x, n)"},{"path":"https://cynkra.github.io/dd/reference/roundbankers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function roundbankers — roundbankers","text":"x Unspecified. n Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/roundbankers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function roundbankers — roundbankers","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/row.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function row — row","title":"DuckDB function row — row","text":"Create unnamed STRUCT (tuple) containing argument values.","code":""},{"path":"https://cynkra.github.io/dd/reference/row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function row — row","text":"","code":"row()"},{"path":"https://cynkra.github.io/dd/reference/row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function row — row","text":"STRUCT","code":""},{"path":"https://cynkra.github.io/dd/reference/row.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function row — row","text":"","code":"row(i, i % 4, i / 4)"},{"path":"https://cynkra.github.io/dd/reference/rpad.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function rpad — rpad","title":"DuckDB function rpad — rpad","text":"Pads string character right count characters. Truncates string right count characters.","code":""},{"path":"https://cynkra.github.io/dd/reference/rpad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function rpad — rpad","text":"","code":"rpad(string = VARCHAR, count = INTEGER, character = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/rpad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function rpad — rpad","text":"string VARCHAR count INTEGER character VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/rpad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function rpad — rpad","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/rpad.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function rpad — rpad","text":"","code":"rpad('hello', 10, '<')"},{"path":"https://cynkra.github.io/dd/reference/rtrim.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function rtrim — rtrim","title":"DuckDB function rtrim — rtrim","text":"Removes occurrences characters right side string. characters defaults space.","code":""},{"path":"https://cynkra.github.io/dd/reference/rtrim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function rtrim — rtrim","text":"string VARCHAR characters VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/rtrim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function rtrim — rtrim","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/rtrim.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function rtrim — rtrim","text":"rtrim(string = VARCHAR) rtrim(string = VARCHAR, characters = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/rtrim.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function rtrim — rtrim","text":"","code":"rtrim('    test  ') rtrim('>>>>test<<', '><')"},{"path":"https://cynkra.github.io/dd/reference/second.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function second — second","title":"DuckDB function second — second","text":"Extract second component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/second.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function second — second","text":"ts DATE | INTERVAL | TIME | TIMESTAMP | TIME TIME ZONE | TIME_NS | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/second.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function second — second","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/second.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function second — second","text":"second(ts = DATE) second(ts = INTERVAL) second(ts = TIME) second(ts = TIMESTAMP) second(ts = `TIME TIME ZONE`) second(ts = TIME_NS) second(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/second.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function second — second","text":"","code":"second(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/sem.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sem — sem","title":"DuckDB function sem — sem","text":"Returns standard error mean.","code":""},{"path":"https://cynkra.github.io/dd/reference/sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function sem — sem","text":"","code":"sem(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/sem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sem — sem","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sem — sem","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/seq_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function seq_scan — seq_scan","title":"DuckDB function seq_scan — seq_scan","text":"DuckDB function seq_scan().","code":""},{"path":"https://cynkra.github.io/dd/reference/seq_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function seq_scan — seq_scan","text":"","code":"seq_scan()"},{"path":"https://cynkra.github.io/dd/reference/seq_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function seq_scan — seq_scan","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/session_user.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function session_user — session_user","title":"DuckDB function session_user — session_user","text":"DuckDB macro session_user().","code":""},{"path":"https://cynkra.github.io/dd/reference/session_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function session_user — session_user","text":"","code":"session_user()"},{"path":"https://cynkra.github.io/dd/reference/session_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function session_user — session_user","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/set-at.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function <@ — <-at","title":"DuckDB function <@ — <-at","text":"Returns true elements list2 list1. NULLs ignored.","code":""},{"path":"https://cynkra.github.io/dd/reference/set-at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function <@ — <-at","text":"","code":"`<@`(list1 = `T[]`, list2 = `T[]`)"},{"path":"https://cynkra.github.io/dd/reference/set-at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function <@ — <-at","text":"list1 T[] list2 T[]","code":""},{"path":"https://cynkra.github.io/dd/reference/set-at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function <@ — <-at","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/set-at.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function <@ — <-at","text":"","code":"list_has_all([1, 2, 3], [2, 3])"},{"path":"https://cynkra.github.io/dd/reference/set_bit.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function set_bit — set_bit","title":"DuckDB function set_bit — set_bit","text":"Sets nth bit bitstring newvalue; first (leftmost) bit indexed 0. Returns new bitstring.","code":""},{"path":"https://cynkra.github.io/dd/reference/set_bit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function set_bit — set_bit","text":"","code":"set_bit(bitstring = BIT, index = INTEGER, new_value = INTEGER)"},{"path":"https://cynkra.github.io/dd/reference/set_bit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function set_bit — set_bit","text":"bitstring BIT index INTEGER new_value INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/set_bit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function set_bit — set_bit","text":"BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/set_bit.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function set_bit — set_bit","text":"","code":"set_bit('0110010'::BIT, 2, 0)"},{"path":"https://cynkra.github.io/dd/reference/setseed.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function setseed — setseed","title":"DuckDB function setseed — setseed","text":"Sets seed used random function.","code":""},{"path":"https://cynkra.github.io/dd/reference/setseed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function setseed — setseed","text":"","code":"setseed(col0 = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/setseed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function setseed — setseed","text":"col0 DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/setseed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function setseed — setseed","text":"\"NULL\"","code":""},{"path":"https://cynkra.github.io/dd/reference/setseed.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function setseed — setseed","text":"","code":"setseed(0.42)"},{"path":"https://cynkra.github.io/dd/reference/sha1.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sha1 — sha1","title":"DuckDB function sha1 — sha1","text":"Returns VARCHAR SHA-1 hash value. Returns VARCHAR SHA-1 hash blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/sha1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sha1 — sha1","text":"value VARCHAR blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/sha1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sha1 — sha1","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/sha1.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function sha1 — sha1","text":"sha1(value = VARCHAR) sha1(blob = BLOB)","code":""},{"path":"https://cynkra.github.io/dd/reference/sha1.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sha1 — sha1","text":"","code":"sha1('🦆') sha1('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/sha256.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sha256 — sha256","title":"DuckDB function sha256 — sha256","text":"Returns VARCHAR SHA-256 hash value. Returns VARCHAR SHA-256 hash blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/sha256.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sha256 — sha256","text":"value VARCHAR blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/sha256.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sha256 — sha256","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/sha256.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function sha256 — sha256","text":"sha256(value = VARCHAR) sha256(blob = BLOB)","code":""},{"path":"https://cynkra.github.io/dd/reference/sha256.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sha256 — sha256","text":"","code":"sha256('🦆') sha256('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/shobj_description.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function shobj_description — shobj_description","title":"DuckDB function shobj_description — shobj_description","text":"DuckDB macro shobj_description().","code":""},{"path":"https://cynkra.github.io/dd/reference/shobj_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function shobj_description — shobj_description","text":"","code":"shobj_description(object_oid, catalog_name)"},{"path":"https://cynkra.github.io/dd/reference/shobj_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function shobj_description — shobj_description","text":"object_oid Unspecified. catalog_name Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/shobj_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function shobj_description — shobj_description","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function show — show","title":"DuckDB function show — show","text":"DuckDB function show().","code":""},{"path":"https://cynkra.github.io/dd/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function show — show","text":"","code":"show(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function show — show","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function show — show","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/show_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function show_databases — show_databases","title":"DuckDB function show_databases — show_databases","text":"DuckDB function show_databases().","code":""},{"path":"https://cynkra.github.io/dd/reference/show_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function show_databases — show_databases","text":"","code":"show_databases()"},{"path":"https://cynkra.github.io/dd/reference/show_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function show_databases — show_databases","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/show_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function show_tables — show_tables","title":"DuckDB function show_tables — show_tables","text":"DuckDB function show_tables().","code":""},{"path":"https://cynkra.github.io/dd/reference/show_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function show_tables — show_tables","text":"","code":"show_tables()"},{"path":"https://cynkra.github.io/dd/reference/show_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function show_tables — show_tables","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/show_tables_expanded.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function show_tables_expanded — show_tables_expanded","title":"DuckDB function show_tables_expanded — show_tables_expanded","text":"DuckDB function show_tables_expanded().","code":""},{"path":"https://cynkra.github.io/dd/reference/show_tables_expanded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function show_tables_expanded — show_tables_expanded","text":"","code":"show_tables_expanded()"},{"path":"https://cynkra.github.io/dd/reference/show_tables_expanded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function show_tables_expanded — show_tables_expanded","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/sign.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sign — sign","title":"DuckDB function sign — sign","text":"Returns sign x -1, 0 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/sign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sign — sign","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/sign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sign — sign","text":"TINYINT","code":""},{"path":"https://cynkra.github.io/dd/reference/sign.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function sign — sign","text":"sign(x = TINYINT) sign(x = SMALLINT) sign(x = INTEGER) sign(x = BIGINT) sign(x = HUGEINT) sign(x = FLOAT) sign(x = DOUBLE) sign(x = UTINYINT) sign(x = USMALLINT) sign(x = UINTEGER) sign(x = UBIGINT) sign(x = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/sign.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sign — sign","text":"","code":"sign(-349)"},{"path":"https://cynkra.github.io/dd/reference/signbit.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function signbit — signbit","title":"DuckDB function signbit — signbit","text":"Returns whether signbit set .","code":""},{"path":"https://cynkra.github.io/dd/reference/signbit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function signbit — signbit","text":"x FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/signbit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function signbit — signbit","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/signbit.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function signbit — signbit","text":"signbit(x = FLOAT) signbit(x = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/signbit.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function signbit — signbit","text":"","code":"signbit(-0.0)"},{"path":"https://cynkra.github.io/dd/reference/sin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sin — sin","title":"DuckDB function sin — sin","text":"Computes sin x.","code":""},{"path":"https://cynkra.github.io/dd/reference/sin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function sin — sin","text":"","code":"sin(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/sin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sin — sin","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sin — sin","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sin — sin","text":"","code":"sin(90)"},{"path":"https://cynkra.github.io/dd/reference/sinh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sinh — sinh","title":"DuckDB function sinh — sinh","text":"Computes hyperbolic sin x.","code":""},{"path":"https://cynkra.github.io/dd/reference/sinh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function sinh — sinh","text":"","code":"sinh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/sinh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sinh — sinh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sinh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sinh — sinh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sinh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sinh — sinh","text":"","code":"sinh(1)"},{"path":"https://cynkra.github.io/dd/reference/skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function skewness — skewness","title":"DuckDB function skewness — skewness","text":"Returns skewness input values.","code":""},{"path":"https://cynkra.github.io/dd/reference/skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function skewness — skewness","text":"","code":"skewness(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function skewness — skewness","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function skewness — skewness","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/skewness.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function skewness — skewness","text":"","code":"skewness(A)"},{"path":"https://cynkra.github.io/dd/reference/slash-slash.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function // — //","title":"DuckDB function // — //","text":"DuckDB function //().","code":""},{"path":"https://cynkra.github.io/dd/reference/slash-slash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function // — //","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/slash-slash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function // — //","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/slash-slash.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function // — //","text":"`//`(col0 = TINYINT, col1 = TINYINT) `//`(col0 = SMALLINT, col1 = SMALLINT) `//`(col0 = INTEGER, col1 = INTEGER) `//`(col0 = BIGINT, col1 = BIGINT) `//`(col0 = HUGEINT, col1 = HUGEINT) `//`(col0 = FLOAT, col1 = FLOAT) `//`(col0 = DOUBLE, col1 = DOUBLE) `//`(col0 = UTINYINT, col1 = UTINYINT) `//`(col0 = USMALLINT, col1 = USMALLINT) `//`(col0 = UINTEGER, col1 = UINTEGER) `//`(col0 = UBIGINT, col1 = UBIGINT) `//`(col0 = UHUGEINT, col1 = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/slash.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function / — /","title":"DuckDB function / — /","text":"DuckDB function /().","code":""},{"path":"https://cynkra.github.io/dd/reference/slash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function / — /","text":"col0 FLOAT | DOUBLE | INTERVAL col1 FLOAT | DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/slash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function / — /","text":"FLOAT | DOUBLE | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/slash.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function / — /","text":"`/`(col0 = FLOAT, col1 = FLOAT) `/`(col0 = DOUBLE, col1 = DOUBLE) `/`(col0 = INTERVAL, col1 = DOUBLE)","code":""},{"path":"https://cynkra.github.io/dd/reference/split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function split — split","title":"DuckDB function split — split","text":"Splits string along separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function split — split","text":"","code":"split(string = VARCHAR, separator = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function split — split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function split — split","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/split.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function split — split","text":"","code":"split('hello-world', '-')"},{"path":"https://cynkra.github.io/dd/reference/split_part.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function split_part — split_part","title":"DuckDB function split_part — split_part","text":"DuckDB macro split_part().","code":""},{"path":"https://cynkra.github.io/dd/reference/split_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function split_part — split_part","text":"","code":"split_part(string, delimiter, position)"},{"path":"https://cynkra.github.io/dd/reference/split_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function split_part — split_part","text":"string Unspecified. delimiter Unspecified. position Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/split_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function split_part — split_part","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/sqrt.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sqrt — sqrt","title":"DuckDB function sqrt — sqrt","text":"Returns square root x.","code":""},{"path":"https://cynkra.github.io/dd/reference/sqrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function sqrt — sqrt","text":"","code":"sqrt(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/sqrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sqrt — sqrt","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sqrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sqrt — sqrt","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sqrt.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sqrt — sqrt","text":"","code":"sqrt(4)"},{"path":"https://cynkra.github.io/dd/reference/starts_with.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function starts_with — starts_with","title":"DuckDB function starts_with — starts_with","text":"Returns true string begins search_string.","code":""},{"path":"https://cynkra.github.io/dd/reference/starts_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function starts_with — starts_with","text":"","code":"starts_with(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/starts_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function starts_with — starts_with","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/starts_with.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function starts_with — starts_with","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/starts_with.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function starts_with — starts_with","text":"","code":"starts_with('abc', 'a')"},{"path":"https://cynkra.github.io/dd/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function stats — stats","title":"DuckDB function stats — stats","text":"Returns string statistics expression. Expression can column, constant, SQL expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function stats — stats","text":"","code":"stats(expression = ANY)"},{"path":"https://cynkra.github.io/dd/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function stats — stats","text":"expression ","code":""},{"path":"https://cynkra.github.io/dd/reference/stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function stats — stats","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/stats.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function stats — stats","text":"","code":"stats(5)"},{"path":"https://cynkra.github.io/dd/reference/stddev.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function stddev — stddev","title":"DuckDB function stddev — stddev","text":"Returns sample standard deviation.","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function stddev — stddev","text":"","code":"stddev(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/stddev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function stddev — stddev","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function stddev — stddev","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function stddev — stddev","text":"","code":"sqrt(var_samp(x))"},{"path":"https://cynkra.github.io/dd/reference/stddev_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function stddev_pop — stddev_pop","title":"DuckDB function stddev_pop — stddev_pop","text":"Returns population standard deviation.","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function stddev_pop — stddev_pop","text":"","code":"stddev_pop(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/stddev_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function stddev_pop — stddev_pop","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function stddev_pop — stddev_pop","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_pop.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function stddev_pop — stddev_pop","text":"","code":"sqrt(var_pop(x))"},{"path":"https://cynkra.github.io/dd/reference/stddev_samp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function stddev_samp — stddev_samp","title":"DuckDB function stddev_samp — stddev_samp","text":"Returns sample standard deviation.","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function stddev_samp — stddev_samp","text":"","code":"stddev_samp(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/stddev_samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function stddev_samp — stddev_samp","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function stddev_samp — stddev_samp","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/stddev_samp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function stddev_samp — stddev_samp","text":"","code":"sqrt(var_samp(x))"},{"path":"https://cynkra.github.io/dd/reference/storage_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function storage_info — storage_info","title":"DuckDB function storage_info — storage_info","text":"DuckDB function storage_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/storage_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function storage_info — storage_info","text":"","code":"storage_info(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/storage_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function storage_info — storage_info","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/storage_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function storage_info — storage_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function str_split — str_split","title":"DuckDB function str_split — str_split","text":"Splits string along separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function str_split — str_split","text":"","code":"str_split(string = VARCHAR, separator = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/str_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function str_split — str_split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function str_split — str_split","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function str_split — str_split","text":"","code":"str_split('hello-world', '-')"},{"path":"https://cynkra.github.io/dd/reference/str_split_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function str_split_regex — str_split_regex","title":"DuckDB function str_split_regex — str_split_regex","text":"Splits string along regex. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function str_split_regex — str_split_regex","text":"string VARCHAR regex VARCHAR options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function str_split_regex — str_split_regex","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split_regex.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function str_split_regex — str_split_regex","text":"str_split_regex(string = VARCHAR, regex = VARCHAR) str_split_regex(string = VARCHAR, regex = VARCHAR, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/str_split_regex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function str_split_regex — str_split_regex","text":"","code":"str_split_regex('hello world; 42', ';? ')"},{"path":"https://cynkra.github.io/dd/reference/strftime.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strftime — strftime","title":"DuckDB function strftime — strftime","text":"Converts date string according format string.","code":""},{"path":"https://cynkra.github.io/dd/reference/strftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strftime — strftime","text":"data DATE | TIMESTAMP | TIMESTAMP_NS | VARCHAR format VARCHAR | DATE | TIMESTAMP | TIMESTAMP_NS","code":""},{"path":"https://cynkra.github.io/dd/reference/strftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function strftime — strftime","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/strftime.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function strftime — strftime","text":"strftime(data = DATE, format = VARCHAR) strftime(data = TIMESTAMP, format = VARCHAR) strftime(data = TIMESTAMP_NS, format = VARCHAR) strftime(data = VARCHAR, format = DATE) strftime(data = VARCHAR, format = TIMESTAMP) strftime(data = VARCHAR, format = TIMESTAMP_NS)","code":""},{"path":"https://cynkra.github.io/dd/reference/strftime.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function strftime — strftime","text":"","code":"strftime(date '1992-01-01', '%a, %-d %B %Y')"},{"path":"https://cynkra.github.io/dd/reference/string_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_agg — string_agg","title":"DuckDB function string_agg — string_agg","text":"Concatenates column string values optional separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/string_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_agg — string_agg","text":"str arg VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/string_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function string_agg — string_agg","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/string_agg.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function string_agg — string_agg","text":"string_agg(str = ) string_agg(str = , arg = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/string_agg.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function string_agg — string_agg","text":"","code":"string_agg(A, '-')"},{"path":"https://cynkra.github.io/dd/reference/string_split.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_split — string_split","title":"DuckDB function string_split — string_split","text":"Splits string along separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function string_split — string_split","text":"","code":"string_split(string = VARCHAR, separator = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/string_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_split — string_split","text":"string VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function string_split — string_split","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function string_split — string_split","text":"","code":"string_split('hello-world', '-')"},{"path":"https://cynkra.github.io/dd/reference/string_split_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_split_regex — string_split_regex","title":"DuckDB function string_split_regex — string_split_regex","text":"Splits string along regex. set optional regex options can set.","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_split_regex — string_split_regex","text":"string VARCHAR regex VARCHAR options VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function string_split_regex — string_split_regex","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split_regex.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function string_split_regex — string_split_regex","text":"string_split_regex(string = VARCHAR, regex = VARCHAR) string_split_regex(string = VARCHAR, regex = VARCHAR, options = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/string_split_regex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function string_split_regex — string_split_regex","text":"","code":"string_split_regex('hello world; 42', ';? ')"},{"path":"https://cynkra.github.io/dd/reference/string_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function string_to_array — string_to_array","title":"DuckDB function string_to_array — string_to_array","text":"Splits string along separator.","code":""},{"path":"https://cynkra.github.io/dd/reference/string_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function string_to_array — string_to_array","text":"","code":"string_to_array(string = VARCHAR, separator = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/string_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function string_to_array — string_to_array","text":"string VARCHAR separator VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/string_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function string_to_array — string_to_array","text":"VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/string_to_array.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function string_to_array — string_to_array","text":"","code":"string_to_array('hello-world', '-')"},{"path":"https://cynkra.github.io/dd/reference/strip_accents.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strip_accents — strip_accents","title":"DuckDB function strip_accents — strip_accents","text":"Strips accents string.","code":""},{"path":"https://cynkra.github.io/dd/reference/strip_accents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function strip_accents — strip_accents","text":"","code":"strip_accents(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/strip_accents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strip_accents — strip_accents","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/strip_accents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function strip_accents — strip_accents","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/strip_accents.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function strip_accents — strip_accents","text":"","code":"strip_accents('mühleisen')"},{"path":"https://cynkra.github.io/dd/reference/strlen.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strlen — strlen","title":"DuckDB function strlen — strlen","text":"Number bytes string.","code":""},{"path":"https://cynkra.github.io/dd/reference/strlen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function strlen — strlen","text":"","code":"strlen(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/strlen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strlen — strlen","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/strlen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function strlen — strlen","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/strlen.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function strlen — strlen","text":"","code":"strlen('🦆')"},{"path":"https://cynkra.github.io/dd/reference/strpos.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strpos — strpos","title":"DuckDB function strpos — strpos","text":"Returns location first occurrence search_string string, counting 1. Returns 0 match found.","code":""},{"path":"https://cynkra.github.io/dd/reference/strpos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function strpos — strpos","text":"","code":"strpos(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/strpos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strpos — strpos","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/strpos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function strpos — strpos","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/strpos.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function strpos — strpos","text":"","code":"strpos('test test', 'es')"},{"path":"https://cynkra.github.io/dd/reference/strptime.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function strptime — strptime","title":"DuckDB function strptime — strptime","text":"Converts string text timestamp according format string. Throws error failure. return NULL failure, use try_strptime. Converts string text timestamp applying format strings list one succeeds. Throws error failure. return NULL failure, use try_strptime.","code":""},{"path":"https://cynkra.github.io/dd/reference/strptime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function strptime — strptime","text":"text VARCHAR format VARCHAR format-list VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/strptime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function strptime — strptime","text":"TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/strptime.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function strptime — strptime","text":"strptime(text = VARCHAR, format = VARCHAR) strptime(text = VARCHAR, `format-list` = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/strptime.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function strptime — strptime","text":"","code":"strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p') strptime('4/15/2023 10:56:00', ['%d/%m/%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S'])"},{"path":"https://cynkra.github.io/dd/reference/struct_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_concat — struct_concat","title":"DuckDB function struct_concat — struct_concat","text":"Merge multiple STRUCTs single STRUCT.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_concat — struct_concat","text":"","code":"struct_concat()"},{"path":"https://cynkra.github.io/dd/reference/struct_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_concat — struct_concat","text":"STRUCT","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_concat.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_concat — struct_concat","text":"","code":"struct_concat(struct_pack(i := 4), struct_pack(s := 'string'))"},{"path":"https://cynkra.github.io/dd/reference/struct_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_contains — struct_contains","title":"DuckDB function struct_contains — struct_contains","text":"Check unnamed STRUCT contains value.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_contains — struct_contains","text":"","code":"struct_contains(struct = STRUCT, `'entry'` = ANY)"},{"path":"https://cynkra.github.io/dd/reference/struct_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function struct_contains — struct_contains","text":"struct STRUCT 'entry' ","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_contains — struct_contains","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_contains.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_contains — struct_contains","text":"","code":"struct_contains(ROW(3, 3, 0), 3)"},{"path":"https://cynkra.github.io/dd/reference/struct_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_extract — struct_extract","title":"DuckDB function struct_extract — struct_extract","text":"Extract named entry STRUCT.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function struct_extract — struct_extract","text":"struct STRUCT 'entry' VARCHAR | BIGINT","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/struct_extract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function struct_extract — struct_extract","text":"struct_extract(struct = STRUCT, `'entry'` = VARCHAR) struct_extract(struct = STRUCT, `'entry'` = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_extract — struct_extract","text":"","code":"struct_extract({'i': 3, 'v2': 3, 'v3': 0}, 'i')"},{"path":"https://cynkra.github.io/dd/reference/struct_has.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_has — struct_has","title":"DuckDB function struct_has — struct_has","text":"Check unnamed STRUCT contains value.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_has.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_has — struct_has","text":"","code":"struct_has(struct = STRUCT, `'entry'` = ANY)"},{"path":"https://cynkra.github.io/dd/reference/struct_has.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function struct_has — struct_has","text":"struct STRUCT 'entry' ","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_has.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_has — struct_has","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_has.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_has — struct_has","text":"","code":"struct_has(ROW(3, 3, 0), 3)"},{"path":"https://cynkra.github.io/dd/reference/struct_indexof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_indexof — struct_indexof","title":"DuckDB function struct_indexof — struct_indexof","text":"Get position entry unnamed STRUCT, starting 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_indexof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_indexof — struct_indexof","text":"","code":"struct_indexof(struct = STRUCT, `'entry'` = ANY)"},{"path":"https://cynkra.github.io/dd/reference/struct_indexof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function struct_indexof — struct_indexof","text":"struct STRUCT 'entry' ","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_indexof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_indexof — struct_indexof","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_indexof.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_indexof — struct_indexof","text":"","code":"struct_indexof(ROW(3, 3, 0), 3)"},{"path":"https://cynkra.github.io/dd/reference/struct_insert.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_insert — struct_insert","title":"DuckDB function struct_insert — struct_insert","text":"Adds field(s)/value(s) existing STRUCT argument values. entry name(s) bound variable name(s).","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_insert — struct_insert","text":"","code":"struct_insert()"},{"path":"https://cynkra.github.io/dd/reference/struct_insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_insert — struct_insert","text":"STRUCT","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_insert.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_insert — struct_insert","text":"","code":"struct_insert({'a': 1}, b := 2)"},{"path":"https://cynkra.github.io/dd/reference/struct_pack.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_pack — struct_pack","title":"DuckDB function struct_pack — struct_pack","text":"Create STRUCT containing argument values. entry name bound variable name.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_pack — struct_pack","text":"","code":"struct_pack()"},{"path":"https://cynkra.github.io/dd/reference/struct_pack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_pack — struct_pack","text":"STRUCT","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_pack.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_pack — struct_pack","text":"","code":"struct_pack(i := 4, s := 'string')"},{"path":"https://cynkra.github.io/dd/reference/struct_position.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_position — struct_position","title":"DuckDB function struct_position — struct_position","text":"Get position entry unnamed STRUCT, starting 1.","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_position — struct_position","text":"","code":"struct_position(struct = STRUCT, `'entry'` = ANY)"},{"path":"https://cynkra.github.io/dd/reference/struct_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function struct_position — struct_position","text":"struct STRUCT 'entry' ","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_position — struct_position","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_position.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_position — struct_position","text":"","code":"struct_position(ROW(3, 3, 0), 3)"},{"path":"https://cynkra.github.io/dd/reference/struct_update.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function struct_update — struct_update","title":"DuckDB function struct_update — struct_update","text":"Changes field(s)/value(s) existing STRUCT argument values. entry name(s) bound variable name(s).","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function struct_update — struct_update","text":"","code":"struct_update()"},{"path":"https://cynkra.github.io/dd/reference/struct_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function struct_update — struct_update","text":"STRUCT","code":""},{"path":"https://cynkra.github.io/dd/reference/struct_update.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function struct_update — struct_update","text":"","code":"struct_update({'a': 1}, a := 2)"},{"path":"https://cynkra.github.io/dd/reference/substr.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function substr — substr","title":"DuckDB function substr — substr","text":"Extracts substring starting character start end string. optional argument length set, extracts substring length characters instead. Note start value 1 refers first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/substr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function substr — substr","text":"string VARCHAR start BIGINT length BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/substr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function substr — substr","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/substr.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function substr — substr","text":"substr(string = VARCHAR, start = BIGINT, length = BIGINT) substr(string = VARCHAR, start = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/substr.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function substr — substr","text":"","code":"substring('Hello', 2) substring('Hello', 2, 2)"},{"path":"https://cynkra.github.io/dd/reference/substring.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function substring — substring","title":"DuckDB function substring — substring","text":"Extracts substring starting character start end string. optional argument length set, extracts substring length characters instead. Note start value 1 refers first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/substring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function substring — substring","text":"string VARCHAR start BIGINT length BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/substring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function substring — substring","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/substring.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function substring — substring","text":"substring(string = VARCHAR, start = BIGINT, length = BIGINT) substring(string = VARCHAR, start = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/substring.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function substring — substring","text":"","code":"substring('Hello', 2) substring('Hello', 2, 2)"},{"path":"https://cynkra.github.io/dd/reference/substring_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function substring_grapheme — substring_grapheme","title":"DuckDB function substring_grapheme — substring_grapheme","text":"Extracts substring starting grapheme clusters start end string. optional argument length set, extracts substring length grapheme clusters instead. Note start value 1 refers first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/substring_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function substring_grapheme — substring_grapheme","text":"string VARCHAR start BIGINT length BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/substring_grapheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function substring_grapheme — substring_grapheme","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/substring_grapheme.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function substring_grapheme — substring_grapheme","text":"substring_grapheme(string = VARCHAR, start = BIGINT, length = BIGINT) substring_grapheme(string = VARCHAR, start = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/substring_grapheme.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function substring_grapheme — substring_grapheme","text":"","code":"substring_grapheme('🦆🤦🏼‍♂️🤦🏽‍♀️🦆', 3) substring_grapheme('🦆🤦🏼‍♂️🤦🏽‍♀️🦆', 3, 2)"},{"path":"https://cynkra.github.io/dd/reference/subtract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function subtract — subtract","title":"DuckDB function subtract — subtract","text":"DuckDB function subtract().","code":""},{"path":"https://cynkra.github.io/dd/reference/subtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function subtract — subtract","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIGNUM | DATE | TIMESTAMP | INTERVAL | TIME | TIME TIME ZONE col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIGNUM | DATE | TIMESTAMP | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/subtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function subtract — subtract","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIGNUM | DATE | INTERVAL | TIMESTAMP | TIME | TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/subtract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function subtract — subtract","text":"subtract(col0 = TINYINT) subtract(col0 = TINYINT, col1 = TINYINT) subtract(col0 = SMALLINT) subtract(col0 = SMALLINT, col1 = SMALLINT) subtract(col0 = INTEGER) subtract(col0 = INTEGER, col1 = INTEGER) subtract(col0 = BIGINT) subtract(col0 = BIGINT, col1 = BIGINT) subtract(col0 = HUGEINT) subtract(col0 = HUGEINT, col1 = HUGEINT) subtract(col0 = FLOAT) subtract(col0 = FLOAT, col1 = FLOAT) subtract(col0 = DOUBLE) subtract(col0 = DOUBLE, col1 = DOUBLE) subtract(col0 = DECIMAL) subtract(col0 = DECIMAL, col1 = DECIMAL) subtract(col0 = UTINYINT) subtract(col0 = UTINYINT, col1 = UTINYINT) subtract(col0 = USMALLINT) subtract(col0 = USMALLINT, col1 = USMALLINT) subtract(col0 = UINTEGER) subtract(col0 = UINTEGER, col1 = UINTEGER) subtract(col0 = UBIGINT) subtract(col0 = UBIGINT, col1 = UBIGINT) subtract(col0 = UHUGEINT) subtract(col0 = UHUGEINT, col1 = UHUGEINT) subtract(col0 = BIGNUM) subtract(col0 = BIGNUM, col1 = BIGNUM) subtract(col0 = DATE, col1 = DATE) subtract(col0 = DATE, col1 = INTEGER) subtract(col0 = TIMESTAMP, col1 = TIMESTAMP) subtract(col0 = INTERVAL, col1 = INTERVAL) subtract(col0 = DATE, col1 = INTERVAL) subtract(col0 = TIME, col1 = INTERVAL) subtract(col0 = TIMESTAMP, col1 = INTERVAL) subtract(col0 = `TIME TIME ZONE`, col1 = INTERVAL) subtract(col0 = INTERVAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/suffix.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function suffix — suffix","title":"DuckDB function suffix — suffix","text":"Returns true string ends search_string.","code":""},{"path":"https://cynkra.github.io/dd/reference/suffix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function suffix — suffix","text":"","code":"suffix(string = VARCHAR, search_string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/suffix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function suffix — suffix","text":"string VARCHAR search_string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/suffix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function suffix — suffix","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/suffix.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function suffix — suffix","text":"","code":"suffix('abc', 'bc')"},{"path":"https://cynkra.github.io/dd/reference/sum.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sum — sum","title":"DuckDB function sum — sum","text":"Calculates sum value tuples arg.","code":""},{"path":"https://cynkra.github.io/dd/reference/sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sum — sum","text":"arg DECIMAL | BOOLEAN | SMALLINT | INTEGER | BIGINT | HUGEINT | DOUBLE | BIGNUM","code":""},{"path":"https://cynkra.github.io/dd/reference/sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sum — sum","text":"DECIMAL | HUGEINT | DOUBLE | BIGNUM","code":""},{"path":"https://cynkra.github.io/dd/reference/sum.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function sum — sum","text":"sum(arg = DECIMAL) sum(arg = BOOLEAN) sum(arg = SMALLINT) sum(arg = INTEGER) sum(arg = BIGINT) sum(arg = HUGEINT) sum(arg = DOUBLE) sum(arg = BIGNUM)","code":""},{"path":"https://cynkra.github.io/dd/reference/sum.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sum — sum","text":"","code":"sum(A)"},{"path":"https://cynkra.github.io/dd/reference/sum_no_overflow.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sum_no_overflow — sum_no_overflow","title":"DuckDB function sum_no_overflow — sum_no_overflow","text":"Internal . Calculates sum value tuples arg without overflow checks.","code":""},{"path":"https://cynkra.github.io/dd/reference/sum_no_overflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sum_no_overflow — sum_no_overflow","text":"arg INTEGER | BIGINT | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/sum_no_overflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sum_no_overflow — sum_no_overflow","text":"HUGEINT | DECIMAL","code":""},{"path":"https://cynkra.github.io/dd/reference/sum_no_overflow.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function sum_no_overflow — sum_no_overflow","text":"sum_no_overflow(arg = INTEGER) sum_no_overflow(arg = BIGINT) sum_no_overflow(arg = DECIMAL)","code":""},{"path":"https://cynkra.github.io/dd/reference/sum_no_overflow.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sum_no_overflow — sum_no_overflow","text":"","code":"sum_no_overflow(A)"},{"path":"https://cynkra.github.io/dd/reference/sumkahan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function sumkahan — sumkahan","title":"DuckDB function sumkahan — sumkahan","text":"Calculates sum using accurate floating point summation (Kahan Sum).","code":""},{"path":"https://cynkra.github.io/dd/reference/sumkahan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function sumkahan — sumkahan","text":"","code":"sumkahan(arg = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/sumkahan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function sumkahan — sumkahan","text":"arg DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sumkahan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function sumkahan — sumkahan","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/sumkahan.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function sumkahan — sumkahan","text":"","code":"sumkahan(A)"},{"path":"https://cynkra.github.io/dd/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function summary — summary","title":"DuckDB function summary — summary","text":"DuckDB function summary().","code":""},{"path":"https://cynkra.github.io/dd/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function summary — summary","text":"","code":"summary(col0 = TABLE)"},{"path":"https://cynkra.github.io/dd/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function summary — summary","text":"col0 TABLE","code":""},{"path":"https://cynkra.github.io/dd/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function summary — summary","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/table_info.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function table_info — table_info","title":"DuckDB function table_info — table_info","text":"DuckDB function table_info().","code":""},{"path":"https://cynkra.github.io/dd/reference/table_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function table_info — table_info","text":"","code":"table_info(col0 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/table_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function table_info — table_info","text":"col0 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/table_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function table_info — table_info","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/tan.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function tan — tan","title":"DuckDB function tan — tan","text":"Computes tan x.","code":""},{"path":"https://cynkra.github.io/dd/reference/tan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function tan — tan","text":"","code":"tan(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/tan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function tan — tan","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/tan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function tan — tan","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/tan.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function tan — tan","text":"","code":"tan(90)"},{"path":"https://cynkra.github.io/dd/reference/tanh.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function tanh — tanh","title":"DuckDB function tanh — tanh","text":"Computes hyperbolic tan x.","code":""},{"path":"https://cynkra.github.io/dd/reference/tanh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function tanh — tanh","text":"","code":"tanh(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/tanh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function tanh — tanh","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/tanh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function tanh — tanh","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/tanh.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function tanh — tanh","text":"","code":"tanh(1)"},{"path":"https://cynkra.github.io/dd/reference/test_all_types.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function test_all_types — test_all_types","title":"DuckDB function test_all_types — test_all_types","text":"DuckDB function test_all_types().","code":""},{"path":"https://cynkra.github.io/dd/reference/test_all_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function test_all_types — test_all_types","text":"","code":"test_all_types(use_large_enum = BOOLEAN, use_large_bignum = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/test_all_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function test_all_types — test_all_types","text":"use_large_enum BOOLEAN use_large_bignum BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/test_all_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function test_all_types — test_all_types","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/test_vector_types.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function test_vector_types — test_vector_types","title":"DuckDB function test_vector_types — test_vector_types","text":"DuckDB function test_vector_types().","code":""},{"path":"https://cynkra.github.io/dd/reference/test_vector_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function test_vector_types — test_vector_types","text":"","code":"test_vector_types(col0 = ANY, all_flat = BOOLEAN)"},{"path":"https://cynkra.github.io/dd/reference/test_vector_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function test_vector_types — test_vector_types","text":"col0 all_flat BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/test_vector_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function test_vector_types — test_vector_types","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/time_bucket.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function time_bucket — time_bucket","title":"DuckDB function time_bucket — time_bucket","text":"Truncate TIMESTAMPTZ specified interval bucket_width. Buckets aligned relative origin TIMESTAMPTZ. origin defaults 2000-01-03 00:00:00+00 buckets include month year interval, 2000-01-01 00:00:00+00 month year buckets.","code":""},{"path":"https://cynkra.github.io/dd/reference/time_bucket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function time_bucket — time_bucket","text":"bucket_width INTERVAL timestamp DATE | TIMESTAMP | TIMESTAMP TIME ZONE origin DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE | VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/time_bucket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function time_bucket — time_bucket","text":"DATE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/time_bucket.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function time_bucket — time_bucket","text":"time_bucket(bucket_width = INTERVAL, timestamp = DATE) time_bucket(bucket_width = INTERVAL, timestamp = DATE, origin = DATE) time_bucket(bucket_width = INTERVAL, timestamp = DATE, origin = INTERVAL) time_bucket(bucket_width = INTERVAL, timestamp = TIMESTAMP) time_bucket(bucket_width = INTERVAL, timestamp = TIMESTAMP, origin = INTERVAL) time_bucket(bucket_width = INTERVAL, timestamp = TIMESTAMP, origin = TIMESTAMP) time_bucket(bucket_width = INTERVAL, timestamp = `TIMESTAMP TIME ZONE`) time_bucket(bucket_width = INTERVAL, timestamp = `TIMESTAMP TIME ZONE`, origin = INTERVAL) time_bucket(bucket_width = INTERVAL, timestamp = `TIMESTAMP TIME ZONE`, origin = `TIMESTAMP TIME ZONE`) time_bucket(bucket_width = INTERVAL, timestamp = `TIMESTAMP TIME ZONE`, origin = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/time_bucket.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function time_bucket — time_bucket","text":"","code":"time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')"},{"path":"https://cynkra.github.io/dd/reference/times-times.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ** — **","title":"DuckDB function ** — **","text":"Computes x power y.","code":""},{"path":"https://cynkra.github.io/dd/reference/times-times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ** — **","text":"","code":"`**`(x = DOUBLE, y = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/times-times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ** — **","text":"x DOUBLE y DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/times-times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ** — **","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/times-times.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ** — **","text":"","code":"2 ** 3"},{"path":"https://cynkra.github.io/dd/reference/times.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function * — *","title":"DuckDB function * — *","text":"DuckDB function *().","code":""},{"path":"https://cynkra.github.io/dd/reference/times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function * — *","text":"col0 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL col1 TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function * — *","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/times.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function * — *","text":"`*`(col0 = TINYINT, col1 = TINYINT) `*`(col0 = SMALLINT, col1 = SMALLINT) `*`(col0 = INTEGER, col1 = INTEGER) `*`(col0 = BIGINT, col1 = BIGINT) `*`(col0 = HUGEINT, col1 = HUGEINT) `*`(col0 = FLOAT, col1 = FLOAT) `*`(col0 = DOUBLE, col1 = DOUBLE) `*`(col0 = DECIMAL, col1 = DECIMAL) `*`(col0 = UTINYINT, col1 = UTINYINT) `*`(col0 = USMALLINT, col1 = USMALLINT) `*`(col0 = UINTEGER, col1 = UINTEGER) `*`(col0 = UBIGINT, col1 = UBIGINT) `*`(col0 = UHUGEINT, col1 = UHUGEINT) `*`(col0 = INTERVAL, col1 = DOUBLE) `*`(col0 = DOUBLE, col1 = INTERVAL) `*`(col0 = BIGINT, col1 = INTERVAL) `*`(col0 = INTERVAL, col1 = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/timetz_byte_comparable.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"Converts TIME TIME ZONE integer sort key.","code":""},{"path":"https://cynkra.github.io/dd/reference/timetz_byte_comparable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"","code":"timetz_byte_comparable(time_tz = `TIME WITH TIME ZONE`)"},{"path":"https://cynkra.github.io/dd/reference/timetz_byte_comparable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"time_tz TIME TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/timetz_byte_comparable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/timetz_byte_comparable.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function timetz_byte_comparable — timetz_byte_comparable","text":"","code":"timetz_byte_comparable('18:18:16.21-07:00'::TIMETZ)"},{"path":"https://cynkra.github.io/dd/reference/timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function timezone — timezone","title":"DuckDB function timezone — timezone","text":"Extract timezone component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function timezone — timezone","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE | VARCHAR col1 TIME TIME ZONE | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function timezone — timezone","text":"BIGINT | TIME TIME ZONE | TIMESTAMP TIME ZONE | TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function timezone — timezone","text":"timezone(ts = DATE) timezone(ts = INTERVAL) timezone(ts = INTERVAL, col1 = `TIME TIME ZONE`) timezone(ts = TIMESTAMP) timezone(ts = `TIMESTAMP TIME ZONE`) timezone(ts = VARCHAR, col1 = TIMESTAMP) timezone(ts = VARCHAR, col1 = `TIMESTAMP TIME ZONE`) timezone(ts = VARCHAR, col1 = `TIME TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function timezone — timezone","text":"","code":"timezone(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/timezone_hour.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function timezone_hour — timezone_hour","title":"DuckDB function timezone_hour — timezone_hour","text":"Extract timezone_hour component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function timezone_hour — timezone_hour","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function timezone_hour — timezone_hour","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_hour.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function timezone_hour — timezone_hour","text":"timezone_hour(ts = DATE) timezone_hour(ts = INTERVAL) timezone_hour(ts = TIMESTAMP) timezone_hour(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_hour.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function timezone_hour — timezone_hour","text":"","code":"timezone_hour(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/timezone_minute.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function timezone_minute — timezone_minute","title":"DuckDB function timezone_minute — timezone_minute","text":"Extract timezone_minute component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_minute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function timezone_minute — timezone_minute","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_minute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function timezone_minute — timezone_minute","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_minute.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function timezone_minute — timezone_minute","text":"timezone_minute(ts = DATE) timezone_minute(ts = INTERVAL) timezone_minute(ts = TIMESTAMP) timezone_minute(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/timezone_minute.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function timezone_minute — timezone_minute","text":"","code":"timezone_minute(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/to_base.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_base — to_base","title":"DuckDB function to_base — to_base","text":"Converts number string given base radix, optionally padding leading zeros min_length.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_base — to_base","text":"number BIGINT radix INTEGER min_length INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_base — to_base","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_base — to_base","text":"to_base(number = BIGINT, radix = INTEGER) to_base(number = BIGINT, radix = INTEGER, min_length = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_base — to_base","text":"","code":"to_base(42, 16, 5)"},{"path":"https://cynkra.github.io/dd/reference/to_base64.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_base64 — to_base64","title":"DuckDB function to_base64 — to_base64","text":"Converts blob base64 encoded string.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_base64 — to_base64","text":"","code":"to_base64(blob = BLOB)"},{"path":"https://cynkra.github.io/dd/reference/to_base64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_base64 — to_base64","text":"blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_base64 — to_base64","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/to_base64.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_base64 — to_base64","text":"","code":"to_base64('A'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/to_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_binary — to_binary","title":"DuckDB function to_binary — to_binary","text":"Converts string binary representation. Converts value binary representation.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_binary — to_binary","text":"string VARCHAR value BIGNUM | UBIGINT | BIGINT | HUGEINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_binary — to_binary","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/to_binary.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_binary — to_binary","text":"to_binary(string = VARCHAR) to_binary(value = BIGNUM) to_binary(value = UBIGINT) to_binary(value = BIGINT) to_binary(value = HUGEINT) to_binary(value = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_binary.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_binary — to_binary","text":"","code":"to_binary('Aa') to_binary(42)"},{"path":"https://cynkra.github.io/dd/reference/to_centuries.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_centuries — to_centuries","title":"DuckDB function to_centuries — to_centuries","text":"Construct century interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_centuries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_centuries — to_centuries","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_centuries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_centuries — to_centuries","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_centuries.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_centuries — to_centuries","text":"to_centuries(integer = INTEGER) to_centuries(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_centuries.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_centuries — to_centuries","text":"","code":"to_centuries(5)"},{"path":"https://cynkra.github.io/dd/reference/to_days.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_days — to_days","title":"DuckDB function to_days — to_days","text":"Construct day interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_days — to_days","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_days — to_days","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_days.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_days — to_days","text":"to_days(integer = INTEGER) to_days(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_days.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_days — to_days","text":"","code":"to_days(5)"},{"path":"https://cynkra.github.io/dd/reference/to_decades.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_decades — to_decades","title":"DuckDB function to_decades — to_decades","text":"Construct decade interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_decades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_decades — to_decades","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_decades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_decades — to_decades","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_decades.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_decades — to_decades","text":"to_decades(integer = INTEGER) to_decades(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_decades.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_decades — to_decades","text":"","code":"to_decades(5)"},{"path":"https://cynkra.github.io/dd/reference/to_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_hex — to_hex","title":"DuckDB function to_hex — to_hex","text":"Converts string hexadecimal representation. Converts value VARCHAR using hexadecimal representation. Converts blob VARCHAR using hexadecimal encoding.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_hex — to_hex","text":"string VARCHAR value BIGNUM | BIGINT | UBIGINT | HUGEINT | UHUGEINT blob BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_hex — to_hex","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hex.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_hex — to_hex","text":"to_hex(string = VARCHAR) to_hex(value = BIGNUM) to_hex(blob = BLOB) to_hex(value = BIGINT) to_hex(value = UBIGINT) to_hex(value = HUGEINT) to_hex(value = UHUGEINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_hex — to_hex","text":"","code":"to_hex('Hello') to_hex(42) to_hex('\\xAA\\xBB'::BLOB)"},{"path":"https://cynkra.github.io/dd/reference/to_hours.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_hours — to_hours","title":"DuckDB function to_hours — to_hours","text":"Construct hour interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_hours — to_hours","text":"","code":"to_hours(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/to_hours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_hours — to_hours","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_hours — to_hours","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_hours.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_hours — to_hours","text":"","code":"to_hours(5)"},{"path":"https://cynkra.github.io/dd/reference/to_microseconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_microseconds — to_microseconds","title":"DuckDB function to_microseconds — to_microseconds","text":"Construct microsecond interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_microseconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_microseconds — to_microseconds","text":"","code":"to_microseconds(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/to_microseconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_microseconds — to_microseconds","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_microseconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_microseconds — to_microseconds","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_microseconds.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_microseconds — to_microseconds","text":"","code":"to_microseconds(5)"},{"path":"https://cynkra.github.io/dd/reference/to_millennia.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_millennia — to_millennia","title":"DuckDB function to_millennia — to_millennia","text":"Construct millenium interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_millennia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_millennia — to_millennia","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_millennia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_millennia — to_millennia","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_millennia.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_millennia — to_millennia","text":"to_millennia(integer = INTEGER) to_millennia(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_millennia.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_millennia — to_millennia","text":"","code":"to_millennia(1)"},{"path":"https://cynkra.github.io/dd/reference/to_milliseconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_milliseconds — to_milliseconds","title":"DuckDB function to_milliseconds — to_milliseconds","text":"Construct millisecond interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_milliseconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_milliseconds — to_milliseconds","text":"","code":"to_milliseconds(double = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/to_milliseconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_milliseconds — to_milliseconds","text":"double DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/to_milliseconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_milliseconds — to_milliseconds","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_milliseconds.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_milliseconds — to_milliseconds","text":"","code":"to_milliseconds(5.5)"},{"path":"https://cynkra.github.io/dd/reference/to_minutes.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_minutes — to_minutes","title":"DuckDB function to_minutes — to_minutes","text":"Construct minute interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_minutes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_minutes — to_minutes","text":"","code":"to_minutes(integer = BIGINT)"},{"path":"https://cynkra.github.io/dd/reference/to_minutes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_minutes — to_minutes","text":"integer BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_minutes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_minutes — to_minutes","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_minutes.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_minutes — to_minutes","text":"","code":"to_minutes(5)"},{"path":"https://cynkra.github.io/dd/reference/to_months.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_months — to_months","title":"DuckDB function to_months — to_months","text":"Construct month interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_months — to_months","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_months — to_months","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_months.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_months — to_months","text":"to_months(integer = INTEGER) to_months(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_months.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_months — to_months","text":"","code":"to_months(5)"},{"path":"https://cynkra.github.io/dd/reference/to_quarters.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_quarters — to_quarters","title":"DuckDB function to_quarters — to_quarters","text":"Construct quarter interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_quarters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_quarters — to_quarters","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_quarters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_quarters — to_quarters","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_quarters.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_quarters — to_quarters","text":"to_quarters(integer = INTEGER) to_quarters(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_quarters.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_quarters — to_quarters","text":"","code":"to_quarters(5)"},{"path":"https://cynkra.github.io/dd/reference/to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_seconds — to_seconds","title":"DuckDB function to_seconds — to_seconds","text":"Construct second interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_seconds — to_seconds","text":"","code":"to_seconds(double = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_seconds — to_seconds","text":"double DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/to_seconds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_seconds — to_seconds","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_seconds.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_seconds — to_seconds","text":"","code":"to_seconds(5.5)"},{"path":"https://cynkra.github.io/dd/reference/to_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_timestamp — to_timestamp","title":"DuckDB function to_timestamp — to_timestamp","text":"Converts secs since epoch timestamp time zone.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function to_timestamp — to_timestamp","text":"","code":"to_timestamp(sec = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/to_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_timestamp — to_timestamp","text":"sec DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/to_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_timestamp — to_timestamp","text":"TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/to_timestamp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_timestamp — to_timestamp","text":"","code":"to_timestamp(1284352323.5)"},{"path":"https://cynkra.github.io/dd/reference/to_weeks.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_weeks — to_weeks","title":"DuckDB function to_weeks — to_weeks","text":"Construct week interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_weeks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_weeks — to_weeks","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_weeks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_weeks — to_weeks","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_weeks.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_weeks — to_weeks","text":"to_weeks(integer = INTEGER) to_weeks(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_weeks.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_weeks — to_weeks","text":"","code":"to_weeks(5)"},{"path":"https://cynkra.github.io/dd/reference/to_years.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function to_years — to_years","title":"DuckDB function to_years — to_years","text":"Construct year interval.","code":""},{"path":"https://cynkra.github.io/dd/reference/to_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function to_years — to_years","text":"integer INTEGER | BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/to_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function to_years — to_years","text":"INTERVAL","code":""},{"path":"https://cynkra.github.io/dd/reference/to_years.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function to_years — to_years","text":"to_years(integer = INTEGER) to_years(integer = BIGINT)","code":""},{"path":"https://cynkra.github.io/dd/reference/to_years.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function to_years — to_years","text":"","code":"to_years(5)"},{"path":"https://cynkra.github.io/dd/reference/transaction_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function transaction_timestamp — transaction_timestamp","title":"DuckDB function transaction_timestamp — transaction_timestamp","text":"Returns current timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/transaction_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function transaction_timestamp — transaction_timestamp","text":"","code":"transaction_timestamp()"},{"path":"https://cynkra.github.io/dd/reference/transaction_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function transaction_timestamp — transaction_timestamp","text":"TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/transaction_timestamp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function transaction_timestamp — transaction_timestamp","text":"","code":"transaction_timestamp()"},{"path":"https://cynkra.github.io/dd/reference/translate.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function translate — translate","title":"DuckDB function translate — translate","text":"Replaces character string matches character set corresponding character set. longer , occurrences extra characters deleted.","code":""},{"path":"https://cynkra.github.io/dd/reference/translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function translate — translate","text":"","code":"translate(string = VARCHAR, from = VARCHAR, to = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function translate — translate","text":"string VARCHAR VARCHAR VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function translate — translate","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/translate.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function translate — translate","text":"","code":"translate('12345', '143', 'ax')"},{"path":"https://cynkra.github.io/dd/reference/trim.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function trim — trim","title":"DuckDB function trim — trim","text":"Removes occurrences characters either side string. characters defaults space.","code":""},{"path":"https://cynkra.github.io/dd/reference/trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function trim — trim","text":"string VARCHAR characters VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function trim — trim","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/trim.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function trim — trim","text":"trim(string = VARCHAR) trim(string = VARCHAR, characters = VARCHAR)","code":""},{"path":"https://cynkra.github.io/dd/reference/trim.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function trim — trim","text":"","code":"trim('    test  ') trim('>>>>test<<', '><')"},{"path":"https://cynkra.github.io/dd/reference/trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function trunc — trunc","title":"DuckDB function trunc — trunc","text":"Truncates number.","code":""},{"path":"https://cynkra.github.io/dd/reference/trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function trunc — trunc","text":"x TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT col1 INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function trunc — trunc","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE | DECIMAL | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT","code":""},{"path":"https://cynkra.github.io/dd/reference/trunc.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function trunc — trunc","text":"trunc(x = TINYINT) trunc(x = TINYINT, col1 = INTEGER) trunc(x = SMALLINT) trunc(x = SMALLINT, col1 = INTEGER) trunc(x = INTEGER) trunc(x = INTEGER, col1 = INTEGER) trunc(x = BIGINT) trunc(x = BIGINT, col1 = INTEGER) trunc(x = HUGEINT) trunc(x = HUGEINT, col1 = INTEGER) trunc(x = FLOAT) trunc(x = FLOAT, col1 = INTEGER) trunc(x = DOUBLE) trunc(x = DOUBLE, col1 = INTEGER) trunc(x = DECIMAL) trunc(x = DECIMAL, col1 = INTEGER) trunc(x = UTINYINT) trunc(x = UTINYINT, col1 = INTEGER) trunc(x = USMALLINT) trunc(x = USMALLINT, col1 = INTEGER) trunc(x = UINTEGER) trunc(x = UINTEGER, col1 = INTEGER) trunc(x = UBIGINT) trunc(x = UBIGINT, col1 = INTEGER) trunc(x = UHUGEINT) trunc(x = UHUGEINT, col1 = INTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/trunc.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function trunc — trunc","text":"","code":"trunc(17.4)"},{"path":"https://cynkra.github.io/dd/reference/truncate_duckdb_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function truncate_duckdb_logs — truncate_duckdb_logs","title":"DuckDB function truncate_duckdb_logs — truncate_duckdb_logs","text":"DuckDB function truncate_duckdb_logs().","code":""},{"path":"https://cynkra.github.io/dd/reference/truncate_duckdb_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function truncate_duckdb_logs — truncate_duckdb_logs","text":"","code":"truncate_duckdb_logs()"},{"path":"https://cynkra.github.io/dd/reference/truncate_duckdb_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function truncate_duckdb_logs — truncate_duckdb_logs","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/try_strptime.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function try_strptime — try_strptime","title":"DuckDB function try_strptime — try_strptime","text":"Converts string text timestamp according format string. Returns NULL failure.","code":""},{"path":"https://cynkra.github.io/dd/reference/try_strptime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function try_strptime — try_strptime","text":"text VARCHAR format VARCHAR | VARCHAR[]","code":""},{"path":"https://cynkra.github.io/dd/reference/try_strptime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function try_strptime — try_strptime","text":"TIMESTAMP","code":""},{"path":"https://cynkra.github.io/dd/reference/try_strptime.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function try_strptime — try_strptime","text":"try_strptime(text = VARCHAR, format = VARCHAR) try_strptime(text = VARCHAR, format = `VARCHAR[]`)","code":""},{"path":"https://cynkra.github.io/dd/reference/try_strptime.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function try_strptime — try_strptime","text":"","code":"try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')"},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-times.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ~~* — ~~*","title":"DuckDB function ~~* — ~~*","text":"DuckDB function ~~*().","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ~~* — ~~*","text":"","code":"`~~*`(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ~~* — ~~*","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ~~* — ~~*","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-twiddle.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ~~~ — ~~~","title":"DuckDB function ~~~ — ~~~","text":"DuckDB function ~~~().","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-twiddle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ~~~ — ~~~","text":"","code":"`~~~`(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-twiddle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ~~~ — ~~~","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle-twiddle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ~~~ — ~~~","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ~~ — ~~","title":"DuckDB function ~~ — ~~","text":"DuckDB function ~~().","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ~~ — ~~","text":"","code":"`~~`(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ~~ — ~~","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle-twiddle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ~~ — ~~","text":"BOOLEAN","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ~ — ~","title":"DuckDB function ~ — ~","text":"Bitwise .","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ~ — ~","text":"input TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ~ — ~","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function ~ — ~","text":"`~`(input = TINYINT) `~`(input = SMALLINT) `~`(input = INTEGER) `~`(input = BIGINT) `~`(input = HUGEINT) `~`(input = UTINYINT) `~`(input = USMALLINT) `~`(input = UINTEGER) `~`(input = UBIGINT) `~`(input = UHUGEINT) `~`(input = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/twiddle.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ~ — ~","text":"","code":"~15"},{"path":"https://cynkra.github.io/dd/reference/txid_current.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function txid_current — txid_current","title":"DuckDB function txid_current — txid_current","text":"Returns current transaction’s ID (BIGINT). assign new one current transaction one already.","code":""},{"path":"https://cynkra.github.io/dd/reference/txid_current.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function txid_current — txid_current","text":"","code":"txid_current()"},{"path":"https://cynkra.github.io/dd/reference/txid_current.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function txid_current — txid_current","text":"UBIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/txid_current.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function txid_current — txid_current","text":"","code":"txid_current()"},{"path":"https://cynkra.github.io/dd/reference/typeof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function typeof — typeof","title":"DuckDB function typeof — typeof","text":"Returns name data type result expression.","code":""},{"path":"https://cynkra.github.io/dd/reference/typeof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function typeof — typeof","text":"","code":"typeof(expression = ANY)"},{"path":"https://cynkra.github.io/dd/reference/typeof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function typeof — typeof","text":"expression ","code":""},{"path":"https://cynkra.github.io/dd/reference/typeof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function typeof — typeof","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/typeof.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function typeof — typeof","text":"","code":"typeof('abc')"},{"path":"https://cynkra.github.io/dd/reference/ucase.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function ucase — ucase","title":"DuckDB function ucase — ucase","text":"Converts string upper case.","code":""},{"path":"https://cynkra.github.io/dd/reference/ucase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function ucase — ucase","text":"","code":"ucase(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/ucase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function ucase — ucase","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ucase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function ucase — ucase","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/ucase.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function ucase — ucase","text":"","code":"ucase('Hello')"},{"path":"https://cynkra.github.io/dd/reference/unbin.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unbin — unbin","title":"DuckDB function unbin — unbin","text":"Converts value binary representation blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/unbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function unbin — unbin","text":"","code":"unbin(value = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/unbin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unbin — unbin","text":"value VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/unbin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function unbin — unbin","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/unbin.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function unbin — unbin","text":"","code":"unbin('0110')"},{"path":"https://cynkra.github.io/dd/reference/unhex.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unhex — unhex","title":"DuckDB function unhex — unhex","text":"Converts value hexadecimal representation blob.","code":""},{"path":"https://cynkra.github.io/dd/reference/unhex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function unhex — unhex","text":"","code":"unhex(value = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/unhex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unhex — unhex","text":"value VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/unhex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function unhex — unhex","text":"BLOB","code":""},{"path":"https://cynkra.github.io/dd/reference/unhex.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function unhex — unhex","text":"","code":"unhex('2A')"},{"path":"https://cynkra.github.io/dd/reference/unicode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unicode — unicode","title":"DuckDB function unicode — unicode","text":"Returns INTEGER representing unicode codepoint first character string.","code":""},{"path":"https://cynkra.github.io/dd/reference/unicode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function unicode — unicode","text":"","code":"unicode(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/unicode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unicode — unicode","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/unicode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function unicode — unicode","text":"INTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/unicode.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function unicode — unicode","text":"","code":"[unicode('âbcd'), unicode('â'), unicode(''), unicode(NULL)]"},{"path":"https://cynkra.github.io/dd/reference/union_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function union_extract — union_extract","title":"DuckDB function union_extract — union_extract","text":"Extract value named tags union. NULL tag currently selected.","code":""},{"path":"https://cynkra.github.io/dd/reference/union_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function union_extract — union_extract","text":"","code":"union_extract(union = UNION, tag = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/union_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function union_extract — union_extract","text":"union UNION tag VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/union_extract.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function union_extract — union_extract","text":"","code":"union_extract(s, 'k')"},{"path":"https://cynkra.github.io/dd/reference/union_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function union_tag — union_tag","title":"DuckDB function union_tag — union_tag","text":"Retrieve currently selected tag union ENUM.","code":""},{"path":"https://cynkra.github.io/dd/reference/union_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function union_tag — union_tag","text":"","code":"union_tag(union = UNION)"},{"path":"https://cynkra.github.io/dd/reference/union_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function union_tag — union_tag","text":"union UNION","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/union_tag.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function union_tag — union_tag","text":"","code":"union_tag(union_value(k := 'foo'))"},{"path":"https://cynkra.github.io/dd/reference/union_value.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function union_value — union_value","title":"DuckDB function union_value — union_value","text":"Create single member UNION containing argument value. tag value bound variable name.","code":""},{"path":"https://cynkra.github.io/dd/reference/union_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function union_value — union_value","text":"","code":"union_value()"},{"path":"https://cynkra.github.io/dd/reference/union_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function union_value — union_value","text":"UNION","code":""},{"path":"https://cynkra.github.io/dd/reference/union_value.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function union_value — union_value","text":"","code":"union_value(k := 'hello')"},{"path":"https://cynkra.github.io/dd/reference/unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unnest — unnest","title":"DuckDB function unnest — unnest","text":"DuckDB function unnest().","code":""},{"path":"https://cynkra.github.io/dd/reference/unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function unnest — unnest","text":"","code":"unnest(col0 = ANY)"},{"path":"https://cynkra.github.io/dd/reference/unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function unnest — unnest","text":"col0 ","code":""},{"path":"https://cynkra.github.io/dd/reference/unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function unnest — unnest","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/unpivot_list.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function unpivot_list — unpivot_list","title":"DuckDB function unpivot_list — unpivot_list","text":"Identical list_value, generated part unpivot better error messages.","code":""},{"path":"https://cynkra.github.io/dd/reference/unpivot_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function unpivot_list — unpivot_list","text":"","code":"unpivot_list()"},{"path":"https://cynkra.github.io/dd/reference/unpivot_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function unpivot_list — unpivot_list","text":"LIST","code":""},{"path":"https://cynkra.github.io/dd/reference/unpivot_list.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function unpivot_list — unpivot_list","text":"","code":"unpivot_list(4, 5, 6)"},{"path":"https://cynkra.github.io/dd/reference/upper.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function upper — upper","title":"DuckDB function upper — upper","text":"Converts string upper case.","code":""},{"path":"https://cynkra.github.io/dd/reference/upper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function upper — upper","text":"","code":"upper(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/upper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function upper — upper","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/upper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function upper — upper","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/upper.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function upper — upper","text":"","code":"upper('Hello')"},{"path":"https://cynkra.github.io/dd/reference/url_decode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function url_decode — url_decode","title":"DuckDB function url_decode — url_decode","text":"Decodes URL representation using Percent-Encoding.","code":""},{"path":"https://cynkra.github.io/dd/reference/url_decode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function url_decode — url_decode","text":"","code":"url_decode(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/url_decode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function url_decode — url_decode","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/url_decode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function url_decode — url_decode","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/url_decode.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function url_decode — url_decode","text":"","code":"url_decode('https%3A%2F%2Fduckdb.org%2Fwhy_duckdb%23portable')"},{"path":"https://cynkra.github.io/dd/reference/url_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function url_encode — url_encode","title":"DuckDB function url_encode — url_encode","text":"Encodes URL representation using Percent-Encoding.","code":""},{"path":"https://cynkra.github.io/dd/reference/url_encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function url_encode — url_encode","text":"","code":"url_encode(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/url_encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function url_encode — url_encode","text":"string VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/url_encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function url_encode — url_encode","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/url_encode.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function url_encode — url_encode","text":"","code":"url_encode('this string has/ special+ characters>')"},{"path":"https://cynkra.github.io/dd/reference/user.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function user — user","title":"DuckDB function user — user","text":"DuckDB macro user().","code":""},{"path":"https://cynkra.github.io/dd/reference/user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function user — user","text":"","code":"user()"},{"path":"https://cynkra.github.io/dd/reference/user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function user — user","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function user_agent — user_agent","title":"DuckDB function user_agent — user_agent","text":"DuckDB function user_agent().","code":""},{"path":"https://cynkra.github.io/dd/reference/user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function user_agent — user_agent","text":"","code":"user_agent()"},{"path":"https://cynkra.github.io/dd/reference/user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function user_agent — user_agent","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function uuid — uuid","title":"DuckDB function uuid — uuid","text":"Returns random UUID v4 similar : eeccb8c5-9943-b2bb-bb5e-222f4e14b687.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function uuid — uuid","text":"","code":"uuid()"},{"path":"https://cynkra.github.io/dd/reference/uuid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function uuid — uuid","text":"UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function uuid — uuid","text":"","code":"uuid()"},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","title":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","text":"Extract timestamp given UUID v7.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","text":"","code":"uuid_extract_timestamp(uuid = UUID)"},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","text":"uuid UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","text":"TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_timestamp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function uuid_extract_timestamp — uuid_extract_timestamp","text":"","code":"uuid_extract_timestamp('019482e4-1441-7aad-8127-eec99573b0a0')"},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_version.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function uuid_extract_version — uuid_extract_version","title":"DuckDB function uuid_extract_version — uuid_extract_version","text":"Extract version given UUID.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function uuid_extract_version — uuid_extract_version","text":"","code":"uuid_extract_version(uuid = UUID)"},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function uuid_extract_version — uuid_extract_version","text":"uuid UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function uuid_extract_version — uuid_extract_version","text":"UINTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/uuid_extract_version.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function uuid_extract_version — uuid_extract_version","text":"","code":"uuid_extract_version('019482e4-1441-7aad-8127-eec99573b0a0')"},{"path":"https://cynkra.github.io/dd/reference/uuidv4.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function uuidv4 — uuidv4","title":"DuckDB function uuidv4 — uuidv4","text":"Returns random UUIDv4 similar : eeccb8c5-9943-b2bb-bb5e-222f4e14b687.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuidv4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function uuidv4 — uuidv4","text":"","code":"uuidv4()"},{"path":"https://cynkra.github.io/dd/reference/uuidv4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function uuidv4 — uuidv4","text":"UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/uuidv4.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function uuidv4 — uuidv4","text":"","code":"uuidv4()"},{"path":"https://cynkra.github.io/dd/reference/uuidv7.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function uuidv7 — uuidv7","title":"DuckDB function uuidv7 — uuidv7","text":"Returns random UUID v7 similar : 019482e4-1441-7aad-8127-eec99573b0a0.","code":""},{"path":"https://cynkra.github.io/dd/reference/uuidv7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function uuidv7 — uuidv7","text":"","code":"uuidv7()"},{"path":"https://cynkra.github.io/dd/reference/uuidv7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function uuidv7 — uuidv7","text":"UUID","code":""},{"path":"https://cynkra.github.io/dd/reference/uuidv7.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function uuidv7 — uuidv7","text":"","code":"uuidv7()"},{"path":"https://cynkra.github.io/dd/reference/var_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function var_pop — var_pop","title":"DuckDB function var_pop — var_pop","text":"Returns population variance.","code":""},{"path":"https://cynkra.github.io/dd/reference/var_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function var_pop — var_pop","text":"","code":"var_pop(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/var_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function var_pop — var_pop","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/var_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function var_pop — var_pop","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/var_samp.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function var_samp — var_samp","title":"DuckDB function var_samp — var_samp","text":"Returns sample variance input values.","code":""},{"path":"https://cynkra.github.io/dd/reference/var_samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function var_samp — var_samp","text":"","code":"var_samp(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/var_samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function var_samp — var_samp","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/var_samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function var_samp — var_samp","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/var_samp.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function var_samp — var_samp","text":"","code":"(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)"},{"path":"https://cynkra.github.io/dd/reference/variance.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function variance — variance","title":"DuckDB function variance — variance","text":"Returns sample variance input values.","code":""},{"path":"https://cynkra.github.io/dd/reference/variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function variance — variance","text":"","code":"variance(x = DOUBLE)"},{"path":"https://cynkra.github.io/dd/reference/variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function variance — variance","text":"x DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function variance — variance","text":"DOUBLE","code":""},{"path":"https://cynkra.github.io/dd/reference/variance.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function variance — variance","text":"","code":"(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)"},{"path":"https://cynkra.github.io/dd/reference/variant_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function variant_extract — variant_extract","title":"DuckDB function variant_extract — variant_extract","text":"DuckDB function variant_extract().","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function variant_extract — variant_extract","text":"col0 VARIANT col1 VARCHAR | UINTEGER","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function variant_extract — variant_extract","text":"VARIANT","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_extract.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function variant_extract — variant_extract","text":"variant_extract(col0 = VARIANT, col1 = VARCHAR) variant_extract(col0 = VARIANT, col1 = UINTEGER)","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_typeof.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function variant_typeof — variant_typeof","title":"DuckDB function variant_typeof — variant_typeof","text":"Returns internal type input_variant.","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_typeof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function variant_typeof — variant_typeof","text":"","code":"variant_typeof(input_variant = VARIANT)"},{"path":"https://cynkra.github.io/dd/reference/variant_typeof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function variant_typeof — variant_typeof","text":"input_variant VARIANT","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_typeof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function variant_typeof — variant_typeof","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/variant_typeof.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function variant_typeof — variant_typeof","text":"","code":"variant_typeof({'a': 42, 'b': [1,2,3]})::VARIANT)"},{"path":"https://cynkra.github.io/dd/reference/vector_type.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function vector_type — vector_type","title":"DuckDB function vector_type — vector_type","text":"Returns VectorType given column.","code":""},{"path":"https://cynkra.github.io/dd/reference/vector_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function vector_type — vector_type","text":"","code":"vector_type(col = ANY)"},{"path":"https://cynkra.github.io/dd/reference/vector_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function vector_type — vector_type","text":"col ","code":""},{"path":"https://cynkra.github.io/dd/reference/vector_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function vector_type — vector_type","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/vector_type.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function vector_type — vector_type","text":"","code":"vector_type(col)"},{"path":"https://cynkra.github.io/dd/reference/verify_external.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function verify_external — verify_external","title":"DuckDB function verify_external — verify_external","text":"DuckDB function verify_external().","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function verify_external — verify_external","text":"","code":"verify_external()"},{"path":"https://cynkra.github.io/dd/reference/verify_external.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function verify_external — verify_external","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_fetch_row.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function verify_fetch_row — verify_fetch_row","title":"DuckDB function verify_fetch_row — verify_fetch_row","text":"DuckDB function verify_fetch_row().","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_fetch_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function verify_fetch_row — verify_fetch_row","text":"","code":"verify_fetch_row()"},{"path":"https://cynkra.github.io/dd/reference/verify_fetch_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function verify_fetch_row — verify_fetch_row","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_parallelism.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function verify_parallelism — verify_parallelism","title":"DuckDB function verify_parallelism — verify_parallelism","text":"DuckDB function verify_parallelism().","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_parallelism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function verify_parallelism — verify_parallelism","text":"","code":"verify_parallelism()"},{"path":"https://cynkra.github.io/dd/reference/verify_parallelism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function verify_parallelism — verify_parallelism","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_serializer.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function verify_serializer — verify_serializer","title":"DuckDB function verify_serializer — verify_serializer","text":"DuckDB function verify_serializer().","code":""},{"path":"https://cynkra.github.io/dd/reference/verify_serializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function verify_serializer — verify_serializer","text":"","code":"verify_serializer()"},{"path":"https://cynkra.github.io/dd/reference/verify_serializer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function verify_serializer — verify_serializer","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/version.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function version — version","title":"DuckDB function version — version","text":"Returns currently active version DuckDB format: v0.3.2\t.","code":""},{"path":"https://cynkra.github.io/dd/reference/version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function version — version","text":"VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/version.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function version — version","text":"version() version()","code":""},{"path":"https://cynkra.github.io/dd/reference/version.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function version — version","text":"","code":"version()"},{"path":"https://cynkra.github.io/dd/reference/wavg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function wavg — wavg","title":"DuckDB function wavg — wavg","text":"DuckDB macro wavg().","code":""},{"path":"https://cynkra.github.io/dd/reference/wavg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function wavg — wavg","text":"","code":"wavg(value, weight)"},{"path":"https://cynkra.github.io/dd/reference/wavg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function wavg — wavg","text":"value Unspecified. weight Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/wavg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function wavg — wavg","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/week.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function week — week","title":"DuckDB function week — week","text":"Extract week component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function week — week","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function week — week","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/week.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function week — week","text":"week(ts = DATE) week(ts = INTERVAL) week(ts = TIMESTAMP) week(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/week.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function week — week","text":"","code":"week(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function weekday — weekday","title":"DuckDB function weekday — weekday","text":"Extract weekday component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function weekday — weekday","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function weekday — weekday","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/weekday.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function weekday — weekday","text":"weekday(ts = DATE) weekday(ts = INTERVAL) weekday(ts = TIMESTAMP) weekday(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/weekday.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function weekday — weekday","text":"","code":"weekday(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/weekofyear.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function weekofyear — weekofyear","title":"DuckDB function weekofyear — weekofyear","text":"Extract weekofyear component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/weekofyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function weekofyear — weekofyear","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/weekofyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function weekofyear — weekofyear","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/weekofyear.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function weekofyear — weekofyear","text":"weekofyear(ts = DATE) weekofyear(ts = INTERVAL) weekofyear(ts = TIMESTAMP) weekofyear(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/weekofyear.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function weekofyear — weekofyear","text":"","code":"weekofyear(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/weighted_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function weighted_avg — weighted_avg","title":"DuckDB function weighted_avg — weighted_avg","text":"DuckDB macro weighted_avg().","code":""},{"path":"https://cynkra.github.io/dd/reference/weighted_avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function weighted_avg — weighted_avg","text":"","code":"weighted_avg(value, weight)"},{"path":"https://cynkra.github.io/dd/reference/weighted_avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function weighted_avg — weighted_avg","text":"value Unspecified. weight Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/weighted_avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function weighted_avg — weighted_avg","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/which_secret.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function which_secret — which_secret","title":"DuckDB function which_secret — which_secret","text":"DuckDB function which_secret().","code":""},{"path":"https://cynkra.github.io/dd/reference/which_secret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function which_secret — which_secret","text":"","code":"which_secret(col0 = VARCHAR, col1 = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/which_secret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function which_secret — which_secret","text":"col0 VARCHAR col1 VARCHAR","code":""},{"path":"https://cynkra.github.io/dd/reference/which_secret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function which_secret — which_secret","text":"Unspecified.","code":""},{"path":"https://cynkra.github.io/dd/reference/write_log.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function write_log — write_log","title":"DuckDB function write_log — write_log","text":"Writes logger.","code":""},{"path":"https://cynkra.github.io/dd/reference/write_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DuckDB function write_log — write_log","text":"","code":"write_log(string = VARCHAR)"},{"path":"https://cynkra.github.io/dd/reference/write_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function write_log — write_log","text":"string VARCHAR","code":""},{"path":[]},{"path":"https://cynkra.github.io/dd/reference/write_log.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function write_log — write_log","text":"","code":"write_log('Hello')"},{"path":"https://cynkra.github.io/dd/reference/xor.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function xor — xor","title":"DuckDB function xor — xor","text":"Bitwise XOR.","code":""},{"path":"https://cynkra.github.io/dd/reference/xor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function xor — xor","text":"left TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT right TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/xor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function xor — xor","text":"TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | UTINYINT | USMALLINT | UINTEGER | UBIGINT | UHUGEINT | BIT","code":""},{"path":"https://cynkra.github.io/dd/reference/xor.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function xor — xor","text":"xor(left = TINYINT, right = TINYINT) xor(left = SMALLINT, right = SMALLINT) xor(left = INTEGER, right = INTEGER) xor(left = BIGINT, right = BIGINT) xor(left = HUGEINT, right = HUGEINT) xor(left = UTINYINT, right = UTINYINT) xor(left = USMALLINT, right = USMALLINT) xor(left = UINTEGER, right = UINTEGER) xor(left = UBIGINT, right = UBIGINT) xor(left = UHUGEINT, right = UHUGEINT) xor(left = BIT, right = BIT)","code":""},{"path":"https://cynkra.github.io/dd/reference/xor.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function xor — xor","text":"","code":"xor(17, 5)"},{"path":"https://cynkra.github.io/dd/reference/year.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function year — year","title":"DuckDB function year — year","text":"Extract year component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function year — year","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function year — year","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/year.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function year — year","text":"year(ts = DATE) year(ts = INTERVAL) year(ts = TIMESTAMP) year(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/year.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function year — year","text":"","code":"year(timestamp '2021-08-03 11:59:44.123456')"},{"path":"https://cynkra.github.io/dd/reference/yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"DuckDB function yearweek — yearweek","title":"DuckDB function yearweek — yearweek","text":"Extract yearweek component date timestamp.","code":""},{"path":"https://cynkra.github.io/dd/reference/yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DuckDB function yearweek — yearweek","text":"ts DATE | INTERVAL | TIMESTAMP | TIMESTAMP TIME ZONE","code":""},{"path":"https://cynkra.github.io/dd/reference/yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DuckDB function yearweek — yearweek","text":"BIGINT","code":""},{"path":"https://cynkra.github.io/dd/reference/yearweek.html","id":"overloads","dir":"Reference","previous_headings":"","what":"Overloads","title":"DuckDB function yearweek — yearweek","text":"yearweek(ts = DATE) yearweek(ts = INTERVAL) yearweek(ts = TIMESTAMP) yearweek(ts = `TIMESTAMP TIME ZONE`)","code":""},{"path":"https://cynkra.github.io/dd/reference/yearweek.html","id":"sql-examples","dir":"Reference","previous_headings":"","what":"SQL examples","title":"DuckDB function yearweek — yearweek","text":"","code":"yearweek(timestamp '2021-08-03 11:59:44.123456')"}]
