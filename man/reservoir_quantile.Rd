% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duckdb-funs.R
\name{reservoir_quantile}
\alias{reservoir_quantile}
\title{DuckDB function reservoir_quantile}
\arguments{
\item{x}{\code{DECIMAL | TINYINT | SMALLINT | INTEGER | BIGINT | HUGEINT | FLOAT | DOUBLE}}

\item{quantile}{\code{DOUBLE | DOUBLE[]}}

\item{sample_size}{\code{INTEGER}}
}
\value{
\code{DECIMAL | DECIMAL[] | TINYINT | TINYINT[] | SMALLINT | SMALLINT[] | INTEGER | INTEGER[] | BIGINT | BIGINT[] | HUGEINT | HUGEINT[] | FLOAT | FLOAT[] | DOUBLE | DOUBLE[]}
}
\description{
Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.
}
\section{Overloads}{

\itemize{
\item \code{reservoir_quantile(x = DECIMAL, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = DECIMAL, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = DECIMAL, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = DECIMAL, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = TINYINT, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = TINYINT, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = TINYINT, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = TINYINT, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = SMALLINT, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = SMALLINT, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = SMALLINT, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = SMALLINT, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = INTEGER, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = INTEGER, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = INTEGER, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = INTEGER, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = BIGINT, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = BIGINT, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = BIGINT, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = BIGINT, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = HUGEINT, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = HUGEINT, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = HUGEINT, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = HUGEINT, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = FLOAT, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = FLOAT, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = FLOAT, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = FLOAT, quantile = `DOUBLE[]`, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = DOUBLE, quantile = DOUBLE)}
\item \code{reservoir_quantile(x = DOUBLE, quantile = DOUBLE, sample_size = INTEGER)}
\item \code{reservoir_quantile(x = DOUBLE, quantile = `DOUBLE[]`)}
\item \code{reservoir_quantile(x = DOUBLE, quantile = `DOUBLE[]`, sample_size = INTEGER)}
}
}

\examples{
\dontrun{
reservoir_quantile(A, 0.5, 1024)
}
}
