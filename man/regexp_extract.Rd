% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duckdb-funs.R
\name{regexp_extract}
\alias{regexp_extract}
\title{DuckDB function regexp_extract}
\arguments{
\item{string}{\code{VARCHAR}}

\item{regex}{\code{VARCHAR}}

\item{group}{\code{INTEGER}}

\item{options}{\code{VARCHAR}}

\item{name_list}{\code{VARCHAR[]}}
}
\value{
\code{VARCHAR}
}
\description{
If \code{string} contains the \code{regex} pattern, returns the capturing group specified by optional parameter \code{group}; otherwise, returns the empty string. The \code{group} must be a constant value. If no \code{group} is given, it defaults to 0. A set of optional regex \code{options} can be set.

If \code{string} contains the \code{regex} pattern, returns the capturing groups as a struct with corresponding names from \code{name_list}; otherwise, returns a struct with the same keys and empty strings as values. A set of optional regex \code{options} can be set.
}
\examples{
\dontrun{
regexp_extract('abcde', '[a-z]{3}')
regexp_extract('abc', '([a-z])(b)', 1)
regexp_extract('ABC', '([a-z])(b)', 1, 'i')
regexp_extract('2023-04-15', '(\d+)-(\d+)-(\d+)', ['y', 'm', 'd'])
regexp_extract('John Doe', '([a-z]+) ([a-z]+)', ['first_name', 'last_name'], 'i')
}
}
